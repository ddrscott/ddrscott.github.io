<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: submodes | @_ddrscott_]]></title>
  <link href="http://ddrscott.github.io/blog/categories/submodes/atom.xml" rel="self"/>
  <link href="http://ddrscott.github.io/"/>
  <updated>2017-03-14T19:43:01-05:00</updated>
  <id>http://ddrscott.github.io/</id>
  <author>
    <name><![CDATA[Scott Pierce]]></name>
    <email><![CDATA[ddrscott@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Making a Window Submode in Vim]]></title>
    <link href="http://ddrscott.github.io/blog/2016/making-a-window-submode/"/>
    <updated>2016-04-29T09:00:00-05:00</updated>
    <id>http://ddrscott.github.io/blog/2016/making-a-window-submode</id>
    <content type="html"><![CDATA[<p><img class="featured" src="/images/window-mode-feature.png" width="1280" height="380" title="&lsquo;Header Image&rsquo;" >
I found a plugin that is changing my Vim-tire life! This
<a href="https://github.com/kana/vim-submode">plugin</a> is so awesome it should be
built into default Vim. What does the <a href="https://github.com/kana/vim-submode">plugin</a>
do? It enables the creation of new submodes. Why would a person want <em>more</em> modes?!?
Isn&rsquo;t dealing with modes the main deterrent for new Vim users? Isn&rsquo;t Normal,
Insert, Command-line, Visual, Select, and Operator-pending enough? (Did I miss one?)
Let&rsquo;s try out a new submode and see what happens.</p>

<!-- more -->


<h2>Problem</h2>

<p>Window commands are prefixed with <code>&lt;C-w&gt;</code>. Want to create a horizontal split?
Try <code>&lt;C-w&gt;s</code>, didn&rsquo;t mean to do that and want to do vertical split? <code>&lt;C-w&gt;q&lt;C-w&gt;v</code>.
Want to resize the vertical split <code>50&lt;C-w&gt;&gt;</code>? Too wide? Narrow it with <code>5&lt;C-w&gt;&lt;</code>.
Move back to the other window? <code>&lt;C-w&gt;p</code> or <code>&lt;C-w&gt;w</code>.</p>

<p>Are your fingers getting tired? After I get the windows just right using default
mappings my fingers are crying for mercy.</p>

<p>Here&rsquo;s a short list of common default window commands:
```vim
&ldquo; Change window focus
{n}&lt;C-w>h   move cursor left  {n} window
{n}&lt;C-w>l   move cursor right {n} window
{n}&lt;C-w>j   move cursor down  {n} window
{n}&lt;C-w>k   move cursor up    {n} window</p>

<p>&ldquo; Move window
&lt;C-w>H   move window far left
&lt;C-w>L   move window far right
&lt;C-w>J   move window far bottom
&lt;C-w>K   move window far top</p>

<p>&ldquo; Change size
{n}&lt;C-w>+  increase height by {n} rows
{n}&lt;C-w>&ndash;  decrease height by {n} rows
{n}&lt;C-w>&lt;  decrease width by {n} columns
{n}&lt;C-w>>  increase width by {n} columns
   &lt;C-w>|  maximize width
   &lt;C-w>_  maximize height
   &lt;C-w>=  equalize sizes
```</p>

<p>For a comprehensive list of window commands try <code>:help windows.txt</code>.</p>

<h2>Solution A</h2>

<p>The most common solution to window-command-itis is to map other keys to these
common actions so to include the <code>&lt;C-w&gt;</code> prefix.</p>

<p>From <a href="https://github.com/spf13/spf13-vim/blob/3.0/.vimrc">spf13-vim</a>:
<code>vim
map &lt;C-J&gt; &lt;C-W&gt;j&lt;C-W&gt;_
map &lt;C-K&gt; &lt;C-W&gt;k&lt;C-W&gt;_
map &lt;C-L&gt; &lt;C-W&gt;l&lt;C-W&gt;_
map &lt;C-H&gt; &lt;C-W&gt;h&lt;C-W&gt;_
" Note: They go one extra by maximizing the height after entering the split.
</code></p>

<p>From <a href="https://robots.thoughtbot.com/vim-splits-move-faster-and-more-naturally">Thoughbot</a>:
<code>vim
nnoremap &lt;C-J&gt; &lt;C-W&gt;&lt;C-J&gt;
nnoremap &lt;C-K&gt; &lt;C-W&gt;&lt;C-K&gt;
nnoremap &lt;C-L&gt; &lt;C-W&gt;&lt;C-L&gt;
nnoremap &lt;C-H&gt; &lt;C-W&gt;&lt;C-H&gt;
</code></p>

<p>This has been the accepted solution for most, but it takes away so many
convenient keys. And in some cases, it even overrides default behaviour.
<code>&lt;C-L&gt;</code>, I miss you. <code>C-H</code>, isn&rsquo;t that also <code>&lt;BS&gt;</code>? Guess I won&rsquo;t be using
you either.</p>

<h2>Solution B &ndash; Submode to the Rescue</h2>

<p>This entire solution depends on <a href="https://github.com/kana/vim-submode.git">kana/vim-submode</a>,
I consider it one of Japan&rsquo;s national treasures along with ninjas and ramen.
Unfortunately, Kana&rsquo;s example use of submodes is a little underwhelming:
undo/redo using <code>g-</code> and <code>g+</code>. I agree with the author that using <code>g-</code> and
<code>g+</code> is not convenient, and using <code>g++++-++-+</code> is easier, but the solution
for that was simply <code>u</code> and <code>&lt;C-R&gt;</code>. I feel a better application for a new
submode is window management. Imagine if resizing a split was <code>&lt;C-w&gt;++++++++</code>
or <code>&lt;C-w&gt;------=-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&lt;&gt;</code> or changing cursor location was <code>&lt;C-w&gt;hjlll</code>
or moving was <code>&lt;C-w&gt;HjKLkjh</code>. Imagine no more!</p>

<p>First, install the plugin. If you&rsquo;re not sure how to install a plugin, try
<a href="https://github.com/junegunn/vim-plug">junegunn/vim-plug</a>. Next, add the
following to your <code>$MYVIMRC</code>.</p>

<p>```vim
&ldquo; A message will appear in the message line when you&rsquo;re in a submode
&rdquo; and stay there until the mode has existed.
let g:submode_always_show_submode = 1</p>

<p>&ldquo; We&rsquo;re taking over the default &lt;C-w> setting. Don&rsquo;t worry we&rsquo;ll do
&rdquo; our best to put back the default functionality.
call submode#enter_with(&lsquo;window&rsquo;, &lsquo;n&rsquo;, &lsquo;&rsquo;, &lsquo;&lt;C-w>&rsquo;)</p>

<p>&ldquo; Note: &lt;C-c> will also get you out to the mode without this mapping.
&rdquo; Note: &lt;C-[> also behaves as <ESC>
call submode#leave_with(&lsquo;window&rsquo;, &lsquo;n&rsquo;, &lsquo;&rsquo;, &lsquo;<ESC>&rsquo;)</p>

<p>&ldquo; Go through every letter
for key in [&lsquo;a&rsquo;,&lsquo;b&rsquo;,&lsquo;c&rsquo;,&rsquo;d',&lsquo;e&rsquo;,&lsquo;f&rsquo;,&lsquo;g&rsquo;,&lsquo;h&rsquo;,&lsquo;i&rsquo;,&lsquo;j&rsquo;,&lsquo;k&rsquo;,&lsquo;l&rsquo;,&rsquo;m',
\           &lsquo;n&rsquo;,&lsquo;o&rsquo;,&lsquo;p&rsquo;,&lsquo;q&rsquo;,&lsquo;r&rsquo;,&rsquo;s',&rsquo;t',&lsquo;u&rsquo;,&lsquo;v&rsquo;,&lsquo;w&rsquo;,&lsquo;x&rsquo;,&lsquo;y&rsquo;,&lsquo;z&rsquo;]
  &rdquo; maps lowercase, uppercase and &lt;C-key>
  call submode#map(&lsquo;window&rsquo;, &lsquo;n&rsquo;, &lsquo;&rsquo;, key, &lsquo;&lt;C-w>&rsquo; . key)
  call submode#map(&lsquo;window&rsquo;, &lsquo;n&rsquo;, &lsquo;&rsquo;, toupper(key), &lsquo;&lt;C-w>&rsquo; . toupper(key))
  call submode#map(&lsquo;window&rsquo;, &lsquo;n&rsquo;, &lsquo;&rsquo;, &lsquo;&lt;C-&rsquo; . key . &lsquo;>&rsquo;, &lsquo;&lt;C-w>&rsquo; . &lsquo;&lt;C-&rsquo;.key . &lsquo;>&rsquo;)
endfor
&ldquo; Go through symbols. Sadly, &lsquo;|&rsquo;, not supported in submode plugin.
for key in [&lsquo;=&rsquo;,&lsquo;_&rsquo;,&lsquo;+&rsquo;,&lsquo;&ndash;&rsquo;,&lsquo;&lt;&rsquo;,&lsquo;>&rsquo;]
  call submode#map(&lsquo;window&rsquo;, &lsquo;n&rsquo;, &lsquo;&rsquo;, key, &lsquo;&lt;C-w>&rsquo; . key)
endfor</p>

<p>&ldquo; Old way, just in case.
nnoremap <Leader>w &lt;C-w>
```</p>

<p>After <code>:source $MYVIMRC</code>, you&rsquo;ll have a glorious new submode in Vim.
You can see I named it <em>window</em> mode. Can you guess how to get into <em>window</em> mode?
<code>&lt;C-w&gt;</code>, the normal prefix used to do any <code>wincmd</code>. If this is too drastic, feel
free to change line #7 to something else. Just replace <code>&lt;C-w&gt;</code> with a different
normal mapping.</p>

<p>Let&rsquo;s give it a test drive.
<img class="featured" src="/images/window-submode.gif" width="1142" height="719" title="&lsquo;window mode in action&rsquo;" >
I know you can&rsquo;t see what keys I&rsquo;m pressing, but I guarantee I only pressed
<code>&lt;C-w&gt;</code> once. I also didn&rsquo;t have to remember any new key bindings. The
hesitation in the demo is the resistance to hitting <code>&lt;C-w&gt;</code> every time, which
I&rsquo;ll get over soon enough.</p>

<h2>Bonus Mappings</h2>

<p>But wait there&rsquo;s more! In case I haven&rsquo;t provided enough tips for one post,
here&rsquo;s the overrides I have in <code>$MYVIMRC</code> to make windowing even better.</p>

<p>`&ldquo;vim
&ldquo; I don&rsquo;t like &lt;C-w>q, &lt;C-w>c won&rsquo;t exit Vim when it&rsquo;s the last window.
call submode#map(&lsquo;window&rsquo;, &lsquo;n&rsquo;, &rdquo;, &lsquo;q&rsquo;, &lsquo;&lt;C-w>c&rsquo;)
call submode#map(&lsquo;window&rsquo;, &lsquo;n&rsquo;, &lsquo;&rsquo;, &lsquo;&lt;C-q>&rsquo;, &lsquo;&lt;C-w>c&rsquo;)</p>

<p>&ldquo; &lt;lowercase-pipe> sets the width to 80 columns, pipe (&lt;S->) by default
&rdquo; maximizes the width.
call submode#map(&lsquo;window&rsquo;, &lsquo;n&rsquo;, &lsquo;&rsquo;, &lsquo;\&rsquo;, &lsquo;:vertical resize 80<CR>&rsquo;)</p>

<p>&ldquo; Resize faster
call submode#map(&lsquo;window&rsquo;, &lsquo;n&rsquo;, &lsquo;&rsquo;, &lsquo;+&rsquo;, &lsquo;3&lt;C-w>+&rsquo;)
call submode#map(&lsquo;window&rsquo;, &lsquo;n&rsquo;, &lsquo;&rsquo;, &lsquo;&ndash;&rsquo;, &lsquo;3&lt;C-w>&ndash;&rsquo;)
call submode#map(&lsquo;window&rsquo;, &lsquo;n&rsquo;, &lsquo;&rsquo;, &lsquo;&lt;&rsquo;, &lsquo;10&lt;C-w>&lt;&rsquo;)
call submode#map(&lsquo;window&rsquo;, &lsquo;n&rsquo;, &lsquo;&rsquo;, &lsquo;>&rsquo;, &lsquo;10&lt;C-w>>&rsquo;)
```</p>

<h2>Rainbows without Unicorns</h2>

<p>While learning this new way of windowing, there have been a few negatives:</p>

<ol>
<li><p>I forget that I&rsquo;m in window mode and get disoriented when I think I&rsquo;m moving
the cursor within a buffer, but it jumps around to other splits.</p></li>
<li><p>For one off window commands, I have to hit an extra key to get out of window
mode or wait for the timeout.</p></li>
<li><p>When I use some one else&rsquo;s computer, I&rsquo;m useless.</p></li>
</ol>


<p>I think most of these annoyances will go away with time, and the benefits
overtime in keystroke savings are non-trivial. As for #3, regardless of submodes,
the brain freeze will never go away, because no one thinks as strangely as me,
and that&rsquo;s a Good Thing™.</p>

<h2>Thanks</h2>

<p>Shout-out to Kana Natsuno, @kana1, <a href="http://whileimautomaton.net/,">http://whileimautomaton.net/,</a> <a href="https://github.com/kana">https://github.com/kana</a> . None
of this awesomeness would be possible without <a href="https://github.com/kana/vim-submode">https://github.com/kana/vim-submode</a> . She
makes some totally sweet plug-ins. Check out her stuff. You won&rsquo;t regret it!</p>

<p>Let me know what you think. Am I crazy? What other things deserve a submode?
Hit me up in the comments below! Thanks for reading!</p>
]]></content>
  </entry>
  
</feed>
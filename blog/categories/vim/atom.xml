<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vim | @_ddrscott_]]></title>
  <link href="http://ddrscott.github.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://ddrscott.github.io/"/>
  <updated>2016-04-25T04:42:17-05:00</updated>
  <id>http://ddrscott.github.io/</id>
  <author>
    <name><![CDATA[Scott Pierce]]></name>
    <email><![CDATA[ddrscott@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Yank Without Jank]]></title>
    <link href="http://ddrscott.github.io/blog/2016/yank-without-jank/"/>
    <updated>2016-04-20T21:51:11-05:00</updated>
    <id>http://ddrscott.github.io/blog/2016/yank-without-jank</id>
    <content type="html"><![CDATA[<p><img class="featured" src="/images/yank-default.gif" width="234" height="130" title="&lsquo;Yank default jump&rsquo;" ></p>

<p>For all the great things Vim has to offer, it still has some inconsistencies with
basic editors that I simply can&rsquo;t unlearn. One of these nasties is moving the cursor
after a visual yank. Go ahead, try it: <code>vipy</code>. Where&rsquo;s your cursor? Where did
you expect it to be located? When you&rsquo;re in a boring editor and do
<code>shift-down-down-down &lt;Cmd-c&gt;</code>, where&rsquo;s your cursor?  Where did you expect it
to be located? This janky behaviour always throws me off for a moment, then I
compose myself, do a <code>&lt;backtick&gt;&lt;greaterthan&gt;</code> to jump to the end of my selection, and <code>p</code>.</p>

<p>There must be a better way!</p>

<!-- more -->


<h2>Solution A</h2>

<p>Rebind <code>y</code> to do exactly what we did above:</p>

<p><code>vim
vnoremap y y`&gt;
</code></p>

<p>This work and I lived with it for a few minutes, but it still wasn&rsquo;t perfect. I
noticed when I do line select using capital <code>V</code> the cursor would still move. The
vertical motion was perfect, but horizontal motion was still jarring.</p>

<p><img class="featured" src="/images/yank-solution-a.gif" width="234" height="130" title="&lsquo;Yank tick greater than&rsquo;" ></p>

<h2>Solution B</h2>

<p>Let&rsquo;s try using marks to keep things in place:</p>

<p><code>vim
vnoremap y myy`y
vnoremap Y myY`y
</code>
<img class="featured" src="/images/2016-04-15-yank-without-jank_markdown.png" width="600" height="379" title="&lsquo;Yank Without Jank Annotation&rsquo;" >
The capital <code>Y</code> mapping is just in case we want to do a line wise yank from a
character wise selection.</p>

<p><img class="featured" src="/images/yank-solution-b.gif" width="234" height="130" title="&lsquo;Yank mark y&rsquo;" ></p>

<p>Like a well trained dog, the cursor stays even though you yank it.</p>

<p><strong>BONUS</strong> This snippet also takes over the <code>y</code> marker, so you can manually
<code>&lt;backtick&gt;y</code> at a later time to continue yanking where you left off. This is great when
you&rsquo;re moving a lot of stuff around and want pick up where you last were. You
can also change the mark to capitals in the binding so it spans buffers, too.</p>

<h2>Closing</h2>

<p>I&rsquo;ve been using this setting for a while and noticed my blood pressure is way
down. No more yank anxiety means I&rsquo;m a step closer to editing utopia!</p>

<p>Let me know how this goes for you in the comments below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim Toggle Movement: I Just Want to Go Home]]></title>
    <link href="http://ddrscott.github.io/blog/2016/vim-toggle-movement/"/>
    <updated>2016-04-14T05:51:11-05:00</updated>
    <id>http://ddrscott.github.io/blog/2016/vim-toggle-movement</id>
    <content type="html"><![CDATA[<p><img class="featured" src="/images/i_just_want_to_go_home.png" width="600" height="255" title="&lsquo;I just want to go home&rsquo;" ></p>

<p>I have a problem with the <code>^</code> key. I need its functionality, but its proximity is
too far for either of my stubby index fingers. No vimrc change can physically move it
closer to me, but I have found a way to move its funtionality to another a key.
A key which already knows how to go home. An alternate home. A home where my
heart isn&rsquo;t. Enough drama, what&rsquo;s the problem?!?</p>

<!-- more -->


<h2>The Problem</h2>

<p>In my daily coding, I have a deep seeded need to go to the first non-blank
character of a line. The only key that Vim provides for that functionality is <code>^</code>,
the hardest key to reach from the home row. A much more comfortable key to reach
is <code>0</code>, but that shoots us past the first non-blank character all the way to
the left edge of the window. <code>&lt;Home&gt;</code> is the ugly step child of either option
since it&rsquo;s even harder to reach and takes us to the first column, too.</p>

<p>In case you don&rsquo;t believe me. Here&rsquo;s what the Vim document says:</p>

<p>```text
  0         To the first character of the line.  |exclusive|</p>

<pre><code>    motion.

            *&lt;Home&gt;* *&lt;kHome&gt;*
</code></pre>

<p>  <Home>  To the first character of the line.  |exclusive|</p>

<pre><code>    motion.  When moving up or down next, stay in same
    TEXT column (if possible).  Most other commands stay
    in the same SCREEN column.  &lt;Home&gt; works like "1|",
    which differs from "0" when the line starts with a
    &lt;Tab&gt;.

            *^*
</code></pre>

<p>  ^         To the first non-blank character of the line. |exclusive| motion.
```</p>

<p>Why can&rsquo;t I have a key that is easy to reach and takes me to the first
non-blank?!?</p>

<p><img src="/images/venn_home_0.png" width="552" height="475" title="&lsquo;venn diagram &ndash; home, caret, and 0&rsquo;" ></p>

<p>I could swap the functionality of <code>0</code> and <code>^</code>:</p>

<p><code>
nnoremap 0 ^
nnoremap ^ 0
</code></p>

<p>This still forces me to reach for <code>^</code> when I need to need to get to that left
edge. There must be a better way!</p>

<h2>The Solution</h2>

<p>Let&rsquo;s give <code>0</code> some super toggling powers. When I hit it the first time, I want it be
be like <code>^</code>. If I hit it again, I want it to finish its travels and go to the
first column.</p>

<h3>Solution A</h3>

<p>```vim
function! ToggleHomeZero()
  let pos = getpos(&lsquo;.&rsquo;)
  execute &ldquo;normal! ^&rdquo;
  if pos == getpos(&lsquo;.&rsquo;)</p>

<pre><code>execute "normal! 0"
</code></pre>

<p>  endif
endfunction</p>

<p>nnoremap 0 :call ToggleHome()<CR>
```</p>

<p>This gets us exactly to the center of Venn diagrams heart:</p>

<p><strong>Easy to reach + First non-blank character + First column = Rainbow Colored Unicorn!</strong></p>

<h3>Solution B</h3>

<p>After enjoying staring at the function for a while, I realized we could add
super toggling powers to other movements. Lets extract the <code>normal</code> commands
into arguments and share the love with other keys!</p>

<p>```vim
function! ToggleMovement(firstOp, thenOp)
  let pos = getpos(&lsquo;.&rsquo;)
  execute &ldquo;normal! &rdquo; . a:firstOp
  if pos == getpos(&lsquo;.&rsquo;)</p>

<pre><code>execute "normal! " . a:thenOp
</code></pre>

<p>  endif
endfunction</p>

<p>&ldquo; The original carat 0 swap
nnoremap <silent> 0 :call ToggleMovement(&lsquo;^&rsquo;, &lsquo;0&rsquo;)<CR></p>

<p>&ldquo; How about ; and ,
nnoremap <silent> ; :call ToggleMovement(&lsquo;;&rsquo;, &lsquo;,&rsquo;)<CR>
nnoremap <silent> , :call ToggleMovement(&lsquo;,&rsquo;, &lsquo;;&rsquo;)<CR></p>

<p>&ldquo; How about H and L
nnoremap <silent> H :call ToggleMovement(&lsquo;H&rsquo;, &lsquo;L&rsquo;)<CR>
nnoremap <silent> L :call ToggleMovement(&lsquo;L&rsquo;, &lsquo;H&rsquo;)<CR></p>

<p>&ldquo; How about G and gg
nnoremap <silent> G :call ToggleMovement(&lsquo;G&rsquo;, &lsquo;gg&rsquo;)<CR>
nnoremap <silent> gg :call ToggleMovement(&lsquo;gg&rsquo;, &lsquo;G&rsquo;)<CR>
```</p>

<h2>Conclusion</h2>

<p><code>ToggleMovement</code> is the gift that keeps on giving!</p>

<p>What other movement can we add to the list?
Let me know in the comments below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BS to the Black Hole]]></title>
    <link href="http://ddrscott.github.io/blog/2016/bs-to-the-black-hole/"/>
    <updated>2016-04-13T00:48:47-05:00</updated>
    <id>http://ddrscott.github.io/blog/2016/bs-to-the-black-hole</id>
    <content type="html"><![CDATA[<p><img class="featured" src="/images/blackhole_bs.png" width="800" height="469" title="&lsquo;BS to Black Hole&rsquo;" ></p>

<p>First post in 2 years. Sorry to keep you waiting.</p>

<p>I&rsquo;ve been playing with Vim again, more specifically NeoVim
<a href="https://neovim.io/,">https://neovim.io/,</a> and this time I think it&rsquo;s going to stick.</p>

<h2>The Problem</h2>

<p>Sometimes, I want to delete text without worrying about blowing away the <code>unnamed</code>
register. This can be done by prefixing a normal or visual delete with <code>"_</code>,
but that&rsquo;s an awkward dance for my pinky and ring finger. Go ahead, try it.
You&rsquo;ll feel like you&rsquo;re in junior high again.</p>

<!-- more -->


<h2>Solution #1</h2>

<p>Setup a single key to do that <code>"_</code> thing for me. So my naive approach was to add
the following:</p>

<p><code>vim
nnoremap &lt;BS&gt; "_
vnoremap &lt;BS&gt; "_
</code></p>

<p>This was fine for 32.1 seconds of usability testing. It did the job, but what
cames after a <code>"_</code> was usually a <code>dw</code> or <code>db</code> operator. Ah oh, I said the &ldquo;o&rdquo;
word. That means I have to make a <code>opfunc</code>. (Who makes these rules?!?)</p>

<h2>Solution #2</h2>

<p>So what is this operator going to let us do? How about <code>&lt;BS&gt;iw</code> or <code>&lt;BS&gt;ap</code> or
<code>v{motion around something you hate}&lt;BS&gt;</code>? If any of those seem awesome, here&rsquo;s
how to get in on the hot action!</p>

<p>```vim
&ldquo; Add to your .vimrc or init.vim or vim.after or :e $MYVIMRC
func! BlackHoleDeleteOperator(type)
  if a:type ==# &lsquo;char&rsquo;</p>

<pre><code>execute 'normal! `[v`]"_d'
</code></pre>

<p>  elseif a:type ==# &lsquo;line&rsquo;</p>

<pre><code>execute 'normal! `[V`]"_d'
</code></pre>

<p>  else</p>

<pre><code>execute 'normal! `&lt;' . a:type . '`&gt;"_d'
</code></pre>

<p>  endif
endf</p>

<p>&ldquo; Map to <BS> because it&rsquo;s under worked in Vim.
nnoremap <silent> <BS> <Esc>:set opfunc=BlackHoleDeleteOperator<CR>g@
vnoremap <silent> <BS> :&lt;C-u>call BlackHoleDeleteOperator(visualmode())<CR>
```</p>

<h2>How Does it Work?</h2>

<ul>
<li><p><code>opfunc</code> is best explained in Vim help. Use <code>:help opfunc</code> and follow the <code>&lt;C-]&gt;</code>
 until clarity is achieved.</p></li>
<li><p><code>:help normal</code> &ndash; evaluates the following characters as if they were typed.</p></li>
<li><p><code>:help marks</code> &ndash; page down a bit to get the list of automatic marks based on
 last positions of various changes, jumps, and actions.</p></li>
<li><p><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/33.html">http://learnvimscriptthehardway.stevelosh.com/chapters/33.html</a> &ndash; seriously,
 this guy does a lot better explaining than me. Learn it the hard way, first,
 ask questions later.</p></li>
</ul>


<h2>Closing</h2>

<p>Thanks for getting this far. Do you have a better mapping for <code>&lt;BS&gt;</code>? Do you
have a more creative solution than typing <code>"_</code> to access the black hole
register? Let me know by commenting or share this post to some one who does.</p>
]]></content>
  </entry>
  
</feed>
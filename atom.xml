<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@_ddrscott_]]></title>
  <link href="https://ddrscott.github.io/atom.xml" rel="self"/>
  <link href="https://ddrscott.github.io/"/>
  <updated>2018-03-22T07:02:20-05:00</updated>
  <id>https://ddrscott.github.io/</id>
  <author>
    <name><![CDATA[Scott Pierce]]></name>
    <email><![CDATA[ddrscott@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dev Blog Tools :: A quick tour of my setup]]></title>
    <link href="https://ddrscott.github.io/blog/2018/blog-setup/"/>
    <updated>2018-03-22T02:45:00-05:00</updated>
    <id>https://ddrscott.github.io/blog/2018/blog-setup</id>
    <content type="html"><![CDATA[<p><img class="featured" src="https://ddrscott.github.io/images/my_blog_setup.png" width=1364 height=1078 alt="Annotated screenshot" /></p>

<p>I&rsquo;ve been asked to share about my blogging setup a few times, so in the spirit of keeping things <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a>, it&rsquo;s time to make a post about it.</p>

<p><strong>TL;DR</strong> &mdash; Mac, iTerm, NeoVim, LICEcap, Octopress, Base16, Input Font, Skitch, OBS</p>

<!-- more -->


<blockquote><p> <strong>WARNING</strong> This is an atypical post. I normally prefer to go over a single feature, but this time I&rsquo;m going to under explain a lot of features. Here&rsquo;s a short list of typical posts in case chaos is not your thing:</p>

<ul>
<li><a href="https://ddrscott.github.io/blog/2017/vim-send-text/">https://ddrscott.github.io/blog/2017/vim-send-text/</a></li>
<li><a href="https://ddrscott.github.io/blog/2017/what-the-sql-lateral/">https://ddrscott.github.io/blog/2017/what-the-sql-lateral/</a></li>
<li><a href="https://ddrscott.github.io/blog/2016/negative-modulo/">https://ddrscott.github.io/blog/2016/negative-modulo/</a></li>
</ul>
</blockquote>

<h2>Computer</h2>

<p>I do all my writing and coding on a MacBook Pro Retina 15 inch. It&rsquo;s pretty maxed out, but I don&rsquo;t think it needs to be that way. The only stats I really care about are the size and the clarity of the screen.</p>

<p><img src="https://ddrscott.github.io/images/osx-version.png" width=1396 height=960 /></p>

<h2>Terminal</h2>

<p>I like to live in a terminal. I choose <a href="https://www.iterm2.com/">iTerm2</a> for it&rsquo;s split panes and independent font size per pane. At times I wish it was as fast as the native Terminal.app, but it doesn&rsquo;t support splits. I&rsquo;ve been told many times that <a href="https://github.com/tmux/tmux/wiki">tmux</a> supports splits, too, but I can&rsquo;t change the text size independently between splits. I&rsquo;d also rather use <a href="https://www.gnu.org/software/screen/">GNU screen</a> anyway.</p>

<blockquote><p>Old timers like old things™</p></blockquote>

<h2>Editor</h2>

<p><a href="https://neovim.io/">NeoVim</a> is always loaded in one of my terminal panes. It&rsquo;s the most efficient editor for me. I switched away from Vim 7 because it couldn&rsquo;t do background jobs. Prior to Vim I used <a href="https://www.jetbrains.com/ruby/">RubyMine</a> and <a href="https://www.jetbrains.com/idea/">IntelliJ</a> which were great for code completion and navigating projects, but felt heavy for notes, free form writing, and editing system files. I&rsquo;ll save the rest of the Vim sermon for another post.</p>

<p>When composing posts, I use <a href="https://github.com/plasticboy/vim-markdown">vim-markdown</a> to get syntax highlighting, folding, TOC, and other goodies.</p>

<p>My entire NeoVim config can be found in its <a href="https://github.com/ddrscott/config-nvim">Github repository</a>. I don&rsquo;t recommend folks using it outright, but borrow parts if it and slowly integrate it into their own setup. One size doesn&rsquo;t fit all. It barely fits me!</p>

<h2>Colors</h2>

<p>I lived in <a href="http://ethanschoonover.com/solarized">Solarized Dark</a> for many years. It is so common place in development shops it became the <a href="https://en.wikipedia.org/wiki/Monochrome_monitor#/media/File:IBM_PC_5150.jpg">new green screen</a> of the 70&rsquo;s and 80&rsquo;s. So when folks see yellow and green highlights against an off-black chalkboard beaming from my terminal, there&rsquo;s pause and self reflection. They wonder how they were nestled into a monotonous monoculture. They ponder when they traded emotional delight for ocular comfort. They realize depression encroached silently on them like mold in a damp attic. But I digress&hellip;</p>

<p>Here&rsquo;s how Base16 describes itself:</p>

<blockquote><p>An architecture for building themes based on carefully chosen syntax highlighting using a base of sixteen colours. Base16 provides a set of guidelines detailing how to style syntax and how to code a builder for compiling base16 schemes and templates.</p>

<p>&mdash; <a href="https://github.com/chriskempson/base16">https://github.com/chriskempson/base16</a></p></blockquote>

<p><img src="https://ddrscott.github.io/images/base16_colors.png" width=1398 height=1136 alt="Base16 ocean colors" /></p>

<p><a href="http://chriskempson.com/projects/base16/">base16-ocean</a> is the color scheme I use. It&rsquo;s scheme #74, type <code>j</code> or <code>k</code> to change the theme). The scheme is perfectly in sync between shell and Vim due to <a href="https://github.com/chriskempson/base16-shell">base16-shell</a> and <a href="https://github.com/chriskempson/base16-vim">base16-vim</a>. I wrote a <a href="https://ddrscott.github.io/blog/2017/base16-shell/">longer post about using Base16 while back</a>.</p>

<h2>Font</h2>

<p>I&rsquo;ve been using the same code font for as long as I can remember: Input Mono Condensed.</p>

<p><img src="https://ddrscott.github.io/images/input_font.jpg" width=1088 height=685 alt="Input Font Samples" /></p>

<blockquote><p>Input is a flexible system of fonts designed specifically for code by David Jonathan Ross. It offers both monospaced and proportional fonts, all with a large range of widths, weights, and styles for richer code formatting.</p>

<p>&mdash; Font Bureau</p></blockquote>

<p>I enjoy the fancy &lsquo;a&rsquo; and &lsquo;g&rsquo; characters along with easy to distinguish &lsquo;l&rsquo;, &lsquo;1&rsquo;, and &lsquo;I&rsquo;. It also has several different character width options so I can squeeze more code in one eye shot.</p>

<p>Speaking of shots&hellip;</p>

<h2>Screenshots</h2>

<p>I have a few ways of taking screenshots and it&rsquo;s mainly the Mac way:</p>

<ul>
<li>To snap a small portion of the screen, I use <code>⇧+⌘+4</code>, then select region to snap.</li>
<li>To snap a window with the shadow, I use <code>⇧+⌘+4</code>, then <code>space</code> and select a window.</li>
</ul>


<p><a href="https://support.apple.com/en-us/HT201361">Apple&rsquo;s support page</a> has the gruesome details on both.</p>

<p>When I want to annotate a screenshot, I use <a href="https://evernote.com/products/skitch">Evernote&rsquo;s Skitch App</a>. The featured image was created using a combination of OSX screenshot and then editing in <a href="https://evernote.com/products/skitch">Skitch</a>.</p>

<p><img src="https://ddrscott.github.io/images/skitch.png" width=1850 height=1514 /></p>

<h2>Animated Gifs and Videos</h2>

<p>For short demos, I like to use <a href="https://www.cockos.com/licecap/">LICEcap</a> to record an animated Gif. I wouldn&rsquo;t use Gifs for anything longer than a few seconds since it doesn&rsquo;t support video playback controls without extra magic.</p>

<p>Here&rsquo;s an example <a href="https://www.cockos.com/licecap/">LICEcap</a> Gif:</p>

<p><img src="https://ddrscott.github.io/images/licecap_demo2.gif" width=775 height=274 /></p>

<p>And here&rsquo;s a video of how I produced it:</p>

<div style="position:relative;height:0;padding-bottom:75.0%"><iframe src="https://www.youtube.com/embed/_BwVHJx1Zc4?ecver=2" width="480" height="360" frameborder="0" allow="autoplay; encrypted-media" style="position:absolute;width:100%;height:100%;left:0" allowfullscreen></iframe></div>


<p>For full screen video record, I use <a href="https://obsproject.com/">OBS Studio</a>. (You might have noticed me stopping the recording at the end of the video. Should have used a hotkey.) It produces small file sizes and a lot has features including video overlays, webcam capture, filters, transforms, etc. It deserves a whole book of its own.</p>

<blockquote><p><strong>Note to Self</strong></p>

<ol>
<li>write book about OBS Studio</li>
<li>retire</li>
</ol>
</blockquote>

<h2>Blog Generator</h2>

<p>I use <a href="http://octopress.org/">Octopress</a> to generate the static HTML pages you&rsquo;re reading now. I haven&rsquo;t updated it since 2014 (<a href="https://github.com/imathis/octopress/tree/71e4d40ba7aef73da65936bc9a77e432609811b2">SHA 71e4d40b</a>) and I&rsquo;m terrified to do so. The setup Just Works™. I write in <a href="https://en.wikipedia.org/wiki/Markdown">Markdown</a> and it does the rest.</p>

<p>The source code for this exact post is <a href="https://github.com/ddrscott/octopress/blob/master/source/_posts/2018-03-22-blog-setup.markdown">here</a>.</p>

<p>That being said, I&rsquo;m strongly considering switching to <a href="http://www.mkdocs.org/">Mkdocs</a> to have more structure and better search capabilities built-in.</p>

<h2>Closing</h2>

<p>You made it to the end! I hope at least one of these will benefit your daily computing life.</p>

<p>Questions? Comments? Trolls?!? Let me know! <a class="twitter-share-button" href="https://twitter.com/intent/tweet" data-hashtags="til">Tweet</a></p>

<p><strong>Links</strong></p>

<ul>
<li>iTerm2 &mdash; <a href="https://www.iterm2.com/">https://www.iterm2.com/</a></li>
<li>Tmux &mdash; <a href="https://github.com/tmux/tmux/wiki">https://github.com/tmux/tmux/wiki</a></li>
<li>GNU Screen &mdash; <a href="https://www.gnu.org/software/screen/">https://www.gnu.org/software/screen/</a></li>
<li>RubyMine &mdash; <a href="https://www.jetbrains.com/ruby/">https://www.jetbrains.com/ruby/</a></li>
<li>IntelliJ &mdash; <a href="https://www.jetbrains.com/idea/">https://www.jetbrains.com/idea/</a></li>
<li>Vim &mdash; <a href="https://www.vim.org">https://www.vim.org</a></li>
<li>NeoVim &mdash; <a href="https://neovim.io/">https://neovim.io/</a></li>
<li>vim-markdown &mdash; <a href="https://github.com/plasticboy/vim-markdown">https://github.com/plasticboy/vim-markdown</a></li>
<li>My NeoVim Config &mdash; <a href="https://github.com/ddrscott/config-nvim">https://github.com/ddrscott/config-nvim</a></li>
<li>base16-shell &mdash; <a href="https://github.com/chriskempson/base16-shell">https://github.com/chriskempson/base16-shell</a></li>
<li>base16-vim &mdash; <a href="https://github.com/chriskempson/base16-vim">https://github.com/chriskempson/base16-vim</a></li>
<li>base16-ocean &mdash; <a href="http://chriskempson.com/projects/base16/">http://chriskempson.com/projects/base16/</a></li>
<li>Input Font &mdash; <a href="http://input.fontbureau.com/">http://input.fontbureau.com/</a></li>
<li>Skitch &mdash; <a href="https://evernote.com/products/skitch">https://evernote.com/products/skitch</a></li>
<li>LICEcap &mdash; <a href="https://www.cockos.com/licecap/">https://www.cockos.com/licecap/</a></li>
<li>OBS Studio &mdash; <a href="https://obsproject.com/">https://obsproject.com/</a></li>
<li>Octopress &mdash; <a href="http://octopress.org/">http://octopress.org/</a></li>
<li>Mkdocs &mdash; <a href="http://www.mkdocs.org/">http://www.mkdocs.org/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Rustic Journey Through Stream Stats]]></title>
    <link href="https://ddrscott.github.io/blog/2018/stream-stats-in-rust/"/>
    <updated>2018-03-17T02:45:00-05:00</updated>
    <id>https://ddrscott.github.io/blog/2018/stream-stats-in-rust</id>
    <content type="html"><![CDATA[<p><img class="featured" src="https://ddrscott.github.io/images/stream_stats_demo.png" width=1364 height=1078 alt="Stream Stats Demo" /></p>

<p>After playing <a href="https://ddrscott.github.io/blog/2018/getting-rusty-with-vim/">Guessing Game</a> from the <a href="https://doc.rust-lang.org/book/first-edition/guessing-game.html">Rust Book</a> a few times, it was time to make something a little more substantial. We&rsquo;re going to create <code>stream_stats</code>, a CLI program which prints throughput statistics from <code>stdin</code> while redirecting through <code>stdout</code>. Think <code>tee</code> + <code>wc -l</code> + <code>watch</code> all at the same time.</p>

<p><strong>TL;DR</strong> &ndash; <code>cargo install stream_stats</code></p>

<!-- more -->


<p>Here is a quick demo of the program:</p>

<p><img src="https://ddrscott.github.io/images/stream_stats_demo.gif" width=745 height=250 alt="Stream Stats Gif" /></p>

<p>Today, I we&rsquo;ll build this program up in 6 steps smallish steps. The minimum requirement of this program was the live feedback as seen in the demo <em>and</em> minimal impact on the overall performance.</p>

<h2>Step 1 &ndash; Reproducing <code>cat</code> Inefficiently</h2>

<p>First step is to replicate <code>cat</code>. We&rsquo;ll do it as demonstrated by Rust&rsquo;s own <a href="https://doc.rust-lang.org/std/io/struct.Stdin.html#method.read_line">documentation</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">buffer</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">io</span><span class="o">::</span><span class="n">stdin</span><span class="p">().</span><span class="n">read_line</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">buffer</span><span class="p">).</span><span class="n">unwrap</span><span class="p">()</span> <span class="o">&gt;</span> <span class="m">0</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">buffer</span><span class="p">);</span>
</span><span class='line'>        <span class="n">buffer</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>I&rsquo;m using <code>unwrap</code> to keep our program short and sweet.</p></blockquote>

<p>Save the code as <code>stream_stats.rs</code> and build it using <code>rustc -O stream_stats.rs</code>. This will
compile the program into <code>stream_stats</code>. We can now run the program with
<code>./stream_stats &lt; stream_stats.rs</code> or <code>cat stream_stats.rs | stream_stats</code>. This should output the source code we just wrote.</p>

<p>The program is sufficient for small streams, but will perform horribly on large files.</p>

<h2>Step 2 &ndash; Reproducing <code>cat</code> Efficiently with Buffering</h2>

<blockquote><p>It can be excessively inefficient to work directly with a Read instance. For example, every call to read on TcpStream results in a system call. A BufReader performs large, infrequent reads on the underlying Read and maintains an in-memory buffer of the results.</p>

<p>&mdash; <a href="https://doc.rust-lang.org/std/io/struct.BufReader.html">https://doc.rust-lang.org/std/io/struct.BufReader.html</a></p></blockquote>

<p>Lets add some buffer use to increase performance and get it near the speed of <code>cat</code>. Replace the contents of <code>stream_stats.rs</code> with the following, recompile, and run the program.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="p">{</span><span class="n">self</span><span class="p">,</span> <span class="n">BufRead</span><span class="p">,</span> <span class="n">BufReader</span><span class="p">,</span> <span class="n">BufWriter</span><span class="p">,</span> <span class="n">Write</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">READ_BUF_SIZE</span><span class="o">:</span> <span class="n">usize</span> <span class="o">=</span> <span class="m">1024</span> <span class="o">*</span> <span class="m">1024</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">reader</span> <span class="o">=</span> <span class="n">BufReader</span><span class="o">::</span><span class="n">with_capacity</span><span class="p">(</span><span class="n">READ_BUF_SIZE</span><span class="p">,</span> <span class="n">io</span><span class="o">::</span><span class="n">stdin</span><span class="p">());</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">writer</span> <span class="o">=</span> <span class="n">BufWriter</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">stdout</span><span class="p">());</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">buffer</span> <span class="o">=</span> <span class="n">vec</span><span class="o">!</span><span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="n">reader</span><span class="p">.</span><span class="n">read_until</span><span class="p">(</span><span class="n">b</span><span class="sc">&#39;\n&#39;</span><span class="p">,</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">buffer</span><span class="p">).</span><span class="n">unwrap</span><span class="p">()</span> <span class="o">&gt;</span> <span class="m">0</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">writer</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buffer</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>        <span class="n">buffer</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">writer</span><span class="p">.</span><span class="n">flush</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The exact difference is <a href="https://github.com/ddrscott/tutorial-stream_stats/commit/30da32426f7ac420f4660c168678341301c68648" target="_new">viewable on Github</a>.
Here&rsquo;s a one-liner which to help with the build/run cycle:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rustc -O ./stream_stats.rs <span class="o">&amp;&amp;</span> ./stream_stats &lt; stream_stats.rs
</span></code></pre></td></tr></table></div></figure>


<p>For a few extra lines, we get a lot of performance. There are ways to get even more
performance, but it won&rsquo;t be worth the code complexity at this time.</p>

<h2>Step 3 &ndash; Count the Lines</h2>

<p>We&rsquo;re ready to start counting lines. We&rsquo;ll introduce a <code>struct</code> to hold a start
time and line count.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="p">{</span><span class="n">self</span><span class="p">,</span> <span class="n">BufRead</span><span class="p">,</span> <span class="n">BufReader</span><span class="p">,</span> <span class="n">BufWriter</span><span class="p">,</span> <span class="n">Write</span><span class="p">};</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">time</span><span class="o">::</span><span class="n">Instant</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">READ_BUF_SIZE</span><span class="o">:</span> <span class="n">usize</span> <span class="o">=</span> <span class="m">1024</span> <span class="o">*</span> <span class="m">1024</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Stats</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">started</span><span class="o">:</span> <span class="n">Instant</span><span class="p">,</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">:</span> <span class="n">usize</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">reader</span> <span class="o">=</span> <span class="n">BufReader</span><span class="o">::</span><span class="n">with_capacity</span><span class="p">(</span><span class="n">READ_BUF_SIZE</span><span class="p">,</span> <span class="n">io</span><span class="o">::</span><span class="n">stdin</span><span class="p">());</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">writer</span> <span class="o">=</span> <span class="n">BufWriter</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">stdout</span><span class="p">());</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">buffer</span> <span class="o">=</span> <span class="n">vec</span><span class="o">!</span><span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">stats</span> <span class="o">=</span> <span class="n">Stats</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">started</span><span class="o">:</span> <span class="n">Instant</span><span class="o">::</span><span class="n">now</span><span class="p">(),</span>
</span><span class='line'>        <span class="n">lines</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="n">reader</span><span class="p">.</span><span class="n">read_until</span><span class="p">(</span><span class="n">b</span><span class="sc">&#39;\n&#39;</span><span class="p">,</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">buffer</span><span class="p">).</span><span class="n">unwrap</span><span class="p">()</span> <span class="o">&gt;</span> <span class="m">0</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">writer</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buffer</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>        <span class="n">stats</span><span class="p">.</span><span class="n">lines</span> <span class="o">+=</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">buffer</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">writer</span><span class="p">.</span><span class="n">flush</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="n">eprintln</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;lines: {}, {:?}&quot;</span><span class="p">,</span> <span class="n">stats</span><span class="p">.</span><span class="n">lines</span><span class="p">,</span> <span class="n">stats</span><span class="p">.</span><span class="n">started</span><span class="p">.</span><span class="n">elapsed</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again the exact difference is <a href="https://github.com/ddrscott/tutorial-stream_stats/commit/4131ec8daea852ec4641cbca9ba13775ff8679d5?diff=split" target="_new">viewable on Github</a>.</p>

<h2>Step 4 &ndash; Write to <code>/dev/tty</code></h2>

<p>Using <code>eprintln!</code> is easy, but bad practice for non-error output. The next step is moving the output to <code>/dev/tty</code>. As a reminder, we&rsquo;re also not using <code>println!</code> because we&rsquo;re reserving it for the original content piped from <code>stdin</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">fs</span><span class="o">::</span><span class="p">{</span><span class="n">File</span><span class="p">,</span> <span class="n">OpenOptions</span><span class="p">};</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="p">{</span><span class="n">self</span><span class="p">,</span> <span class="n">BufRead</span><span class="p">,</span> <span class="n">BufReader</span><span class="p">,</span> <span class="n">BufWriter</span><span class="p">,</span> <span class="n">Write</span><span class="p">};</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">time</span><span class="o">::</span><span class="n">Instant</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">READ_BUF_SIZE</span><span class="o">:</span> <span class="n">usize</span> <span class="o">=</span> <span class="m">1024</span> <span class="o">*</span> <span class="m">1024</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Stats</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">started</span><span class="o">:</span> <span class="n">Instant</span><span class="p">,</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">:</span> <span class="n">usize</span><span class="p">,</span>
</span><span class='line'>    <span class="n">tty</span><span class="o">:</span> <span class="n">File</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span> <span class="n">Stats</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">new</span><span class="p">(</span><span class="n">tty</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Stats</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Stats</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">started</span><span class="o">:</span> <span class="n">Instant</span><span class="o">::</span><span class="n">now</span><span class="p">(),</span>
</span><span class='line'>            <span class="n">lines</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span>
</span><span class='line'>            <span class="n">tty</span><span class="o">:</span> <span class="n">OpenOptions</span><span class="o">::</span><span class="n">new</span><span class="p">()</span>
</span><span class='line'>                <span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">open</span><span class="p">(</span><span class="n">tty</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">expect</span><span class="p">(</span><span class="s">&quot;Cannot open tty for writing!&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">reader</span> <span class="o">=</span> <span class="n">BufReader</span><span class="o">::</span><span class="n">with_capacity</span><span class="p">(</span><span class="n">READ_BUF_SIZE</span><span class="p">,</span> <span class="n">io</span><span class="o">::</span><span class="n">stdin</span><span class="p">());</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">writer</span> <span class="o">=</span> <span class="n">BufWriter</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">stdout</span><span class="p">());</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">buffer</span> <span class="o">=</span> <span class="n">vec</span><span class="o">!</span><span class="p">[];</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">stats</span> <span class="o">=</span> <span class="n">Stats</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="s">&quot;/dev/tty&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="n">reader</span><span class="p">.</span><span class="n">read_until</span><span class="p">(</span><span class="n">b</span><span class="sc">&#39;\n&#39;</span><span class="p">,</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">buffer</span><span class="p">).</span><span class="n">unwrap</span><span class="p">()</span> <span class="o">&gt;</span> <span class="m">0</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">writer</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buffer</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>        <span class="n">stats</span><span class="p">.</span><span class="n">lines</span> <span class="o">+=</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">buffer</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">writer</span><span class="p">.</span><span class="n">flush</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="n">writeln</span><span class="o">!</span><span class="p">(</span>
</span><span class='line'>        <span class="n">stats</span><span class="p">.</span><span class="n">tty</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;lines: {}, {:?}&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">stats</span><span class="p">.</span><span class="n">lines</span><span class="p">,</span>
</span><span class='line'>        <span class="n">stats</span><span class="p">.</span><span class="n">started</span><span class="p">.</span><span class="n">elapsed</span><span class="p">()</span>
</span><span class='line'>    <span class="p">).</span><span class="n">expect</span><span class="p">(</span><span class="s">&quot;Could not write to tty!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Exact difference is <a href="https://github.com/ddrscott/tutorial-stream_stats/commit/e15502b23c1428f5ff86fdf6c6d791221e456992?diff=split" target="_new">viewable on Github</a>.</p>

<h2>Step 5 &ndash; Beautify Stats Output</h2>

<p>The display logic is going to get a little more complex. We want to move the string formatting code to a <code>fmt::Display</code> trait. We&rsquo;ll also add the kilobytes to the displayed stats.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">fmt</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">fs</span><span class="o">::</span><span class="p">{</span><span class="n">File</span><span class="p">,</span> <span class="n">OpenOptions</span><span class="p">};</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="p">{</span><span class="n">self</span><span class="p">,</span> <span class="n">BufRead</span><span class="p">,</span> <span class="n">BufReader</span><span class="p">,</span> <span class="n">BufWriter</span><span class="p">,</span> <span class="n">Write</span><span class="p">};</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">time</span><span class="o">::</span><span class="n">Instant</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">READ_BUF_SIZE</span><span class="o">:</span> <span class="n">usize</span> <span class="o">=</span> <span class="m">1024</span> <span class="o">*</span> <span class="m">1024</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="n">CLEAR_LINE</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">str</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\x1B</span><span class="s">[1G</span><span class="se">\x1B</span><span class="s">[2K&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Stats</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">started</span><span class="o">:</span> <span class="n">Instant</span><span class="p">,</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">:</span> <span class="n">usize</span><span class="p">,</span>
</span><span class='line'>    <span class="n">bytes</span><span class="o">:</span> <span class="n">usize</span><span class="p">,</span>
</span><span class='line'>    <span class="n">tty</span><span class="o">:</span> <span class="n">File</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span> <span class="n">Stats</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">new</span><span class="p">(</span><span class="n">tty</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Stats</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Stats</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">started</span><span class="o">:</span> <span class="n">Instant</span><span class="o">::</span><span class="n">now</span><span class="p">(),</span>
</span><span class='line'>            <span class="n">lines</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span>
</span><span class='line'>            <span class="n">bytes</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span>
</span><span class='line'>            <span class="n">tty</span><span class="o">:</span> <span class="n">OpenOptions</span><span class="o">::</span><span class="n">new</span><span class="p">()</span>
</span><span class='line'>                <span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">open</span><span class="p">(</span><span class="n">tty</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">expect</span><span class="p">(</span><span class="s">&quot;Cannot open tty for writing!&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span> <span class="n">fmt</span><span class="o">::</span><span class="n">Display</span> <span class="k">for</span> <span class="n">Stats</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">fmt</span><span class="p">(</span><span class="o">&amp;</span><span class="n">self</span><span class="p">,</span> <span class="n">f</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">fmt</span><span class="o">::</span><span class="n">Formatter</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">fmt</span><span class="o">::</span><span class="n">Result</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="n">elapsed</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">started</span><span class="p">.</span><span class="n">elapsed</span><span class="p">();</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">seconds</span><span class="o">:</span> <span class="k">f64</span> <span class="o">=</span> <span class="n">elapsed</span><span class="p">.</span><span class="n">as_secs</span><span class="p">()</span> <span class="k">as</span> <span class="k">f64</span> <span class="o">+</span> <span class="n">elapsed</span><span class="p">.</span><span class="n">subsec_nanos</span><span class="p">()</span> <span class="k">as</span> <span class="k">f64</span> <span class="o">*</span> <span class="m">1e-9</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">seconds</span> <span class="o">==</span> <span class="m">0.0</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">write</span><span class="o">!</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">kb</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">bytes</span> <span class="k">as</span> <span class="k">f64</span> <span class="o">/</span> <span class="m">1024</span> <span class="k">as</span> <span class="k">f64</span><span class="p">;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">kb_per_sec</span> <span class="o">=</span> <span class="n">kb</span> <span class="o">/</span> <span class="n">seconds</span><span class="p">;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">lines_per_sec</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">lines</span> <span class="k">as</span> <span class="k">f64</span> <span class="o">/</span> <span class="n">seconds</span><span class="p">;</span>
</span><span class='line'>        <span class="n">write</span><span class="o">!</span><span class="p">(</span>
</span><span class='line'>            <span class="n">f</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&quot;{}{:.1} sec | {:.0} kb [ {:.1}/s ] | {} lines [ {:.0}/s ]&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">CLEAR_LINE</span><span class="p">,</span>
</span><span class='line'>            <span class="n">seconds</span><span class="p">,</span>
</span><span class='line'>            <span class="n">kb</span><span class="p">,</span>
</span><span class='line'>            <span class="n">kb_per_sec</span><span class="p">,</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">lines</span><span class="p">,</span>
</span><span class='line'>            <span class="n">lines_per_sec</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">reader</span> <span class="o">=</span> <span class="n">BufReader</span><span class="o">::</span><span class="n">with_capacity</span><span class="p">(</span><span class="n">READ_BUF_SIZE</span><span class="p">,</span> <span class="n">io</span><span class="o">::</span><span class="n">stdin</span><span class="p">());</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">writer</span> <span class="o">=</span> <span class="n">BufWriter</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">stdout</span><span class="p">());</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">buffer</span> <span class="o">=</span> <span class="n">vec</span><span class="o">!</span><span class="p">[];</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">stats</span> <span class="o">=</span> <span class="n">Stats</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="s">&quot;/dev/tty&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="n">reader</span><span class="p">.</span><span class="n">read_until</span><span class="p">(</span><span class="n">b</span><span class="sc">&#39;\n&#39;</span><span class="p">,</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">buffer</span><span class="p">).</span><span class="n">unwrap</span><span class="p">()</span> <span class="o">&gt;</span> <span class="m">0</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">writer</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buffer</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>        <span class="n">stats</span><span class="p">.</span><span class="n">lines</span> <span class="o">+=</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">stats</span><span class="p">.</span><span class="n">bytes</span> <span class="o">+=</span> <span class="o">&amp;</span><span class="n">buffer</span><span class="p">.</span><span class="n">len</span><span class="p">();</span>
</span><span class='line'>        <span class="n">buffer</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">writer</span><span class="p">.</span><span class="n">flush</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="n">writeln</span><span class="o">!</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stats</span><span class="p">.</span><span class="n">tty</span><span class="p">,</span> <span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">stats</span><span class="p">).</span><span class="n">expect</span><span class="p">(</span><span class="s">&quot;Could not write to tty!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Exact difference is <a href="https://github.com/ddrscott/tutorial-stream_stats/commit/d2c5ef1cfcffc6a54e4b669aae835051d262143d?diff=split" target="_new">viewable on Github</a>.</p>

<h2>Step 6 &ndash; Display the stats 10 times per second</h2>

<p>We&rsquo;re finally at the most useful part of the program. Viewing the stats while
the stream is still going.</p>

<p>For this task, we introduce a thread which loops forever sleeping a little and
waking to output the stats. Because of the thread, we need to use <code>Arc</code> to
safely tell Rust another thread is going to have a pointer to the stats object.</p>

<p>To be honest, I don&rsquo;t fully understand why I need to use <code>AtomicUsize</code>. I tried
to keep the <code>usize</code> variables would get errors regarding mutability. If someone
out there can remove the <code>AtomicUsize</code> without introducing <code>unsafe</code> please let
me know!</p>

<p>Here&rsquo;s the final code listing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">fmt</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">fs</span><span class="o">::</span><span class="p">{</span><span class="n">File</span><span class="p">,</span> <span class="n">OpenOptions</span><span class="p">};</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="p">{</span><span class="n">self</span><span class="p">,</span> <span class="n">BufRead</span><span class="p">,</span> <span class="n">BufReader</span><span class="p">,</span> <span class="n">BufWriter</span><span class="p">,</span> <span class="n">Write</span><span class="p">};</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">sync</span><span class="o">::</span><span class="n">Arc</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">sync</span><span class="o">::</span><span class="n">atomic</span><span class="o">::</span><span class="p">{</span><span class="n">AtomicUsize</span><span class="p">,</span> <span class="n">Ordering</span><span class="p">};</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">thread</span><span class="o">::</span><span class="p">{</span><span class="n">self</span><span class="p">,</span> <span class="n">sleep</span><span class="p">};</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">time</span><span class="o">::</span><span class="p">{</span><span class="n">Duration</span><span class="p">,</span> <span class="n">Instant</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">READ_BUF_SIZE</span><span class="o">:</span> <span class="n">usize</span> <span class="o">=</span> <span class="m">1024</span> <span class="o">*</span> <span class="m">1024</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="n">CLEAR_LINE</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">str</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\x1B</span><span class="s">[1G</span><span class="se">\x1B</span><span class="s">[2K&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="n">UPDATE_INTERVAL_MS</span><span class="o">:</span> <span class="k">u64</span> <span class="o">=</span> <span class="m">100</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Stats</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">started</span><span class="o">:</span> <span class="n">Instant</span><span class="p">,</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">:</span> <span class="n">AtomicUsize</span><span class="p">,</span>
</span><span class='line'>    <span class="n">bytes</span><span class="o">:</span> <span class="n">AtomicUsize</span><span class="p">,</span>
</span><span class='line'>    <span class="n">tty</span><span class="o">:</span> <span class="n">File</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span> <span class="n">Stats</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">new</span><span class="p">(</span><span class="n">tty</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Stats</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Stats</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">started</span><span class="o">:</span> <span class="n">Instant</span><span class="o">::</span><span class="n">now</span><span class="p">(),</span>
</span><span class='line'>            <span class="n">lines</span><span class="o">:</span> <span class="n">AtomicUsize</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="m">0</span><span class="p">),</span>
</span><span class='line'>            <span class="n">bytes</span><span class="o">:</span> <span class="n">AtomicUsize</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="m">0</span><span class="p">),</span>
</span><span class='line'>            <span class="n">tty</span><span class="o">:</span> <span class="n">OpenOptions</span><span class="o">::</span><span class="n">new</span><span class="p">()</span>
</span><span class='line'>                <span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">open</span><span class="p">(</span><span class="n">tty</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">expect</span><span class="p">(</span><span class="s">&quot;Cannot open tty for writing!&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fn</span> <span class="n">add</span><span class="p">(</span><span class="o">&amp;</span><span class="n">self</span><span class="p">,</span> <span class="n">buffer</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">Vec</span><span class="o">&lt;</span><span class="k">u8</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">lines</span><span class="p">.</span><span class="n">fetch_add</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="n">Ordering</span><span class="o">::</span><span class="n">Relaxed</span><span class="p">);</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">bytes</span><span class="p">.</span><span class="n">fetch_add</span><span class="p">(</span><span class="n">buffer</span><span class="p">.</span><span class="n">len</span><span class="p">(),</span> <span class="n">Ordering</span><span class="o">::</span><span class="n">Relaxed</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span> <span class="n">fmt</span><span class="o">::</span><span class="n">Display</span> <span class="k">for</span> <span class="n">Stats</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">fmt</span><span class="p">(</span><span class="o">&amp;</span><span class="n">self</span><span class="p">,</span> <span class="n">f</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">fmt</span><span class="o">::</span><span class="n">Formatter</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">fmt</span><span class="o">::</span><span class="n">Result</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="n">elapsed</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">started</span><span class="p">.</span><span class="n">elapsed</span><span class="p">();</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">seconds</span><span class="o">:</span> <span class="k">f64</span> <span class="o">=</span> <span class="n">elapsed</span><span class="p">.</span><span class="n">as_secs</span><span class="p">()</span> <span class="k">as</span> <span class="k">f64</span> <span class="o">+</span> <span class="n">elapsed</span><span class="p">.</span><span class="n">subsec_nanos</span><span class="p">()</span> <span class="k">as</span> <span class="k">f64</span> <span class="o">*</span> <span class="m">1e-9</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">seconds</span> <span class="o">==</span> <span class="m">0.0</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">write</span><span class="o">!</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">bytes</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">bytes</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">Ordering</span><span class="o">::</span><span class="n">Relaxed</span><span class="p">)</span> <span class="k">as</span> <span class="k">f64</span><span class="p">;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">lines</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">lines</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">Ordering</span><span class="o">::</span><span class="n">Relaxed</span><span class="p">)</span> <span class="k">as</span> <span class="k">f64</span><span class="p">;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">kb</span> <span class="o">=</span> <span class="n">bytes</span> <span class="o">/</span> <span class="m">1024</span> <span class="k">as</span> <span class="k">f64</span><span class="p">;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">kb_per_sec</span> <span class="o">=</span> <span class="n">kb</span> <span class="o">/</span> <span class="n">seconds</span><span class="p">;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">lines_per_sec</span> <span class="o">=</span> <span class="n">lines</span> <span class="o">/</span> <span class="n">seconds</span><span class="p">;</span>
</span><span class='line'>        <span class="n">write</span><span class="o">!</span><span class="p">(</span>
</span><span class='line'>            <span class="n">f</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&quot;{}{:.1} sec | {:.0} kb [ {:.1}/s ] | {:.0} lines [ {:.0}/s ]&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">CLEAR_LINE</span><span class="p">,</span>
</span><span class='line'>            <span class="n">seconds</span><span class="p">,</span>
</span><span class='line'>            <span class="n">kb</span><span class="p">,</span>
</span><span class='line'>            <span class="n">kb_per_sec</span><span class="p">,</span>
</span><span class='line'>            <span class="n">lines</span><span class="p">,</span>
</span><span class='line'>            <span class="n">lines_per_sec</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">reader</span> <span class="o">=</span> <span class="n">BufReader</span><span class="o">::</span><span class="n">with_capacity</span><span class="p">(</span><span class="n">READ_BUF_SIZE</span><span class="p">,</span> <span class="n">io</span><span class="o">::</span><span class="n">stdin</span><span class="p">());</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">writer</span> <span class="o">=</span> <span class="n">BufWriter</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">stdout</span><span class="p">());</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">buffer</span> <span class="o">=</span> <span class="n">vec</span><span class="o">!</span><span class="p">[];</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">stats</span> <span class="o">=</span> <span class="n">Arc</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">Stats</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="s">&quot;/dev/tty&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">stats_clone</span> <span class="o">=</span> <span class="n">stats</span><span class="p">.</span><span class="n">clone</span><span class="p">();</span>
</span><span class='line'>    <span class="n">thread</span><span class="o">::</span><span class="n">spawn</span><span class="p">(</span><span class="k">move</span> <span class="o">||</span> <span class="k">loop</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="n">Duration</span><span class="o">::</span><span class="n">from_millis</span><span class="p">(</span><span class="n">UPDATE_INTERVAL_MS</span><span class="p">));</span>
</span><span class='line'>        <span class="n">write</span><span class="o">!</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stats_clone</span><span class="p">.</span><span class="n">tty</span><span class="p">,</span> <span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">stats_clone</span><span class="p">).</span><span class="n">expect</span><span class="p">(</span><span class="s">&quot;Could not write to tty!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="n">reader</span><span class="p">.</span><span class="n">read_until</span><span class="p">(</span><span class="n">b</span><span class="sc">&#39;\n&#39;</span><span class="p">,</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">buffer</span><span class="p">).</span><span class="n">unwrap</span><span class="p">()</span> <span class="o">&gt;</span> <span class="m">0</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">writer</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buffer</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>        <span class="n">stats</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buffer</span><span class="p">);</span>
</span><span class='line'>        <span class="n">buffer</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">writer</span><span class="p">.</span><span class="n">flush</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="n">writeln</span><span class="o">!</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stats</span><span class="p">.</span><span class="n">tty</span><span class="p">,</span> <span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">stats</span><span class="p">).</span><span class="n">expect</span><span class="p">(</span><span class="s">&quot;Could not write to tty!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Exact difference is <a href="https://github.com/ddrscott/tutorial-stream_stats/commit/e0b51a9de1364bfe3becfac8b27040c62bf06ac2?diff=split" target="_new">viewable on Github</a>.</p>

<h2>Closing Thoughts</h2>

<p>I personally learned a lot assembling these steps and wish I did this <em>before</em>
publishing the <code>cargo</code> <a href="https://github.com/ddrscott/stream_stats">crate</a> of the same name.</p>

<p>Any suggestions, comments, and corrections welcome on this post or the final crate are welcome.
<a href="https://github.com/ddrscott/stream_stats">https://github.com/ddrscott/stream_stats</a></p>

<p>Thanks for learning with me!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Rusty with Vim]]></title>
    <link href="https://ddrscott.github.io/blog/2018/getting-rusty-with-vim/"/>
    <updated>2018-03-04T06:30:00-06:00</updated>
    <id>https://ddrscott.github.io/blog/2018/getting-rusty-with-vim</id>
    <content type="html"><![CDATA[<p><img class="featured" src="https://ddrscott.github.io/images/rusty-featured.png" width=1910 height=1436 alt="Vim Screenshot" /></p>

<p>After dabbing in Go and Crystal, I figured I&rsquo;d give Rust a try. Of course I
used Vim along the way. Here are some notes I compiled after my first session.</p>

<!-- more -->


<h1>Vim Setup</h1>

<p>There are 2 excellent Vim plugins which play nice with Rust. First is
<a href="https://github.com/rust-lang/rust.vim">https://github.com/rust-lang/rust.vim</a> which provides:</p>

<blockquote><p>&hellip; Rust file detection, syntax highlighting, formatting, Syntastic integration, and more.</p></blockquote>

<p>It has nearly 1k stars, one of which is from me, and it&rsquo;s triple the stars of
<code>rust-mode</code> for Emacs.</p>

<p>The second plugin is <a href="https://github.com/racer-rust/vim-racer">https://github.com/racer-rust/vim-racer</a> which provides omni-complete and jump to definition. Both features are good enough that I don&rsquo;t need to use ctags. I&rsquo;ve in fact overridden several default Vim mappings with <code>vim-racer</code> implementations:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">au</span> <span class="nb">FileType</span> rust nmap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>C<span class="p">-</span>]<span class="p">&gt;</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>rust<span class="p">-</span><span class="nb">def</span><span class="p">)</span>
</span><span class='line'><span class="k">au</span> <span class="nb">FileType</span> rust nmap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;&lt;</span>C<span class="p">-</span>]<span class="p">&gt;</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>rust<span class="p">-</span><span class="nb">def</span><span class="p">-</span><span class="k">vertical</span><span class="p">)</span>
</span><span class='line'><span class="k">au</span> <span class="nb">FileType</span> rust nmap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;</span>} <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>rust<span class="p">-</span><span class="nb">def</span><span class="p">-</span>split<span class="p">)</span>
</span><span class='line'><span class="k">au</span> <span class="nb">FileType</span> rust nmap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">k</span><span class="p">&gt;</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>rust<span class="p">-</span>doc<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Rust Experience</h1>

<p>The featured image is an implementation of a number guessing game. The game is
from the Rust Tutorial Guide at
<a href="https://doc.rust-lang.org/book/first-edition/guessing-game.html.">https://doc.rust-lang.org/book/first-edition/guessing-game.html.</a> I followed the
guide sentence by sentence, line by line, and everything worked without
additional troubleshooting sessions. Good Job @rustlang!</p>

<p>I massaged the code a little more to fool around and came up with the code in
the featured screen shot. The source is available in this <a href="https://gist.github.com/ddrscott/991a329b7f1c1f7682da5e4c24cdecc5">gist</a>. It&rsquo;s not the most exciting code I&rsquo;ve
ever written, but possibly the most painless of the new languages I&rsquo;ve tried.</p>

<p>When I came across some confusing language decisions. I posted a tweet about it:</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Rust has clever tuple indexing, but square brackets would have been fine. What&#39;s wrong with `tuple[0]`? <a href="https://twitter.com/hashtag/rustlang?src=hash&amp;ref_src=twsrc%5Etfw">#rustlang</a> <a href="https://t.co/E0VY70zxuV">pic.twitter.com/E0VY70zxuV</a></p>&mdash; Scott Pierce (@_ddrscott_) <a href="https://twitter.com/_ddrscott_/status/969968042414366720?ref_src=twsrc%5Etfw">March 3, 2018</a></blockquote>


<p> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>@rustlang responded quickly with insightful information. They&rsquo;re totally getting
the Raving Fan Award this weekend!</p>

<h1>Conclusion</h1>

<p>Rust is worth pursing with or without Vim. The feedback from the compiler
and runtime errors is clear. The
<a href="https://github.com/racer-rust/vim-racer">racer-rust</a> completion utility gives
all IDE super powers. And finally, I hear it&rsquo;s a pretty good language, too.  <a href="https://www.rust-lang.org">https://www.rust-lang.org</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FZF + WordNet = Dictionary]]></title>
    <link href="https://ddrscott.github.io/blog/2017/fzf-dictionary/"/>
    <updated>2017-06-12T13:30:00-05:00</updated>
    <id>https://ddrscott.github.io/blog/2017/fzf-dictionary</id>
    <content type="html"><![CDATA[<p><img class="featured" src="https://ddrscott.github.io/images/fzf_dictionary_demo.gif" width="707" height="412" title="'FZF Dictionary'" ></p>

<p><code>FZF + WordNet = Dictionary</code>. FZF is a fuzzy finding command line tool. WordNet
is a dictionary structured for developers. When married together, we can get
a snappy dictionary to help us find just the right word for any occasion.</p>

<!-- more -->


<h1>Install Required Program</h1>

<p>Before making our new shell function, lets install the required programs.</p>

<ol>
<li><a href="https://github.com/junegunn/fzf">https://github.com/junegunn/fzf</a></li>
<li><a href="http://wordnetweb.princeton.edu/perl/webwn">http://wordnetweb.princeton.edu/perl/webwn</a></li>
</ol>


<p>These directions are for Max OSX with <code>homebrew</code> installed. If you&rsquo;re on
a different system, read the docs from the sites above to get the programs for
your operating system.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>brew install fzf
</span><span class='line'>brew cask install xquartz
</span><span class='line'>brew install wordnet
</span></code></pre></td></tr></table></div></figure>


<h2>FZF</h2>

<p>FZF stands for Fuzzy Finder. It is a program which enables the user to filter
a set of lines from standard in and feed those line back to standard out.
A basic example is: <code>find . | fzf</code>. This presents a list of all files in the
current working directory and prompts the user for input. As you type letters, the
list will narrow, keeping only the items matching the search criteria. After
selecting an entry from the list the line or lines chosen is printed to standard
out. It provides a nifty argument <code>--preview</code> which can execute a program and
display its output as an aside in the terminal. We&rsquo;ll write more about FZF in the
future.</p>

<h2>WordNet</h2>

<blockquote><p>WordNet is a large lexical database of English. Nouns, verbs, adjectives and
adverbs are grouped into sets of cognitive synonyms (synsets), each expressing
a distinct concept. Synsets are interlinked by means of conceptual-semantic
and lexical relations. The resulting network of meaningfully related words and
concepts can be navigated with the browser. WordNet is also freely and
publicly available for download. WordNet&rsquo;s structure makes it a useful tool
for computational linguistics and natural language processing.</p>

<p>WordNet superficially resembles a thesaurus, in that it groups words together
based on their meanings. However, there are some important distinctions.
First, WordNet interlinks not just word forms—strings of letters—but specific
senses of words. As a result, words that are found in close proximity to one
another in the network are semantically disambiguated. Second, WordNet labels
the semantic relations among words, whereas the groupings of words in
a thesaurus does not follow any explicit pattern other than meaning
similarity.</p></blockquote>

<p>Using WordNet we can find information similar to what is in a dictionary and
thesaurus combined.</p>

<p>Example output of looking up <code>happy</code> is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% wn happy -over
</span><span class='line'>
</span><span class='line'>Overview of adj happy
</span><span class='line'>
</span><span class='line'>The adj happy has 4 senses (first 2 from tagged texts)
</span><span class='line'>
</span><span class='line'>1. (37) happy -- (enjoying or showing or marked by joy or pleasure; &quot;a happy smile&quot;; &quot;spent many happy days on the beach&quot;; &quot;a happy marriage&quot;)
</span><span class='line'>2. (2) felicitous, happy -- (marked by good fortune; &quot;a felicitous life&quot;; &quot;a happy outcome&quot;)
</span><span class='line'>3. glad, happy -- (eagerly disposed to act or to be of service; &quot;glad to help&quot;)
</span><span class='line'>4. happy, well-chosen -- (well expressed and to the point; &quot;a happy turn of phrase&quot;; &quot;a few well-chosen words&quot;)
</span></code></pre></td></tr></table></div></figure>


<p><code>xquartz</code> is needed since the WordNet package also works in GUI mode. The GUI
app has a useful interface and could be more intuitive to use if you don&rsquo;t mind
clicking around. The GUI app can be started with <code>wnb</code>, but we&rsquo;re not here for
GUI stuff. Let&rsquo;s move on to making our terminal script.</p>

<h1>Shell Script</h1>

<p>The following 3 functions can be used individually and are helpful all on their
own. Add these directly into your shell profile or in a separate file and source
it from the profile.</p>

<p><code>fold</code> is normally a built in command. By default it adds newlines when text
overflows the terminal, but it doesn&rsquo;t do it in an easy to read fashion. The
default behavior can break in the middle of a word and assumes a terminal width
of 80 columns. Our <code>fold</code> function breaks at spaces and passes the whole
terminal width to it when no other arguments are provided.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Default `fold` to screen width and break at spaces</span>
</span><span class='line'><span class="k">function </span>fold <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> <span class="nv">$# </span>-eq 0 <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    /usr/bin/fold -w <span class="nv">$COLUMNS</span> -s
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    /usr/bin/fold <span class="nv">$*</span>
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>spell</code> is the FZF portion of our script. This fuzzy matches the built in Mac
dictionary with a preview window containing the WordNet overview of the selected
word.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Use `fzf` against system dictionary</span>
</span><span class='line'><span class="k">function </span>spell <span class="o">{</span>
</span><span class='line'>  cat /usr/share/dict/words <span class="p">|</span> fzf --preview <span class="s1">&#39;wn {} -over | fold&#39;</span> --preview-window<span class="o">=</span>up:60%
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>dic</code> script uses <code>spell</code> to help find a word then outputs WordNet&rsquo;s
definition.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Lookup definition of word using `wn $1 -over`.</span>
</span><span class='line'><span class="c"># If $1 is not provided, we&#39;ll use the `spell` command to pick a word.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Requires:</span>
</span><span class='line'><span class="c">#   brew install wordnet</span>
</span><span class='line'><span class="c">#   brew install fzf</span>
</span><span class='line'><span class="k">function </span>dic <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> <span class="nv">$# </span>-eq 0 <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'><span class="k">    </span>wn <span class="sb">`</span>spell<span class="sb">`</span> -over <span class="p">|</span> fold
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'><span class="k">    </span>wn <span class="nv">$1</span> -over <span class="p">|</span> fold
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s another demo of the <code>dic</code> function:
<img class="featured" src="https://ddrscott.github.io/images/fzf_dict_demo2.gif" width="570" height="360" title="'FZF Dictionary Demo 2'" ></p>

<h1>Conclusion</h1>

<p>Gluing programs together with <code>fzf --preview</code> is fun. Let us know what other
recipes you come up with in the comments below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GNU Screen]]></title>
    <link href="https://ddrscott.github.io/blog/2017/gnu-screen/"/>
    <updated>2017-06-01T13:30:00-05:00</updated>
    <id>https://ddrscott.github.io/blog/2017/gnu-screen</id>
    <content type="html"><![CDATA[<p><img class="featured" src="https://ddrscott.github.io/images/gnu-screen-featured.jpg" width="1024" height="488" title="'GNU Screen Featured'" ></p>

<blockquote><p>Screen is a full-screen window manager that multiplexes a physical terminal
between several processes, typically interactive shells.</p></blockquote>

<p>TL;DR &ndash; Screen keeps your ssh sessions alive on a host.</p>

<!-- more -->


<h2>Installation</h2>

<p>Most servers have <code>screen</code> installed already. If they don&rsquo;t it can be installed
via <code>apt-get install screen</code>, <code>yum install screen</code>, <code>brew install screen</code>. Sorry
Windows, try Remote Desktop.</p>

<h2>Startup</h2>

<p>Get a terminal on a remote host (or local) then run <code>screen</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>screen
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re not brave, try <code>man screen</code> to read more about.</p>

<p>Once <code>screen</code> has started, you&rsquo;ll want to remember <code>&lt;C-a&gt;?</code>. That is how you get
the screen options menu. It&rsquo;s typed literal hold <code>CTRL</code> and press <code>a</code>. To quit
the <code>screen</code> app, type <code>exit</code>. To keep <code>screen</code> running, type <code>&lt;C-a&gt;d</code> to detach
from the program. To reattach to that session try <code>screen -x</code>.</p>

<h2>Options</h2>

<p>There are tons of options and they&rsquo;re best found by reading the <code>man</code> page or
Googling <code>gnu screen shortcuts</code>. Here&rsquo;s some of my favorites.</p>

<h3>Startup Flags</h3>

<ul>
<li><code>screen -DDR</code>. Force others of the current session and reattach yourself.</li>
<li><code>screen -x</code>. Reattach yourself, but allow others to stay in. This is
  cooperative mode. Good for pairing and much faster than GUI screen sharing.</li>
</ul>


<h3>Control Keys</h3>

<ul>
<li><code>&lt;C-a&gt;&lt;C-c&gt;</code>. Create a &ldquo;tab&rdquo; to have multiple sessions.</li>
<li><code>&lt;C-a&gt;&lt;C-a&gt;</code>. Toggle to previous session.</li>
<li><code>&lt;C-a&gt;&lt;Space&gt;</code>. Switch next session.</li>
<li><code>&lt;C-a&gt;a</code>. Send a literal <code>&lt;C-a&gt;</code> back to shell.</li>
</ul>


<h3>Config File and Pretty Colors</h3>

<p>It&rsquo;s easy to get lost in screen without a status line. So creating this file in
your home directory will help.</p>

<p><strong>~/.screenrc</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>hardstatus alwayslastline
</span><span class='line'>hardstatus string &#39;%{= kG}[ %{G}%H %{g}][%= %{= kw}%?%-Lw%?%{r}(%{W}%n*%f%t%?(%u)%?%{r})%{w}%?%+Lw%?%?%= %{g}][%{B} %m-%d %{W}%c %{g}]&#39;
</span></code></pre></td></tr></table></div></figure>


<p>This should give you a pretty statusline at the bottom of your terminal.
Here&rsquo;s what it looks like:
<img class="featured" src="https://ddrscott.github.io/images/gnu-screen-statusline.jpg" width="1024" height="113" title="'GNU Screen Statusline'" ></p>

<h2>TMUX</h2>

<p>A strong competitor to <code>screen</code> is <code>tmux</code>. It has a more modern code base and is
actively maintained. The reason I personally don&rsquo;t use it is out of habit and
it&rsquo;s not installed everywhere. <code>screen</code> just works for my work flow.</p>

<h2>References</h2>

<ul>
<li><a href="https://www.gnu.org/software/screen/">https://www.gnu.org/software/screen/</a></li>
<li><a href="http://www.pixelbeat.org/lkdb/screen.html">http://www.pixelbeat.org/lkdb/screen.html</a></li>
<li><a href="http://aperiodic.net/screen/quick_reference">http://aperiodic.net/screen/quick_reference</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Base16 Shell]]></title>
    <link href="https://ddrscott.github.io/blog/2017/base16-shell/"/>
    <updated>2017-04-13T13:30:00-05:00</updated>
    <id>https://ddrscott.github.io/blog/2017/base16-shell</id>
    <content type="html"><![CDATA[<p><img class="featured" src="https://ddrscott.github.io/images/base16-featured.png" width="1024" height="558" title="'Base16 Featured'" ></p>

<p>After many years using the excellent Solarized color scheme, it has
started to feel stale. Sometimes I think the dark blueish tint brings
down my mood. Other times, I wonder what life could be like if I stared at more
cheerful colors. Thus starts my farewell from Solarized, and hello to
Base16.</p>

<!-- more -->


<p>From Base16&rsquo;s <a href="https://github.com/chriskempson/base16">Github README</a>:</p>

<blockquote><p>Base16 provides carefully chosen syntax highlighting and a default set of
sixteen colors suitable for a wide range of applications. Base16 is not a
single theme but a set of guidelines with numerous implementations.</p></blockquote>

<p>Which means after integrating into Base16 once, I&rsquo;ll have access to an
unlimited supply of themes in the future!</p>

<h2>Installation</h2>

<p>Base16 has perfect iTerm and shell integration. Once the repo was installed
locally, I called <code>base16_ocean</code> and was greeted by brand new palette. No iTerm
tweaking, no downloading this other thing and importing stuff into iTerm. It was
literally 2 steps performed in shell and then pick a theme.</p>

<p>Here&rsquo;s what you do. (FYI. This is pretty much copy/paste from their repo)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 1. clone the repo to `~/.config/base16-shell`</span>
</span><span class='line'>git clone https://github.com/chriskempson/base16-shell.git ~/.config/base16-shell
</span><span class='line'>
</span><span class='line'><span class="c"># 2. update ~/.bashrc or ~/.zshrc</span>
</span><span class='line'>cat &gt;&gt; ~/.zshrc <span class="s">&lt;&lt;&#39;SH&#39;</span>
</span><span class='line'><span class="s">BASE16_SH</span>ELL<span class="o">=</span><span class="nv">$HOME</span>/.config/base16-shell/
</span><span class='line'><span class="o">[</span> -n <span class="s2">&quot;$PS1&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> -s <span class="nv">$BASE16_SHELL</span>/profile_helper.sh <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">eval</span> <span class="s2">&quot;$($BASE16_SHELL/profile_helper.sh)&quot;</span>
</span><span class='line'>SH
</span></code></pre></td></tr></table></div></figure>


<p>After you&rsquo;re done with those steps, start a new terminal session or source the
file, and start choosing a theme. Try <code>base16_ocean</code> to see what I&rsquo;m seeing. Try
<code>base16_&lt;tab&gt;</code> to see what other options you have available. To preview what
they look like before making a choice go to their website:
<a href="https://chriskempson.github.io/base16/.">https://chriskempson.github.io/base16/.</a></p>

<h2>Vim Integration</h2>

<p>Install plugin from <a href="https://github.com/chriskempson/base16-vim.">https://github.com/chriskempson/base16-vim.</a></p>

<p>Add the following to your <code>.vimrc</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">if</span> filereadable<span class="p">(</span>expand<span class="p">(</span><span class="s2">&quot;~/.vimrc_background&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="k">let</span> base16colorspace<span class="p">=</span><span class="m">256</span>
</span><span class='line'>  source <span class="p">~</span>/.vimrc_background
</span><span class='line'><span class="k">endif</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>base16-shell</code> commands create the <code>~/.vimrc_background</code> file every time a
<code>base16_*</code> alias is used. This allows Vim to always stay synchronized with
shell which is AWESOME!</p>

<h2>Conclusion</h2>

<p>After cycling through everyone of the user created themes, I&rsquo;ve settled on
<code>base16_ocean</code> as my new home. I may get tired of it, I may not, but either way
I&rsquo;m just a shell command away from changing. Indecision has never been so easy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim Send Text]]></title>
    <link href="https://ddrscott.github.io/blog/2017/vim-send-text/"/>
    <updated>2017-04-10T13:30:00-05:00</updated>
    <id>https://ddrscott.github.io/blog/2017/vim-send-text</id>
    <content type="html"><![CDATA[<p><img class="featured" src="https://raw.githubusercontent.com/ddrscott/vim-islime2/gh-pages/demo.gif" title="'Vim Send Text Demo'" ></p>

<p>After pairing with some Sublime users, I noticed a neat feature. Or more
accurately, they were rubbing it in my face that their cute editor was better
than mine. The feature was <a href="https://github.com/wch/SendText">SendText</a>. Well, I
couldn&rsquo;t let Sublime users have all the fun, and apparently neither could a few
other people.</p>

<!-- more -->


<h2>History</h2>

<p>There have been a few other implementations at this feature. These
implementations sent the text to a screen or tmux split. Since I don&rsquo;t use
either, I couldn&rsquo;t use them a la carte.</p>

<ul>
<li><a href="https://github.com/vim-scripts/tslime.vim">https://github.com/vim-scripts/tslime.vim</a></li>
<li><a href="https://github.com/jpalardy/vim-slime">https://github.com/jpalardy/vim-slime</a></li>
<li><a href="https://github.com/ervandew/screen">https://github.com/ervandew/screen</a></li>
</ul>


<p>This next implementation was good. It&rsquo;s only flaw, IMHO, was it&rsquo;s mappings and
naming. The naming &ldquo;ISlime2&rdquo; is impossible for me to type on the first try. The
mappings overlapped my existing mappings.
<a href="https://github.com/matschaffer/vim-islime2">ISlime2</a> did all the hard work
AppleScript work and provides the Vim function to pass into the AppleScript.</p>

<p>Enter <a href="https://github.com/ddrscott/vim-sendtext">vim-sendtext</a>.
<a href="https://github.com/ddrscott/vim-sendtext">vim-sendtext</a> is a fork of <a href="https://github.com/matschaffer/vim-islime2">ISlime2</a>.
My fork removes all the mappings, exposes useful internal functions, and adds
recommended mappings to the README.md.</p>

<h2>Recommended Mappings</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; Send current line</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">i</span><span class="p">&lt;</span>CR<span class="p">&gt;</span> :SendTextCurrentLine<span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Send in/around text object - operation pending</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">i</span> :<span class="k">set</span> <span class="nb">opfunc</span><span class="p">=</span>sendtext#iTermSendOperator<span class="p">&lt;</span>CR<span class="p">&gt;</span><span class="k">g</span>@
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Send visual selection</span>
</span><span class='line'><span class="nb">vnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">i</span> :<span class="p">&lt;</span>C<span class="p">-</span><span class="k">u</span><span class="p">&gt;</span><span class="k">call</span> sendtext#iTermSendOperator<span class="p">(</span>visualmode<span class="p">(),</span> <span class="m">1</span><span class="p">)&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Move to next line then send it</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">ij</span> :SendTextNextLine<span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Move to previous line then send it</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>Leader<span class="p">&gt;</span>ik :SendTextPreviousLine<span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Vim Operator Pending</h2>

<p>One of the main reasons to use Vim is Operator pending.  It&rsquo;s at the heart of
<code>vip</code>, <code>dip</code>, <code>ciw</code>, etc.
<a href="https://github.com/ddrscott/vim-sendtext">vim-sendtext</a> provides an operator
pending function so we can logically do <code>{SEND}ap</code>, <code>{SEND}ip</code>, <code>{SEND}if</code>, etc.
The identical function works in visual mode to help build confidence in our text
object targets.</p>

<p>To read more about operator pending functions and how to create them try:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">h</span> map<span class="p">-</span>operator
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Hope <a href="https://github.com/ddrscott/vim-sendtext">vim-sendtext</a> can remove some
feature envy from Sublime. Happy console hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What the SQL?!? WINDOW]]></title>
    <link href="https://ddrscott.github.io/blog/2017/what-the-sql-window/"/>
    <updated>2017-03-22T13:30:00-05:00</updated>
    <id>https://ddrscott.github.io/blog/2017/what-the-sql-window</id>
    <content type="html"><![CDATA[<p><img class="featured" src="https://ddrscott.github.io/images/what_the_sql_window.png" width="1079" height="369" title="'What the SQL?!?  WINDOW'" ></p>

<p>Today&rsquo;s &ldquo;What the SQL?!?&rdquo; features the keyword <code>WINDOW</code>. This clause allows
us to elegantly select results from the previous results from the previous results
from the previous results&hellip;</p>

<!-- more -->


<p>Please note, our target database is PostgreSQL. These examples may work with
other databases, but might need some massaging to get them to work properly.
Search online for the specific vendor&rsquo;s documentation if errors pop up.
Try searching for &ldquo;WINDOW queries &rdquo;. Not all database vendors
support the keyword <code>WINDOW</code>.</p>

<h2>Create Sample Data</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">sample_moves</span><span class="p">;</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">sample_moves</span> <span class="k">AS</span>
</span><span class='line'>  <span class="k">SELECT</span>
</span><span class='line'>    <span class="n">column1</span><span class="p">::</span><span class="nb">int</span>     <span class="k">AS</span> <span class="n">id</span><span class="p">,</span>
</span><span class='line'>    <span class="n">column2</span><span class="p">::</span><span class="nb">varchar</span> <span class="k">AS</span> <span class="n">name</span><span class="p">,</span>
</span><span class='line'>    <span class="n">column3</span><span class="p">::</span><span class="nb">varchar</span> <span class="k">AS</span> <span class="n">address</span><span class="p">,</span>
</span><span class='line'>    <span class="n">column4</span><span class="p">::</span><span class="nb">date</span> <span class="k">AS</span> <span class="n">moved_at</span>
</span><span class='line'>  <span class="k">FROM</span> <span class="p">(</span>
</span><span class='line'>    <span class="k">VALUES</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;Alice&#39;</span> <span class="p">,</span> <span class="s1">&#39;1 Main St&#39;</span><span class="p">,</span> <span class="s1">&#39;2017-01-01&#39;</span><span class="p">),</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;Bob&#39;</span>   <span class="p">,</span> <span class="s1">&#39;2 Main St&#39;</span><span class="p">,</span> <span class="s1">&#39;2017-02-01&#39;</span><span class="p">),</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;Cat&#39;</span>   <span class="p">,</span> <span class="s1">&#39;2 Main St&#39;</span><span class="p">,</span> <span class="s1">&#39;2017-03-01&#39;</span><span class="p">),</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="s1">&#39;Dan Sr&#39;</span>  <span class="p">,</span> <span class="s1">&#39;3 Main St&#39;</span><span class="p">,</span>  <span class="s1">&#39;1970-04-01&#39;</span><span class="p">),</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;Dan Jr&#39;</span>  <span class="p">,</span> <span class="s1">&#39;3 Main St&#39;</span><span class="p">,</span>  <span class="s1">&#39;2001-04-01&#39;</span><span class="p">),</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="s1">&#39;Dan 3rd&#39;</span> <span class="p">,</span> <span class="s1">&#39;3 Main St&#39;</span><span class="p">,</span> <span class="s1">&#39;2017-04-01&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">)</span> <span class="k">as</span> <span class="n">t</span>
</span><span class='line'><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="k">ON</span> <span class="n">sample_moves</span><span class="p">(</span><span class="n">address</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">sample_moves</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Results:</h4>

<table>
<thead>
<tr>
<th></th>
<th> id </th>
<th>  name   </th>
<th>  address  </th>
<th>  moved_at</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>  1 </td>
<td> Alice   </td>
<td> 1 Main St </td>
<td> 2017-01-01</td>
</tr>
<tr>
<td></td>
<td>  2 </td>
<td> Bob     </td>
<td> 2 Main St </td>
<td> 2017-02-01</td>
</tr>
<tr>
<td></td>
<td>  3 </td>
<td> Cat     </td>
<td> 2 Main St </td>
<td> 2017-03-01</td>
</tr>
<tr>
<td></td>
<td>  4 </td>
<td> Dan Sr  </td>
<td> 3 Main St </td>
<td> 1970-04-01</td>
</tr>
<tr>
<td></td>
<td>  5 </td>
<td> Dan Jr  </td>
<td> 3 Main St </td>
<td> 2001-04-01</td>
</tr>
<tr>
<td></td>
<td>  6 </td>
<td> Dan 3rd </td>
<td> 3 Main St </td>
<td> 2017-04-01</td>
</tr>
</tbody>
</table>


<h2>Life Without Windows</h2>

<p>A quick poem&hellip;</p>

<blockquote><p>Eyes big and wide,     <br/>
nothing seen inside.   <br/>
Feeling around         <br/>
nothing abound.        <br/>
This things wet,       <br/>
toxic I bet.           <br/>
Closing my eyes,       <br/>
still can&rsquo;t rest.      <br/>
Having a window,       <br/>
would be best.         <br/></p></blockquote>

<h3>How many people live at each address?</h3>

<p>Using a standard <code>GROUP BY</code> with <code>COUNT</code> we consolidate the records and count
how many rows belong to each address.</p>

<blockquote><p><strong>Tip</strong>: <code>COUNT(1)</code> is more efficient than <code>COUNT(*)</code>.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>  <span class="n">address</span><span class="p">,</span>
</span><span class='line'>  <span class="k">COUNT</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="n">total</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">sample_moves</span>
</span><span class='line'><span class="k">GROUP</span> <span class="k">BY</span> <span class="n">address</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">address</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Results:</h4>

<table>
<thead>
<tr>
<th></th>
<th>  address  </th>
<th> total</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> 1 Main St </td>
<td>     1</td>
</tr>
<tr>
<td></td>
<td> 2 Main St </td>
<td>     2</td>
</tr>
<tr>
<td></td>
<td> 3 Main St </td>
<td>     3</td>
</tr>
</tbody>
</table>


<h3>How many people live with each person?</h3>

<p>Enter subquery land. Life without windows is not exciting.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>  <span class="o">*</span><span class="p">,</span>
</span><span class='line'>  <span class="p">(</span>
</span><span class='line'>    <span class="k">SELECT</span>
</span><span class='line'>      <span class="c1">-- everyone at the address, minus the person</span>
</span><span class='line'>      <span class="k">COUNT</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">FROM</span> <span class="n">sample_moves</span> <span class="n">t2</span>
</span><span class='line'>    <span class="k">WHERE</span> <span class="n">t2</span><span class="p">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">t1</span><span class="p">.</span><span class="n">address</span>
</span><span class='line'>  <span class="p">)</span> <span class="k">AS</span> <span class="n">others</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">sample_moves</span> <span class="n">t1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Results:</h4>

<table>
<thead>
<tr>
<th></th>
<th> id </th>
<th>  name   </th>
<th>  address  </th>
<th>  moved_at  </th>
<th> others</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>  1 </td>
<td> Alice   </td>
<td> 1 Main St </td>
<td> 2017-01-01 </td>
<td>      0</td>
</tr>
<tr>
<td></td>
<td>  2 </td>
<td> Bob     </td>
<td> 2 Main St </td>
<td> 2017-02-01 </td>
<td>      1</td>
</tr>
<tr>
<td></td>
<td>  3 </td>
<td> Cat     </td>
<td> 2 Main St </td>
<td> 2017-03-01 </td>
<td>      1</td>
</tr>
<tr>
<td></td>
<td>  4 </td>
<td> Dan Sr  </td>
<td> 3 Main St </td>
<td> 1970-04-01 </td>
<td>      2</td>
</tr>
<tr>
<td></td>
<td>  5 </td>
<td> Dan Jr  </td>
<td> 3 Main St </td>
<td> 2001-04-01 </td>
<td>      2</td>
</tr>
<tr>
<td></td>
<td>  6 </td>
<td> Dan 3rd </td>
<td> 3 Main St </td>
<td> 2017-04-01 </td>
<td>      2</td>
</tr>
</tbody>
</table>


<h3><code>JOIN</code> works, too</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>  <span class="n">t1</span><span class="p">.</span><span class="o">*</span><span class="p">,</span>
</span><span class='line'>  <span class="n">t2</span><span class="p">.</span><span class="n">others</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">sample_moves</span> <span class="n">t1</span>
</span><span class='line'><span class="k">JOIN</span> <span class="p">(</span>
</span><span class='line'>  <span class="k">SELECT</span>
</span><span class='line'>    <span class="n">address</span><span class="p">,</span>
</span><span class='line'>    <span class="k">COUNT</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span> <span class="k">as</span> <span class="n">others</span>
</span><span class='line'>  <span class="k">FROM</span> <span class="n">sample_moves</span>
</span><span class='line'>  <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">address</span>
</span><span class='line'>  <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">address</span>
</span><span class='line'><span class="p">)</span> <span class="n">t2</span> <span class="k">USING</span> <span class="p">(</span><span class="n">address</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>And so does <code>JOIN LATERAL</code></h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>  <span class="n">t1</span><span class="p">.</span><span class="o">*</span><span class="p">,</span>
</span><span class='line'>  <span class="n">t2</span><span class="p">.</span><span class="n">others</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">sample_moves</span> <span class="n">t1</span>
</span><span class='line'><span class="k">JOIN</span> <span class="k">LATERAL</span> <span class="p">(</span>
</span><span class='line'>  <span class="k">SELECT</span>
</span><span class='line'>    <span class="n">address</span><span class="p">,</span>
</span><span class='line'>    <span class="k">COUNT</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span> <span class="k">as</span> <span class="n">others</span>
</span><span class='line'>  <span class="k">FROM</span> <span class="n">sample_moves</span> <span class="n">sub</span>
</span><span class='line'>  <span class="k">WHERE</span> <span class="n">sub</span><span class="p">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">t1</span><span class="p">.</span><span class="n">address</span>
</span><span class='line'>  <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">address</span>
</span><span class='line'>  <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">address</span>
</span><span class='line'><span class="p">)</span> <span class="n">t2</span> <span class="k">ON</span> <span class="k">true</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>That&rsquo;s nice, but who moved in first?</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>  <span class="o">*</span><span class="p">,</span>
</span><span class='line'>  <span class="p">(</span>
</span><span class='line'>    <span class="k">SELECT</span>
</span><span class='line'>      <span class="k">COUNT</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">FROM</span> <span class="n">sample_moves</span> <span class="n">t2</span>
</span><span class='line'>    <span class="k">WHERE</span> <span class="n">t2</span><span class="p">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">t1</span><span class="p">.</span><span class="n">address</span>
</span><span class='line'>  <span class="p">)</span> <span class="k">AS</span> <span class="n">others</span><span class="p">,</span>
</span><span class='line'>  <span class="p">(</span>
</span><span class='line'>    <span class="k">SELECT</span>
</span><span class='line'>      <span class="n">name</span>
</span><span class='line'>    <span class="k">FROM</span> <span class="n">sample_moves</span> <span class="n">t3</span>
</span><span class='line'>    <span class="k">WHERE</span> <span class="n">t3</span><span class="p">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">t1</span><span class="p">.</span><span class="n">address</span>
</span><span class='line'>    <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">moved_at</span> <span class="k">ASC</span>
</span><span class='line'>    <span class="k">LIMIT</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">)</span> <span class="k">AS</span> <span class="n">first_person</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">sample_moves</span> <span class="n">t1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Wait I thought this was about windows?!?</h2>

<p>The keyword <code>OVER</code> is the gateway drug into <code>WINDOW</code> functions. Using <code>OVER</code>
with parenthesis is an inline window. The <code>PARTITION BY</code> keywords gives similar
functionality to <code>GROUP BY</code> and <code>JOIN ... USING</code> all in one power packed
statement. It can never reduce the number of records in a result set which is
the same behavior expected of a correlated subquery.</p>

<p><code>PARTITION BY</code> is treated the same as the traditional <code>GROUP BY</code>. The <code>ORDER BY</code>
also has the same behavior as its use in a standard query.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>  <span class="o">*</span><span class="p">,</span>
</span><span class='line'>  <span class="p">(</span><span class="k">count</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="n">PARTITION</span> <span class="k">BY</span> <span class="n">address</span><span class="p">))</span> <span class="o">-</span> <span class="mi">1</span>                      <span class="k">AS</span> <span class="n">others</span><span class="p">,</span>
</span><span class='line'>  <span class="n">first_value</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="n">PARTITION</span> <span class="k">BY</span> <span class="n">address</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">moved_at</span><span class="p">)</span> <span class="k">AS</span> <span class="n">first_moved</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">sample_moves</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Results</h4>

<table>
<thead>
<tr>
<th></th>
<th> id </th>
<th>  name   </th>
<th>  address  </th>
<th>  moved_at  </th>
<th> others </th>
<th> first_moved</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>  1 </td>
<td> Alice   </td>
<td> 1 Main St </td>
<td> 2017-01-01 </td>
<td>      0 </td>
<td> Alice</td>
</tr>
<tr>
<td></td>
<td>  2 </td>
<td> Bob     </td>
<td> 2 Main St </td>
<td> 2017-02-01 </td>
<td>      1 </td>
<td> Bob</td>
</tr>
<tr>
<td></td>
<td>  3 </td>
<td> Cat     </td>
<td> 2 Main St </td>
<td> 2017-03-01 </td>
<td>      1 </td>
<td> Bob</td>
</tr>
<tr>
<td></td>
<td>  4 </td>
<td> Dan Sr  </td>
<td> 3 Main St </td>
<td> 1970-04-01 </td>
<td>      2 </td>
<td> Dan Sr</td>
</tr>
<tr>
<td></td>
<td>  5 </td>
<td> Dan Jr  </td>
<td> 3 Main St </td>
<td> 2001-04-01 </td>
<td>      2 </td>
<td> Dan Sr</td>
</tr>
<tr>
<td></td>
<td>  6 </td>
<td> Dan 3rd </td>
<td> 3 Main St </td>
<td> 2017-04-01 </td>
<td>      2 </td>
<td> Dan Sr</td>
</tr>
</tbody>
</table>


<p>A picture with arrows worth a thousand words:</p>

<p><img class="featured" src="https://ddrscott.github.io/images/window_arrows.png" width="988" height="391" title="'Window SQL with arrows'" ></p>

<h2>That doesn&rsquo;t look very DRY. Finally, a <code>WINDOW</code></h2>

<p>The <code>WINDOW</code> keyword allows us to alias the options of the <code>OVER</code> clause. Namely
the expression <code>(...)</code> between and including the parenthesis.</p>

<p>In the following example we add the use of <code>RANGE</code> to provide additional
direction to the windowing clause.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>  <span class="o">*</span><span class="p">,</span>
</span><span class='line'>  <span class="p">(</span><span class="k">count</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="n">OVER</span> <span class="n">w</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span> <span class="k">AS</span> <span class="n">others</span><span class="p">,</span>
</span><span class='line'>  <span class="n">first_value</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="n">OVER</span> <span class="n">w</span> <span class="k">AS</span> <span class="n">first_moved</span><span class="p">,</span>
</span><span class='line'>  <span class="n">last_value</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>  <span class="n">OVER</span> <span class="n">w</span> <span class="k">AS</span> <span class="n">last_moved</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">sample_moves</span>
</span><span class='line'><span class="n">WINDOW</span> <span class="n">w</span> <span class="k">AS</span> <span class="p">(</span>
</span><span class='line'>  <span class="n">PARTITION</span> <span class="k">BY</span> <span class="n">address</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">moved_at</span>
</span><span class='line'>  <span class="n">RANGE</span> <span class="k">BETWEEN</span> <span class="n">UNBOUNDED</span> <span class="n">PRECEDING</span> <span class="k">AND</span> <span class="n">UNBOUNDED</span> <span class="n">FOLLOWING</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Results</h4>

<table>
<thead>
<tr>
<th></th>
<th> id </th>
<th>  name   </th>
<th>  address  </th>
<th>  moved_at  </th>
<th> others </th>
<th> first_moved </th>
<th> last_moved</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>  1 </td>
<td> Alice   </td>
<td> 1 Main St </td>
<td> 2017-01-01 </td>
<td>      0 </td>
<td> Alice       </td>
<td> Alice</td>
</tr>
<tr>
<td></td>
<td>  2 </td>
<td> Bob     </td>
<td> 2 Main St </td>
<td> 2017-02-01 </td>
<td>      0 </td>
<td> Bob         </td>
<td> Bob</td>
</tr>
<tr>
<td></td>
<td>  3 </td>
<td> Cat     </td>
<td> 2 Main St </td>
<td> 2017-03-01 </td>
<td>      1 </td>
<td> Bob         </td>
<td> Cat</td>
</tr>
<tr>
<td></td>
<td>  4 </td>
<td> Dan Sr  </td>
<td> 3 Main St </td>
<td> 1970-04-01 </td>
<td>      0 </td>
<td> Dan Sr      </td>
<td> Dan Sr</td>
</tr>
<tr>
<td></td>
<td>  5 </td>
<td> Dan Jr  </td>
<td> 3 Main St </td>
<td> 2001-04-01 </td>
<td>      1 </td>
<td> Dan Sr      </td>
<td> Dan Jr</td>
</tr>
<tr>
<td></td>
<td>  6 </td>
<td> Dan 3rd </td>
<td> 3 Main St </td>
<td> 2017-04-01 </td>
<td>      2 </td>
<td> Dan Sr      </td>
<td> Dan 3rd</td>
</tr>
</tbody>
</table>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">-- Previous and Next Record</span>
</span><span class='line'><span class="k">SELECT</span>
</span><span class='line'>  <span class="o">*</span><span class="p">,</span>
</span><span class='line'>  <span class="p">(</span><span class="k">count</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="n">OVER</span> <span class="n">w</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span> <span class="k">AS</span> <span class="n">others</span><span class="p">,</span>
</span><span class='line'>  <span class="n">first_value</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="n">OVER</span> <span class="n">w</span> <span class="k">AS</span> <span class="n">first_moved</span><span class="p">,</span>
</span><span class='line'>  <span class="n">last_value</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>  <span class="n">OVER</span> <span class="n">w</span> <span class="k">AS</span> <span class="n">last_moved</span><span class="p">,</span>
</span><span class='line'>  <span class="n">lag</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">prev_id</span><span class="p">,</span>
</span><span class='line'>  <span class="n">lead</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">next_id</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">sample_moves</span>
</span><span class='line'><span class="n">WINDOW</span> <span class="n">w</span> <span class="k">AS</span> <span class="p">(</span>
</span><span class='line'>  <span class="n">PARTITION</span> <span class="k">BY</span> <span class="n">address</span>
</span><span class='line'>  <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">moved_at</span>
</span><span class='line'>  <span class="n">RANGE</span> <span class="k">BETWEEN</span> <span class="n">UNBOUNDED</span> <span class="n">PRECEDING</span> <span class="k">AND</span> <span class="n">UNBOUNDED</span> <span class="n">FOLLOWING</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">address</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Results</h4>

<table>
<thead>
<tr>
<th></th>
<th>  id </th>
<th>  name   </th>
<th>  address  </th>
<th>  moved_at  </th>
<th> others </th>
<th> first_moved </th>
<th> last_moved </th>
<th> prev_id </th>
<th> next_id</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>   1 </td>
<td> Alice   </td>
<td> 1 Main St </td>
<td> 2017-01-01 </td>
<td>      0 </td>
<td> Alice       </td>
<td> Alice      </td>
<td>         </td>
<td>       2</td>
</tr>
<tr>
<td></td>
<td>   2 </td>
<td> Bob     </td>
<td> 2 Main St </td>
<td> 2017-02-01 </td>
<td>      1 </td>
<td> Bob         </td>
<td> Cat        </td>
<td>       1 </td>
<td>       3</td>
</tr>
<tr>
<td></td>
<td>   3 </td>
<td> Cat     </td>
<td> 2 Main St </td>
<td> 2017-03-01 </td>
<td>      1 </td>
<td> Bob         </td>
<td> Cat        </td>
<td>       2 </td>
<td>       4</td>
</tr>
<tr>
<td></td>
<td>   4 </td>
<td> Dan Sr  </td>
<td> 3 Main St </td>
<td> 1970-04-01 </td>
<td>      2 </td>
<td> Dan Sr      </td>
<td> Dan 3rd    </td>
<td>       3 </td>
<td>       5</td>
</tr>
<tr>
<td></td>
<td>   5 </td>
<td> Dan Jr  </td>
<td> 3 Main St </td>
<td> 2001-04-01 </td>
<td>      2 </td>
<td> Dan Sr      </td>
<td> Dan 3rd    </td>
<td>       4 </td>
<td>       6</td>
</tr>
<tr>
<td></td>
<td>   6 </td>
<td> Dan 3rd </td>
<td> 3 Main St </td>
<td> 2017-04-01 </td>
<td>      2 </td>
<td> Dan Sr      </td>
<td> Dan 3rd    </td>
<td>       5 </td>
<td></td>
</tr>
</tbody>
</table>


<h1>List Window Functions</h1>

<p>Here is a list from <a href="https://www.postgresql.org/docs/9.3/static/functions-window.html">Postgres docs</a>
of all the window functions. In addition to these, <em>any regular aggregate function</em> can be use within a window.</p>

<table>
<thead>
<tr>
<th></th>
<th> Function        </th>
<th> Description </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> row_number()    </td>
<td> number of the current row within its partition, counting from 1 </td>
</tr>
<tr>
<td></td>
<td> rank()          </td>
<td> rank of the current row with gaps; same as row_number of its first peer </td>
</tr>
<tr>
<td></td>
<td> dense_rank()    </td>
<td> rank of the current row without gaps; this function counts peer groups </td>
</tr>
<tr>
<td></td>
<td> percent_rank()  </td>
<td> relative rank of the current row: (rank - 1) / (total rows &ndash; 1) </td>
</tr>
<tr>
<td></td>
<td> cume_dist()     </td>
<td> relative rank of the current row: (number of rows preceding or peer with current row) / (total rows) </td>
</tr>
<tr>
<td></td>
<td> ntile           </td>
<td> integer ranging from 1 to the argument value, dividing the partition as equally as possible </td>
</tr>
<tr>
<td></td>
<td> lag()           </td>
<td> returns value evaluated at the row that is offset rows before the current row within the partition; if there is no such row, instead return default (which must be of the same type as value). Both offset and default are evaluated with respect to the current row. If omitted, offset defaults to 1 and default to null </td>
</tr>
<tr>
<td></td>
<td> lead()          </td>
<td> returns value evaluated at the row that is offset rows after the current row within the partition; if there is no such row, instead return default (which must be of the same type as value). Both offset and default are evaluated with respect to the current row. If omitted, offset defaults to 1 and default to null </td>
</tr>
<tr>
<td></td>
<td> first_value()   </td>
<td> returns value evaluated at the row that is the first row of the window frame </td>
</tr>
<tr>
<td></td>
<td> last_value()    </td>
<td> returns value evaluated at the row that is the last row of the window frame </td>
</tr>
<tr>
<td></td>
<td> nth_value()     </td>
<td> returns value evaluated at the row that is the nth row of the window frame (counting from 1); null if no such row </td>
</tr>
</tbody>
</table>


<h1>References</h1>

<ul>
<li>Postgres Window Tutorial: <a href="https://www.postgresql.org/docs/9.3/static/tutorial-window.html">https://www.postgresql.org/docs/9.3/static/tutorial-window.html</a></li>
<li>Postgres Window Functions: <a href="https://www.postgresql.org/docs/9.3/static/functions-window.html">https://www.postgresql.org/docs/9.3/static/functions-window.html</a></li>
<li>Postgres Window Syntax: <a href="https://www.postgresql.org/docs/9.3/static/sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS">https://www.postgresql.org/docs/9.3/static/sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What the SQL?!? Recursive]]></title>
    <link href="https://ddrscott.github.io/blog/2017/what-the-sql-recursive/"/>
    <updated>2017-03-15T13:30:00-05:00</updated>
    <id>https://ddrscott.github.io/blog/2017/what-the-sql-recursive</id>
    <content type="html"><![CDATA[<p><img class="featured" src="https://ddrscott.github.io/images/i_heart_recursion.png" width="1804" height="1195" title="'What the SQL?!? Recursive'" ></p>

<p>Today&rsquo;s &ldquo;What the SQL?!?&rdquo; features the keyword <code>RECURSIVE</code>. This clause allows
us to elegantly select results from the previous results from the previous results
from the previous results&hellip;</p>

<!-- more -->


<p>Please note, our target database is PostgreSQL. These examples may work with
other databases, but might need some massaging to get them to work properly.
Search online for the specific vendor&rsquo;s documentation if errors pop up.
Try searching for &ldquo;RECURSIVE queries &rdquo;. Not all database vendors
support the keyword <code>RECURSIVE</code>.</p>

<h2>Fibonacci Sequence</h2>

<p>According to <a href="https://en.wikipedia.org/wiki/Fibonacci_number">Wikipedia</a>:</p>

<blockquote><p>In mathematics, the Fibonacci numbers are the numbers in the following integer
sequence, called the Fibonacci sequence, and characterized by the fact that
every number after the first two is the sum of the two preceding ones:</p>

<pre><code>1, 1, 2, 3, 5, 8, 13, 21, 34, 55 ...
</code></pre></blockquote>

<h2>SQL Solution</h2>

<p>Our SQL solution will make use of the <code>RECURSIVE</code> <a href="https://www.postgresql.org/docs/9.3/static/queries-with.html">CTE</a>
keyword.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">WITH</span> <span class="k">RECURSIVE</span> <span class="n">t</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">fi</span><span class="p">,</span> <span class="n">fib</span><span class="p">)</span> <span class="k">AS</span> <span class="p">(</span>
</span><span class='line'>  <span class="k">SELECT</span>
</span><span class='line'>    <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">0</span><span class="p">::</span><span class="nb">NUMERIC</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">1</span><span class="p">::</span><span class="nb">NUMERIC</span>
</span><span class='line'>  <span class="k">UNION</span> <span class="k">ALL</span>
</span><span class='line'>  <span class="k">SELECT</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">fib</span><span class="p">,</span>
</span><span class='line'>    <span class="n">fi</span> <span class="o">+</span> <span class="n">fib</span>
</span><span class='line'>  <span class="k">FROM</span> <span class="n">t</span>
</span><span class='line'>  <span class="k">WHERE</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="k">SELECT</span>
</span><span class='line'>  <span class="n">i</span><span class="p">,</span>
</span><span class='line'>  <span class="n">fib</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">t</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The Ins and Outs</h2>

<p>Here&rsquo;s some inline colorful comments to explain the sections:
<img class="featured" src="https://ddrscott.github.io/images/recursion_sql.png" width="1563" height="998" title="'annotated SQL'" ></p>

<p>Maybe arrows will help a little more with the flow of data:
<img class="featured" src="https://ddrscott.github.io/images/recursive_query.jpg" width="1024" height="705" title="'Data Flow'" ></p>

<h2>Fibonacci Results</h2>

<p>When you run the query, you&rsquo;ll get the following results:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'> <span class="n">i</span>  <span class="o">|</span> <span class="n">fib</span>
</span><span class='line'><span class="c1">----+-----</span>
</span><span class='line'>  <span class="mi">1</span> <span class="o">|</span>   <span class="mi">1</span>
</span><span class='line'>  <span class="mi">2</span> <span class="o">|</span>   <span class="mi">1</span>
</span><span class='line'>  <span class="mi">3</span> <span class="o">|</span>   <span class="mi">2</span>
</span><span class='line'>  <span class="mi">4</span> <span class="o">|</span>   <span class="mi">3</span>
</span><span class='line'>  <span class="mi">5</span> <span class="o">|</span>   <span class="mi">5</span>
</span><span class='line'>  <span class="mi">6</span> <span class="o">|</span>   <span class="mi">8</span>
</span><span class='line'>  <span class="mi">7</span> <span class="o">|</span>  <span class="mi">13</span>
</span><span class='line'>  <span class="mi">8</span> <span class="o">|</span>  <span class="mi">21</span>
</span><span class='line'>  <span class="mi">9</span> <span class="o">|</span>  <span class="mi">34</span>
</span><span class='line'> <span class="mi">10</span> <span class="o">|</span>  <span class="mi">55</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="mi">10</span> <span class="k">rows</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to see the results for a high number, update <code>i &lt; 10</code> to a higher
value. If you go above <code>i &lt; 793</code>, Postgres gives up and returns <code>Nan</code> which means
<code>Not a number</code> which means the computed value is larger than your computer can
handle and still treat like a number. Sorry, get a new computer or work with
numbers less than 166 digits long.</p>

<h1>A Real World Example with Hierarchical Data</h1>

<p>Fibonacci sequence is nice and all, but you have real data concerns. You&rsquo;re
thinking, &ldquo;Show me the DATA!&rdquo;. So here&rsquo;s the data&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">-- Build `sample_people` table</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">sample_people</span> <span class="k">AS</span>
</span><span class='line'>  <span class="k">SELECT</span>
</span><span class='line'>    <span class="n">column1</span><span class="p">::</span><span class="nb">int</span>     <span class="k">AS</span> <span class="n">id</span><span class="p">,</span>
</span><span class='line'>    <span class="n">column2</span><span class="p">::</span><span class="nb">varchar</span> <span class="k">AS</span> <span class="n">name</span><span class="p">,</span>
</span><span class='line'>    <span class="n">column3</span><span class="p">::</span><span class="nb">int</span>     <span class="k">AS</span> <span class="n">parent_id</span>
</span><span class='line'>  <span class="k">FROM</span> <span class="p">(</span>
</span><span class='line'>    <span class="k">VALUES</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;Root&#39;</span> <span class="p">,</span> <span class="k">null</span><span class="p">),</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;Alice&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;Bob&#39;</span>  <span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;Cat&#39;</span>  <span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="s1">&#39;Dan&#39;</span>  <span class="p">,</span> <span class="mi">3</span><span class="p">),</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;Evan&#39;</span> <span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="s1">&#39;Frank&#39;</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'>  <span class="p">)</span> <span class="k">as</span> <span class="n">t</span>
</span><span class='line'>  <span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">sample_people</span><span class="p">;</span>
</span><span class='line'><span class="c1">--  id | name  | parent_id</span>
</span><span class='line'><span class="c1">-- ----+-------+-----------</span>
</span><span class='line'><span class="c1">--   0 | Root  |</span>
</span><span class='line'><span class="c1">--   1 | Alice |         0</span>
</span><span class='line'><span class="c1">--   2 | Bob   |         1</span>
</span><span class='line'><span class="c1">--   3 | Cat   |         1</span>
</span><span class='line'><span class="c1">--   4 | Dan   |         3</span>
</span><span class='line'><span class="c1">--   5 | Evan  |         0</span>
</span><span class='line'><span class="c1">--   6 | Frank |         5</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our <code>sample_people</code> table represents a person by name and that person may have a
parent. The parent of all the parents is <code>Root</code>.</p>

<p>And finally our recursive query to get a nice display of the hierarchy.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">WITH</span> <span class="k">RECURSIVE</span> <span class="n">tree</span> <span class="c1">-- `tree` is the table alias.</span>
</span><span class='line'>                    <span class="c1">-- It must be used as part of the `UNION` statement.</span>
</span><span class='line'>  <span class="k">AS</span> <span class="p">(</span>
</span><span class='line'>  <span class="c1">-- 1) Initialize table with all the top level rows.</span>
</span><span class='line'>  <span class="c1">--    Anything without a parent is a parent. Is that apparent?</span>
</span><span class='line'>  <span class="k">SELECT</span>
</span><span class='line'>    <span class="mi">0</span> <span class="k">AS</span> <span class="k">level</span><span class="p">,</span>        <span class="c1">-- 2) Set the level to 0.</span>
</span><span class='line'>    <span class="n">sample_people</span><span class="p">.</span><span class="o">*</span>    <span class="c1">-- 3) Return the initial row</span>
</span><span class='line'>  <span class="k">FROM</span> <span class="n">sample_people</span>
</span><span class='line'>  <span class="k">WHERE</span> <span class="n">parent_id</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1">-- 4) Top level doesn&#39;t have a parent.</span>
</span><span class='line'>  <span class="k">UNION</span> <span class="k">ALL</span>
</span><span class='line'>  <span class="c1">-- 5) Union all the parents with their children.</span>
</span><span class='line'>  <span class="k">SELECT</span>
</span><span class='line'>    <span class="n">tree</span><span class="p">.</span><span class="k">level</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>    <span class="c1">-- 6) Increment the level every time we loop.</span>
</span><span class='line'>    <span class="n">sample_people</span><span class="p">.</span><span class="o">*</span>    <span class="c1">-- 7) Return the current row - the child row. </span>
</span><span class='line'>  <span class="k">FROM</span> <span class="n">tree</span>    <span class="c1">-- 8) `tree` is populated with the previous results.</span>
</span><span class='line'>               <span class="c1">--    Every loop gets a new record from current result.</span>
</span><span class='line'>  <span class="k">JOIN</span> <span class="n">sample_people</span> <span class="k">ON</span> <span class="n">sample_people</span><span class="p">.</span><span class="n">parent_id</span> <span class="o">=</span> <span class="n">tree</span><span class="p">.</span><span class="n">id</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="k">SELECT</span>
</span><span class='line'>  <span class="n">repeat</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="k">level</span> <span class="o">*</span> <span class="mi">4</span><span class="p">)</span> <span class="o">||</span> <span class="n">name</span> <span class="k">AS</span> <span class="n">display</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">tree</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="k">level</span><span class="p">,</span> <span class="n">name</span>
</span><span class='line'><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--    display</span>
</span><span class='line'><span class="c1">-- -------------</span>
</span><span class='line'><span class="c1">--  Alice</span>
</span><span class='line'><span class="c1">--  Evan</span>
</span><span class='line'><span class="c1">--      Bob</span>
</span><span class='line'><span class="c1">--      Cat</span>
</span><span class='line'><span class="c1">--      Frank</span>
</span><span class='line'><span class="c1">--          Dan</span>
</span><span class='line'><span class="c1">-- (6 rows)</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Bait and Switch</h1>

<p><code>RECURSIVE</code> is not actually recursive. It isn&rsquo;t a function calling itself.
Sorry, not sorry. It&rsquo;s much closer to a <code>while</code> loop. Here&rsquo;s what Postgres has to say about it:</p>

<blockquote><p>Note: Strictly speaking, this process is <strong>iteration</strong> not recursion, but RECURSIVE
is the terminology chosen by the SQL standards committee. [emphasis added]</p></blockquote>

<h1>Closing</h1>

<p>So the next time you try to crawl a hierarchy of data, we hope <code>RECURSIVE</code> comes
to mind. It&rsquo;s a great way to save round trips to the database and query what is
needed based on the data&rsquo;s structure. Think of all the nested subqueries we can
save together!</p>

<h1>References</h1>

<ul>
<li>Postgres WITH Queries: <a href="https://www.postgresql.org/docs/9.3/static/queries-with.html">https://www.postgresql.org/docs/9.3/static/queries-with.html</a></li>
<li>Wikipedia Fibonacci number: <a href="https://en.wikipedia.org/wiki/Fibonacci_number">https://en.wikipedia.org/wiki/Fibonacci_number</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What the SQL?!? Lateral Joins]]></title>
    <link href="https://ddrscott.github.io/blog/2017/what-the-sql-lateral/"/>
    <updated>2017-03-08T12:30:00-06:00</updated>
    <id>https://ddrscott.github.io/blog/2017/what-the-sql-lateral</id>
    <content type="html"><![CDATA[<p><img class="featured" src="https://ddrscott.github.io/images/what_the_sql_lateral.png" title="'What the SQL?!? Lateral Joins'" ></p>

<p>Today&rsquo;s &ldquo;What the SQL?!?&rdquo; features the keyword <code>LATERAL</code>. A prerequisite to
understanding lateral joins are regular joins and subqueries. I&rsquo;ll explain those
briefly to see how <code>LATERAL</code> can simplify a complicated SQL query.</p>

<!-- more -->


<p>Please note, our target database is PostgreSQL. These examples may work with
other databases, but might need some massaging to get them to work properly.
Search online for the specific vendor&rsquo;s documentation if errors pop up.
Try searching for &ldquo;lateral joins &rdquo;. Not all database vendors
support the keyword <code>LATERAL</code>.</p>

<h2>A Problem to Solve</h2>

<p>We have a table with system uptimes. The table records a start timestamp and an
end timestamp. If the service is still running, the end timestamp is left null
because it hasn&rsquo;t ended. We want a query to display an overview this data.</p>

<p>Our final solution will return a row per day and 24 columns containing an uptime
percentage for each hour in the day. It will look like the following.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  cal_date  | hour_0 | hour_1 | hour_2 | hour_3 | ... | hour_21 | hour_22 | hour_23
</span><span class='line'>------------+--------+--------+--------+--------+-----+---------+---------+---------
</span><span class='line'> 2017-03-01 |      0 |   0.75 |   0.25 |      0 | ... |       0 |       0 |       0
</span><span class='line'> 2017-03-02 |      0 |      0 |      0 |      0 | ... |       1 |       1 |       1
</span><span class='line'>(2 rows)</span></code></pre></td></tr></table></div></figure>


<p>Please note we&rsquo;ll use <code>...</code> abbreviate some of the results. All queries are
schema independent and should be copy/paste-able into any <code>psql</code> session.</p>

<h2>Sample Uptime Data</h2>

<p>The sample uptime data is derived from a virtual table built from the following query:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>  <span class="o">*</span>
</span><span class='line'><span class="k">FROM</span> <span class="p">(</span>
</span><span class='line'>  <span class="k">VALUES</span>
</span><span class='line'>  <span class="p">(</span><span class="s1">&#39;2017-03-01 01:15:00-06&#39;</span><span class="p">::</span><span class="k">timestamp</span><span class="p">,</span> <span class="s1">&#39;2017-03-01 02:15:00-06&#39;</span><span class="p">::</span><span class="k">timestamp</span><span class="p">),</span>
</span><span class='line'>  <span class="p">(</span><span class="s1">&#39;2017-03-01 08:00:00-06&#39;</span><span class="p">,</span> <span class="s1">&#39;2017-03-01 20:00:00-06&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="p">(</span><span class="s1">&#39;2017-03-02 19:00:00-06&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span> <span class="k">AS</span> <span class="n">t</span><span class="p">(</span><span class="n">start_ts</span><span class="p">,</span> <span class="n">end_ts</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The data looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  start_ts       |       end_ts
</span><span class='line'>---------------------+---------------------
</span><span class='line'> 2017-03-01 01:15:00 | 2017-03-01 02:15:00
</span><span class='line'> 2017-03-01 08:00:00 | 2017-03-01 20:00:00
</span><span class='line'> 2017-03-02 19:00:00 |
</span><span class='line'>(3 rows)</span></code></pre></td></tr></table></div></figure>


<p>We want to plot the time against a time sliced table representing all the
effective hours in the uptime window. We&rsquo;ll make use of another virtual table to
build up all the time slices:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">start_ts</span><span class="p">,</span>
</span><span class='line'>    <span class="n">start_ts</span> <span class="o">+</span> <span class="nb">interval</span> <span class="s1">&#39;1 hour&#39;</span> <span class="k">AS</span> <span class="n">end_ts</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">generate_series</span><span class="p">(</span><span class="s1">&#39;2017-03-01&#39;</span><span class="p">::</span><span class="nb">date</span><span class="p">,</span>
</span><span class='line'>                     <span class="s1">&#39;2017-03-03&#39;</span><span class="p">::</span><span class="k">timestamp</span> <span class="o">-</span> <span class="nb">interval</span> <span class="s1">&#39;1 hour&#39;</span><span class="p">,</span>
</span><span class='line'>                     <span class="nb">interval</span> <span class="s1">&#39;1 hour&#39;</span>
</span><span class='line'>                    <span class="p">)</span> <span class="k">AS</span> <span class="n">t</span><span class="p">(</span><span class="n">start_ts</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This we make use of PostgreSQL&rsquo;s <a href="https://www.postgresql.org/docs/9.3/static/functions-srf.html">generate_series</a>
to return all the hours between a time range. The data looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  start_ts       |       end_ts
</span><span class='line'>---------------------+---------------------
</span><span class='line'> 2017-03-01 00:00:00 | 2017-03-01 01:00:00
</span><span class='line'> 2017-03-01 01:00:00 | 2017-03-01 02:00:00
</span><span class='line'> 2017-03-01 02:00:00 | 2017-03-01 03:00:00
</span><span class='line'> -- ... many more rows ...
</span><span class='line'> 2017-03-01 03:00:00 | 2017-03-01 04:00:00
</span><span class='line'> 2017-03-02 22:00:00 | 2017-03-02 23:00:00
</span><span class='line'> 2017-03-02 23:00:00 | 2017-03-03 00:00:00
</span><span class='line'>(48 rows)</span></code></pre></td></tr></table></div></figure>


<h2>Left Join</h2>

<p>We use a left join to glue together overlapping time ranges between these two
data sets. We want all the data on the <code>LEFT</code> side in the <code>FROM</code> clause to return
regardless of an uptime record existing within its time slice.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="o">*</span>
</span><span class='line'><span class="k">FROM</span> <span class="p">(</span>
</span><span class='line'>    <span class="c1">-- build virtual table of all hours between</span>
</span><span class='line'>    <span class="c1">-- a date range</span>
</span><span class='line'>    <span class="k">SELECT</span>
</span><span class='line'>      <span class="n">start_ts</span><span class="p">,</span>
</span><span class='line'>      <span class="n">start_ts</span> <span class="o">+</span> <span class="nb">interval</span> <span class="s1">&#39;1 hour&#39;</span> <span class="k">AS</span> <span class="n">end_ts</span>
</span><span class='line'>    <span class="k">FROM</span> <span class="n">generate_series</span><span class="p">(</span>
</span><span class='line'>           <span class="s1">&#39;2017-03-01&#39;</span><span class="p">::</span><span class="nb">date</span><span class="p">,</span>
</span><span class='line'>           <span class="s1">&#39;2017-03-03&#39;</span><span class="p">::</span><span class="k">timestamp</span> <span class="o">-</span> <span class="nb">interval</span> <span class="s1">&#39;1 hour&#39;</span><span class="p">,</span>
</span><span class='line'>           <span class="nb">interval</span> <span class="s1">&#39;1 hour&#39;</span>
</span><span class='line'>    <span class="p">)</span> <span class="k">AS</span> <span class="n">t</span><span class="p">(</span><span class="n">start_ts</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span> <span class="k">AS</span> <span class="n">cal</span>
</span><span class='line'><span class="k">LEFT</span> <span class="k">JOIN</span> <span class="p">(</span>
</span><span class='line'>    <span class="c1">-- build virtual table of uptimes</span>
</span><span class='line'>    <span class="k">SELECT</span> <span class="o">*</span>
</span><span class='line'>    <span class="k">FROM</span> <span class="p">(</span>
</span><span class='line'>      <span class="k">VALUES</span>
</span><span class='line'>      <span class="p">(</span><span class="s1">&#39;2017-03-01 01:15:00-06&#39;</span><span class="p">::</span><span class="k">timestamp</span><span class="p">,</span> <span class="s1">&#39;2017-03-01 02:15:00-06&#39;</span><span class="p">::</span><span class="k">timestamp</span><span class="p">),</span>
</span><span class='line'>      <span class="p">(</span><span class="s1">&#39;2017-03-01 08:00:00-06&#39;</span><span class="p">,</span> <span class="s1">&#39;2017-03-01 20:00:00-06&#39;</span><span class="p">),</span>
</span><span class='line'>      <span class="p">(</span><span class="s1">&#39;2017-03-02 19:00:00-06&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="k">AS</span> <span class="n">t</span><span class="p">(</span><span class="n">start_ts</span><span class="p">,</span> <span class="n">end_ts</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span> <span class="k">AS</span> <span class="n">uptime</span> <span class="k">ON</span> <span class="n">cal</span><span class="p">.</span><span class="n">end_ts</span> <span class="o">&gt;</span> <span class="n">uptime</span><span class="p">.</span><span class="n">start_ts</span> <span class="k">AND</span> <span class="n">cal</span><span class="p">.</span><span class="n">start_ts</span> <span class="o">&lt;=</span> <span class="n">coalesce</span><span class="p">(</span><span class="n">uptime</span><span class="p">.</span><span class="n">end_ts</span><span class="p">,</span> <span class="k">current_timestamp</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result set shows we have some variety in our sample data. With 3 slices
up time and 3 slices of downtime.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  start_ts       |       end_ts        |      start_ts       |       end_ts
</span><span class='line'>---------------------+---------------------+---------------------+---------------------
</span><span class='line'> 2017-03-01 00:00:00 | 2017-03-01 01:00:00 |                     |
</span><span class='line'> 2017-03-01 01:00:00 | 2017-03-01 02:00:00 | 2017-03-01 01:15:00 | 2017-03-01 02:15:00
</span><span class='line'> 2017-03-01 02:00:00 | 2017-03-01 03:00:00 | 2017-03-01 01:15:00 | 2017-03-01 02:15:00
</span><span class='line'> 2017-03-01 03:00:00 | 2017-03-01 04:00:00 |                     |
</span><span class='line'> ...
</span><span class='line'> 2017-03-01 07:00:00 | 2017-03-01 08:00:00 |                     |
</span><span class='line'> 2017-03-01 08:00:00 | 2017-03-01 09:00:00 | 2017-03-01 08:00:00 | 2017-03-01 20:00:00
</span><span class='line'> ...
</span><span class='line'> 2017-03-01 20:00:00 | 2017-03-01 21:00:00 | 2017-03-01 08:00:00 | 2017-03-01 20:00:00
</span><span class='line'> 2017-03-01 21:00:00 | 2017-03-01 22:00:00 |                     |
</span><span class='line'> ...
</span><span class='line'> 2017-03-02 18:00:00 | 2017-03-02 19:00:00 |                     |
</span><span class='line'> 2017-03-02 19:00:00 | 2017-03-02 20:00:00 | 2017-03-02 19:00:00 |
</span><span class='line'> ...
</span><span class='line'> 2017-03-02 23:00:00 | 2017-03-03 00:00:00 | 2017-03-02 19:00:00 |
</span><span class='line'>(48 rows)</span></code></pre></td></tr></table></div></figure>


<p>If we try without the <code>LEFT</code> clause, we&rsquo;ll only see 20 rows containing the up slices.</p>

<h2>Time to compute some timing</h2>

<p>Let&rsquo;s add some times and sensible column names and replace the <code>*</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="c1">-- will use `first_ts` and `last_ts` to calculate uptime duration</span>
</span><span class='line'>    <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">uptime</span><span class="p">.</span><span class="n">start_ts</span> <span class="k">IS</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">THEN</span>
</span><span class='line'>        <span class="n">greatest</span><span class="p">(</span><span class="n">uptime</span><span class="p">.</span><span class="n">start_ts</span><span class="p">,</span> <span class="n">cal</span><span class="p">.</span><span class="n">start_ts</span><span class="p">)</span>
</span><span class='line'>    <span class="k">END</span>                                               <span class="k">AS</span> <span class="n">first_ts</span><span class="p">,</span>
</span><span class='line'>    <span class="n">least</span><span class="p">(</span><span class="n">cal</span><span class="p">.</span><span class="n">end_ts</span><span class="p">,</span> <span class="n">uptime</span><span class="p">.</span><span class="n">end_ts</span><span class="p">)</span>                  <span class="k">AS</span> <span class="n">last_ts</span><span class="p">,</span>
</span><span class='line'>    <span class="n">date_trunc</span><span class="p">(</span><span class="s1">&#39;day&#39;</span><span class="p">,</span> <span class="n">cal</span><span class="p">.</span><span class="n">start_ts</span><span class="p">)::</span><span class="nb">date</span>             <span class="k">AS</span> <span class="n">cal_date</span><span class="p">,</span>
</span><span class='line'>    <span class="k">extract</span><span class="p">(</span><span class="n">hour</span> <span class="k">from</span> <span class="n">cal</span><span class="p">.</span><span class="n">start_ts</span><span class="p">)</span>                   <span class="k">AS</span> <span class="n">cal_hour</span><span class="p">,</span>
</span><span class='line'>    <span class="k">extract</span><span class="p">(</span><span class="n">epoch</span> <span class="k">from</span> <span class="n">age</span><span class="p">(</span><span class="n">cal</span><span class="p">.</span><span class="n">end_ts</span><span class="p">,</span> <span class="n">cal</span><span class="p">.</span><span class="n">start_ts</span><span class="p">))</span> <span class="k">AS</span> <span class="n">cal_seconds</span>
</span><span class='line'><span class="k">FROM</span> <span class="p">(</span>
</span><span class='line'>    <span class="c1">-- build virtual table of all hours between</span>
</span><span class='line'>    <span class="c1">-- a date range</span>
</span><span class='line'>    <span class="k">SELECT</span>
</span><span class='line'>        <span class="n">start_ts</span><span class="p">,</span>
</span><span class='line'>        <span class="n">start_ts</span> <span class="o">+</span> <span class="nb">interval</span> <span class="s1">&#39;1 hour&#39;</span> <span class="k">AS</span> <span class="n">end_ts</span>
</span><span class='line'>        <span class="k">FROM</span> <span class="n">generate_series</span><span class="p">(</span><span class="s1">&#39;2017-03-01&#39;</span><span class="p">::</span><span class="nb">date</span><span class="p">,</span>
</span><span class='line'>                             <span class="s1">&#39;2017-03-03&#39;</span><span class="p">::</span><span class="k">timestamp</span> <span class="o">-</span> <span class="nb">interval</span> <span class="s1">&#39;1 hour&#39;</span><span class="p">,</span>
</span><span class='line'>                             <span class="nb">interval</span> <span class="s1">&#39;1 hour&#39;</span>
</span><span class='line'>        <span class="p">)</span> <span class="k">AS</span> <span class="n">t</span><span class="p">(</span><span class="n">start_ts</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="k">AS</span> <span class="n">cal</span>
</span><span class='line'><span class="k">LEFT</span> <span class="k">JOIN</span> <span class="p">(</span>
</span><span class='line'>    <span class="c1">-- build virtual table of uptimes</span>
</span><span class='line'>    <span class="k">SELECT</span> <span class="o">*</span>
</span><span class='line'>    <span class="k">FROM</span> <span class="p">(</span>
</span><span class='line'>        <span class="k">VALUES</span>
</span><span class='line'>        <span class="p">(</span><span class="s1">&#39;2017-03-01 01:15:00-06&#39;</span><span class="p">::</span><span class="k">timestamp</span><span class="p">,</span> <span class="s1">&#39;2017-03-01 02:15:00-06&#39;</span><span class="p">::</span><span class="k">timestamp</span><span class="p">),</span>
</span><span class='line'>        <span class="p">(</span><span class="s1">&#39;2017-03-01 08:00:00-06&#39;</span><span class="p">,</span> <span class="s1">&#39;2017-03-01 20:00:00-06&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="p">(</span><span class="s1">&#39;2017-03-02 19:00:00-06&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="k">AS</span> <span class="n">t</span><span class="p">(</span><span class="n">start_ts</span><span class="p">,</span> <span class="n">end_ts</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span> <span class="k">AS</span> <span class="n">uptime</span> <span class="k">ON</span> <span class="n">cal</span><span class="p">.</span><span class="n">end_ts</span> <span class="o">&gt;</span> <span class="n">uptime</span><span class="p">.</span><span class="n">start_ts</span> <span class="k">AND</span> <span class="n">cal</span><span class="p">.</span><span class="n">start_ts</span> <span class="o">&lt;=</span> <span class="n">coalesce</span><span class="p">(</span><span class="n">uptime</span><span class="p">.</span><span class="n">end_ts</span><span class="p">,</span> <span class="k">current_timestamp</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>      first_ts       |       last_ts       |  cal_date  | cal_hour | cal_seconds
</span><span class='line'>---------------------+---------------------+------------+----------+-------------
</span><span class='line'>                     | 2017-03-01 01:00:00 | 2017-03-01 |        0 |        3600
</span><span class='line'> 2017-03-01 01:15:00 | 2017-03-01 02:00:00 | 2017-03-01 |        1 |        3600
</span><span class='line'> 2017-03-01 02:00:00 | 2017-03-01 02:15:00 | 2017-03-01 |        2 |        3600
</span><span class='line'>                     | 2017-03-01 04:00:00 | 2017-03-01 |        3 |        3600
</span><span class='line'>                     | 2017-03-01 05:00:00 | 2017-03-01 |        4 |        3600
</span><span class='line'>                     | 2017-03-01 06:00:00 | 2017-03-01 |        5 |        3600
</span><span class='line'>                     | 2017-03-01 07:00:00 | 2017-03-01 |        6 |        3600
</span><span class='line'>                     | 2017-03-01 08:00:00 | 2017-03-01 |        7 |        3600
</span><span class='line'> 2017-03-01 08:00:00 | 2017-03-01 09:00:00 | 2017-03-01 |        8 |        3600
</span><span class='line'> ...
</span><span class='line'> 2017-03-01 20:00:00 | 2017-03-01 20:00:00 | 2017-03-01 |       20 |        3600
</span><span class='line'>                     | 2017-03-01 22:00:00 | 2017-03-01 |       21 |        3600
</span><span class='line'> ... 
</span><span class='line'>                     | 2017-03-02 19:00:00 | 2017-03-02 |       18 |        3600
</span><span class='line'> 2017-03-02 19:00:00 | 2017-03-02 20:00:00 | 2017-03-02 |       19 |        3600
</span><span class='line'> ...
</span><span class='line'> 2017-03-02 23:00:00 | 2017-03-03 00:00:00 | 2017-03-02 |       23 |        3600
</span><span class='line'>(48 rows)</span></code></pre></td></tr></table></div></figure>


<h2>Subquery, Subquery, What&rsquo;s the Worry?</h2>

<p>SQL is all about nested subqueries. It&rsquo;s hard to escape without creating
views, but who has time to lookup that <a href="https://www.postgresql.org/docs/9.3/static/sql-createview.html">syntax</a>
<em>and</em> get their <a href="https://imgflip.com/i/1kzzyn">DBA&rsquo;s</a> permission to run the DDL?!?</p>

<p>Let&rsquo;s add some duration times to the result set. We&rsquo;ll use the traditional sub
query for it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="c1">-- calculate uptime seconds</span>
</span><span class='line'>    <span class="n">coalesce</span><span class="p">(</span>
</span><span class='line'>      <span class="k">extract</span><span class="p">(</span><span class="n">epoch</span> <span class="k">FROM</span> <span class="n">age</span><span class="p">(</span><span class="n">last_ts</span><span class="p">,</span> <span class="n">first_ts</span><span class="p">)),</span>
</span><span class='line'>      <span class="mi">0</span>
</span><span class='line'>    <span class="p">)</span> <span class="k">AS</span> <span class="n">up_seconds</span><span class="p">,</span>
</span><span class='line'>    <span class="o">*</span>
</span><span class='line'><span class="k">FROM</span> <span class="p">(</span>
</span><span class='line'>    <span class="k">SELECT</span>
</span><span class='line'>        <span class="c1">-- will use `first_ts` and `last_ts` to calculate uptime duration</span>
</span><span class='line'>        <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">uptime</span><span class="p">.</span><span class="n">start_ts</span> <span class="k">IS</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">THEN</span>
</span><span class='line'>            <span class="n">greatest</span><span class="p">(</span><span class="n">uptime</span><span class="p">.</span><span class="n">start_ts</span><span class="p">,</span> <span class="n">cal</span><span class="p">.</span><span class="n">start_ts</span><span class="p">)</span>
</span><span class='line'>        <span class="k">END</span>                                               <span class="k">AS</span> <span class="n">first_ts</span><span class="p">,</span>
</span><span class='line'>        <span class="n">least</span><span class="p">(</span><span class="n">cal</span><span class="p">.</span><span class="n">end_ts</span><span class="p">,</span> <span class="n">uptime</span><span class="p">.</span><span class="n">end_ts</span><span class="p">)</span>                  <span class="k">AS</span> <span class="n">last_ts</span><span class="p">,</span>
</span><span class='line'>        <span class="n">date_trunc</span><span class="p">(</span><span class="s1">&#39;day&#39;</span><span class="p">,</span> <span class="n">cal</span><span class="p">.</span><span class="n">start_ts</span><span class="p">)::</span><span class="nb">date</span>             <span class="k">AS</span> <span class="n">cal_date</span><span class="p">,</span>
</span><span class='line'>        <span class="k">extract</span><span class="p">(</span><span class="n">hour</span> <span class="k">from</span> <span class="n">cal</span><span class="p">.</span><span class="n">start_ts</span><span class="p">)</span>                   <span class="k">AS</span> <span class="n">cal_hour</span><span class="p">,</span>
</span><span class='line'>        <span class="k">extract</span><span class="p">(</span><span class="n">epoch</span> <span class="k">from</span> <span class="n">age</span><span class="p">(</span><span class="n">cal</span><span class="p">.</span><span class="n">end_ts</span><span class="p">,</span> <span class="n">cal</span><span class="p">.</span><span class="n">start_ts</span><span class="p">))</span> <span class="k">AS</span> <span class="n">cal_seconds</span>
</span><span class='line'>    <span class="k">FROM</span> <span class="p">(</span>
</span><span class='line'>        <span class="c1">-- build virtual table of all hours between</span>
</span><span class='line'>        <span class="c1">-- a date range</span>
</span><span class='line'>        <span class="k">SELECT</span>
</span><span class='line'>            <span class="n">start_ts</span><span class="p">,</span>
</span><span class='line'>            <span class="n">start_ts</span> <span class="o">+</span> <span class="nb">interval</span> <span class="s1">&#39;1 hour&#39;</span> <span class="k">AS</span> <span class="n">end_ts</span>
</span><span class='line'>            <span class="k">FROM</span> <span class="n">generate_series</span><span class="p">(</span><span class="s1">&#39;2017-03-01&#39;</span><span class="p">::</span><span class="nb">date</span><span class="p">,</span>
</span><span class='line'>                                 <span class="s1">&#39;2017-03-03&#39;</span><span class="p">::</span><span class="k">timestamp</span> <span class="o">-</span> <span class="nb">interval</span> <span class="s1">&#39;1 hour&#39;</span><span class="p">,</span>
</span><span class='line'>                                 <span class="nb">interval</span> <span class="s1">&#39;1 hour&#39;</span>
</span><span class='line'>            <span class="p">)</span> <span class="k">AS</span> <span class="n">t</span><span class="p">(</span><span class="n">start_ts</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="k">AS</span> <span class="n">cal</span>
</span><span class='line'>    <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="p">(</span>
</span><span class='line'>        <span class="c1">-- build virtual table of uptimes</span>
</span><span class='line'>        <span class="k">SELECT</span> <span class="o">*</span>
</span><span class='line'>        <span class="k">FROM</span> <span class="p">(</span>
</span><span class='line'>            <span class="k">VALUES</span>
</span><span class='line'>            <span class="p">(</span><span class="s1">&#39;2017-03-01 01:15:00-06&#39;</span><span class="p">::</span><span class="k">timestamp</span><span class="p">,</span> <span class="s1">&#39;2017-03-01 02:15:00-06&#39;</span><span class="p">::</span><span class="k">timestamp</span><span class="p">),</span>
</span><span class='line'>            <span class="p">(</span><span class="s1">&#39;2017-03-01 08:00:00-06&#39;</span><span class="p">,</span> <span class="s1">&#39;2017-03-01 20:00:00-06&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="p">(</span><span class="s1">&#39;2017-03-02 19:00:00-06&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span> <span class="k">AS</span> <span class="n">t</span><span class="p">(</span><span class="n">start_ts</span><span class="p">,</span> <span class="n">end_ts</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="k">AS</span> <span class="n">uptime</span> <span class="k">ON</span> <span class="n">cal</span><span class="p">.</span><span class="n">end_ts</span> <span class="o">&gt;</span> <span class="n">uptime</span><span class="p">.</span><span class="n">start_ts</span> <span class="k">AND</span> <span class="n">cal</span><span class="p">.</span><span class="n">start_ts</span> <span class="o">&lt;=</span> <span class="n">coalesce</span><span class="p">(</span><span class="n">uptime</span><span class="p">.</span><span class="n">end_ts</span><span class="p">,</span> <span class="k">current_timestamp</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span> <span class="n">t1</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> up_seconds
</span><span class='line'>------------
</span><span class='line'>          0
</span><span class='line'>       2700
</span><span class='line'>        900
</span><span class='line'>          0
</span><span class='line'>          0
</span><span class='line'>...
</span><span class='line'>       3600
</span><span class='line'>(48 rows)</span></code></pre></td></tr></table></div></figure>


<p>Without the subquery we&rsquo;d be getting into even more nested function calls and
would have to double compute values or have no visibility in the intermediate
steps. We could have calculated <code>up_seconds</code> directly in the first query which
introduced <code>first_ts</code> and <code>last_ts</code>. That would look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">coalesce</span><span class="p">(</span>
</span><span class='line'>        <span class="k">extract</span><span class="p">(</span><span class="n">epoch</span> <span class="k">FROM</span>
</span><span class='line'>            <span class="n">age</span><span class="p">(</span>
</span><span class='line'>                <span class="n">least</span><span class="p">(</span><span class="n">cal</span><span class="p">.</span><span class="n">end_ts</span><span class="p">,</span> <span class="n">uptime</span><span class="p">.</span><span class="n">end_ts</span><span class="p">),</span>
</span><span class='line'>                <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">uptime</span><span class="p">.</span><span class="n">start_ts</span> <span class="k">IS</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">THEN</span>
</span><span class='line'>                  <span class="n">greatest</span><span class="p">(</span><span class="n">uptime</span><span class="p">.</span><span class="n">start_ts</span><span class="p">,</span> <span class="n">cal</span><span class="p">.</span><span class="n">start_ts</span><span class="p">)</span>
</span><span class='line'>                <span class="k">END</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">),</span>
</span><span class='line'>        <span class="mi">0</span>
</span><span class='line'>    <span class="p">)</span> <span class="k">AS</span> <span class="n">up_seconds</span>
</span><span class='line'><span class="k">FROM</span> <span class="c1">--- ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s not for the weak stomach, but frankly speaking, neither is the subquery&hellip;</p>

<h2>Enough Nesting, <code>LATERAL</code> join save me!</h2>

<p>Lateral joins can give us the best of both worlds: reduced subquery nesting and
traceable computed values. We&rsquo;re going to move the initial computed values like
<code>first_ts</code> and <code>last_ts</code>, move them to a virtual table then <code>JOIN LATERAL</code> so
they can get their own table alias. We&rsquo;ll do it again for <code>up_seconds</code> and use
<code>first_ts</code> and <code>last_ts</code> from its sibling table.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">t2</span><span class="p">.</span><span class="n">up_seconds</span>
</span><span class='line'><span class="k">FROM</span> <span class="p">(</span>
</span><span class='line'>    <span class="c1">-- build virtual table of all hours between</span>
</span><span class='line'>    <span class="c1">-- a date range</span>
</span><span class='line'>    <span class="k">SELECT</span>
</span><span class='line'>        <span class="n">start_ts</span><span class="p">,</span>
</span><span class='line'>        <span class="n">start_ts</span> <span class="o">+</span> <span class="nb">interval</span> <span class="s1">&#39;1 hour&#39;</span> <span class="k">AS</span> <span class="n">end_ts</span>
</span><span class='line'>        <span class="k">FROM</span> <span class="n">generate_series</span><span class="p">(</span><span class="s1">&#39;2017-03-01&#39;</span><span class="p">::</span><span class="nb">date</span><span class="p">,</span>
</span><span class='line'>                             <span class="s1">&#39;2017-03-03&#39;</span><span class="p">::</span><span class="k">timestamp</span> <span class="o">-</span> <span class="nb">interval</span> <span class="s1">&#39;1 hour&#39;</span><span class="p">,</span>
</span><span class='line'>                             <span class="nb">interval</span> <span class="s1">&#39;1 hour&#39;</span>
</span><span class='line'>        <span class="p">)</span> <span class="k">AS</span> <span class="n">t</span><span class="p">(</span><span class="n">start_ts</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="k">AS</span> <span class="n">cal</span>
</span><span class='line'><span class="k">LEFT</span> <span class="k">JOIN</span> <span class="p">(</span>
</span><span class='line'>    <span class="c1">-- build virtual table of uptimes</span>
</span><span class='line'>    <span class="k">SELECT</span> <span class="o">*</span>
</span><span class='line'>    <span class="k">FROM</span> <span class="p">(</span>
</span><span class='line'>        <span class="k">VALUES</span>
</span><span class='line'>        <span class="p">(</span><span class="s1">&#39;2017-03-01 01:15:00-06&#39;</span><span class="p">::</span><span class="k">timestamp</span><span class="p">,</span> <span class="s1">&#39;2017-03-01 02:15:00-06&#39;</span><span class="p">::</span><span class="k">timestamp</span><span class="p">),</span>
</span><span class='line'>        <span class="p">(</span><span class="s1">&#39;2017-03-01 08:00:00-06&#39;</span><span class="p">,</span> <span class="s1">&#39;2017-03-01 20:00:00-06&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="p">(</span><span class="s1">&#39;2017-03-02 19:00:00-06&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="k">AS</span> <span class="n">t</span><span class="p">(</span><span class="n">start_ts</span><span class="p">,</span> <span class="n">end_ts</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span> <span class="k">AS</span> <span class="n">uptime</span> <span class="k">ON</span> <span class="n">cal</span><span class="p">.</span><span class="n">end_ts</span> <span class="o">&gt;</span> <span class="n">uptime</span><span class="p">.</span><span class="n">start_ts</span> <span class="k">AND</span> <span class="n">cal</span><span class="p">.</span><span class="n">start_ts</span> <span class="o">&lt;=</span> <span class="n">coalesce</span><span class="p">(</span><span class="n">uptime</span><span class="p">.</span><span class="n">end_ts</span><span class="p">,</span> <span class="k">current_timestamp</span><span class="p">)</span>
</span><span class='line'><span class="k">JOIN</span> <span class="k">LATERAL</span> <span class="p">(</span>
</span><span class='line'>  <span class="k">SELECT</span>
</span><span class='line'>      <span class="c1">-- will use `first_ts` and `last_ts` to calculate uptime duration</span>
</span><span class='line'>    <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">uptime</span><span class="p">.</span><span class="n">start_ts</span> <span class="k">IS</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">THEN</span>
</span><span class='line'>        <span class="n">greatest</span><span class="p">(</span><span class="n">uptime</span><span class="p">.</span><span class="n">start_ts</span><span class="p">,</span> <span class="n">cal</span><span class="p">.</span><span class="n">start_ts</span><span class="p">)</span>
</span><span class='line'>    <span class="k">END</span>                                               <span class="k">AS</span> <span class="n">first_ts</span><span class="p">,</span>
</span><span class='line'>    <span class="n">least</span><span class="p">(</span><span class="n">cal</span><span class="p">.</span><span class="n">end_ts</span><span class="p">,</span> <span class="n">uptime</span><span class="p">.</span><span class="n">end_ts</span><span class="p">)</span>                  <span class="k">AS</span> <span class="n">last_ts</span><span class="p">,</span>
</span><span class='line'>    <span class="n">date_trunc</span><span class="p">(</span><span class="s1">&#39;day&#39;</span><span class="p">,</span> <span class="n">cal</span><span class="p">.</span><span class="n">start_ts</span><span class="p">)::</span><span class="nb">date</span>             <span class="k">AS</span> <span class="n">cal_date</span><span class="p">,</span>
</span><span class='line'>    <span class="k">extract</span><span class="p">(</span><span class="n">hour</span> <span class="k">from</span> <span class="n">cal</span><span class="p">.</span><span class="n">start_ts</span><span class="p">)</span>                   <span class="k">AS</span> <span class="n">cal_hour</span><span class="p">,</span>
</span><span class='line'>    <span class="k">extract</span><span class="p">(</span><span class="n">epoch</span> <span class="k">from</span> <span class="n">age</span><span class="p">(</span><span class="n">cal</span><span class="p">.</span><span class="n">end_ts</span><span class="p">,</span> <span class="n">cal</span><span class="p">.</span><span class="n">start_ts</span><span class="p">))</span> <span class="k">AS</span> <span class="n">cal_seconds</span>
</span><span class='line'><span class="p">)</span> <span class="n">t1</span> <span class="k">ON</span> <span class="k">true</span>
</span><span class='line'><span class="k">JOIN</span> <span class="k">LATERAL</span> <span class="p">(</span>
</span><span class='line'>  <span class="c1">-- calculate uptime seconds for the time slice</span>
</span><span class='line'>  <span class="k">SELECT</span>
</span><span class='line'>    <span class="n">coalesce</span><span class="p">(</span>
</span><span class='line'>        <span class="k">extract</span><span class="p">(</span><span class="n">epoch</span> <span class="k">FROM</span> <span class="n">age</span><span class="p">(</span><span class="n">last_ts</span><span class="p">,</span> <span class="n">first_ts</span><span class="p">)),</span>
</span><span class='line'>        <span class="mi">0</span>
</span><span class='line'>    <span class="p">)</span> <span class="k">AS</span> <span class="n">up_seconds</span>
</span><span class='line'><span class="p">)</span> <span class="n">t2</span> <span class="k">ON</span> <span class="k">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gives us the same results but without the deep nesting.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> up_seconds
</span><span class='line'>------------
</span><span class='line'>          0
</span><span class='line'>       2700
</span><span class='line'>        900
</span><span class='line'>          0
</span><span class='line'>          0
</span><span class='line'>       3600
</span><span class='line'>...
</span><span class='line'>       3600
</span><span class='line'>(48 rows)</span></code></pre></td></tr></table></div></figure>


<p>What&rsquo;s great about this strategy is we can quickly choose which columns to see
as we build up the query.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>  <span class="n">t2</span><span class="p">.</span><span class="n">up_seconds</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- or --</span>
</span><span class='line'>
</span><span class='line'><span class="k">SELECT</span>
</span><span class='line'>  <span class="n">t2</span><span class="p">.</span><span class="o">*</span><span class="p">,</span>
</span><span class='line'>  <span class="n">t1</span><span class="p">.</span><span class="o">*</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s build up the final calculation using the same strategy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>  <span class="n">t2</span><span class="p">.</span><span class="o">*</span><span class="p">,</span>
</span><span class='line'>  <span class="n">t3</span><span class="p">.</span><span class="o">*</span>
</span><span class='line'><span class="k">FROM</span> <span class="p">...</span>
</span><span class='line'><span class="k">JOIN</span> <span class="k">LATERAL</span> <span class="p">(</span>
</span><span class='line'>  <span class="c1">-- calculate percentage between uptime seconds and available seconds</span>
</span><span class='line'>  <span class="c1">-- within the time slice</span>
</span><span class='line'>  <span class="k">SELECT</span>
</span><span class='line'>    <span class="n">up_seconds</span> <span class="o">/</span> <span class="n">cal_seconds</span> <span class="k">AS</span> <span class="n">up_pct</span>
</span><span class='line'><span class="p">)</span> <span class="n">t3</span> <span class="k">ON</span> <span class="k">true</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> up_seconds | up_pct
</span><span class='line'>------------+--------
</span><span class='line'>          0 |      0
</span><span class='line'>       2700 |   0.75
</span><span class='line'>        900 |   0.25
</span><span class='line'>          0 |      0
</span><span class='line'>...
</span><span class='line'>       3600 |      1
</span><span class='line'>(48 rows)</span></code></pre></td></tr></table></div></figure>


<h2>Plot the Hours</h2>

<p>Now we have all the computed data we need. Let&rsquo;s plot it as a cross tab (but not
actually use <a href="https://www.postgresql.org/docs/9.3/static/tablefunc.html"><code>crosstab</code></a>)</p>

<p>We&rsquo;ll need to consolidate the long list of data by <code>cal_date</code> and pivot the
<code>cal_hour</code> as a column and <code>up_pct</code> as a value. In case of overlapping uptimes
we&rsquo;ll be pessimists and choose the lowest or <code>min</code> uptime percentage.</p>

<p>The final query looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">cal_date</span><span class="p">,</span>
</span><span class='line'>    <span class="k">max</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">cal_hour</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">THEN</span> <span class="n">up_pct</span>  <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">hour_0</span><span class="p">,</span>
</span><span class='line'>    <span class="k">max</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">cal_hour</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">THEN</span> <span class="n">up_pct</span>  <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">hour_1</span><span class="p">,</span>
</span><span class='line'>    <span class="k">max</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">cal_hour</span> <span class="o">=</span> <span class="mi">2</span> <span class="k">THEN</span> <span class="n">up_pct</span>  <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">hour_2</span><span class="p">,</span>
</span><span class='line'>    <span class="k">max</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">cal_hour</span> <span class="o">=</span> <span class="mi">3</span> <span class="k">THEN</span> <span class="n">up_pct</span>  <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">hour_3</span><span class="p">,</span>
</span><span class='line'>    <span class="k">max</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">cal_hour</span> <span class="o">=</span> <span class="mi">4</span> <span class="k">THEN</span> <span class="n">up_pct</span>  <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">hour_4</span><span class="p">,</span>
</span><span class='line'>    <span class="k">max</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">cal_hour</span> <span class="o">=</span> <span class="mi">5</span> <span class="k">THEN</span> <span class="n">up_pct</span>  <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">hour_5</span><span class="p">,</span>
</span><span class='line'>    <span class="k">max</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">cal_hour</span> <span class="o">=</span> <span class="mi">6</span> <span class="k">THEN</span> <span class="n">up_pct</span>  <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">hour_6</span><span class="p">,</span>
</span><span class='line'>    <span class="k">max</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">cal_hour</span> <span class="o">=</span> <span class="mi">7</span> <span class="k">THEN</span> <span class="n">up_pct</span>  <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">hour_7</span><span class="p">,</span>
</span><span class='line'>    <span class="k">max</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">cal_hour</span> <span class="o">=</span> <span class="mi">8</span> <span class="k">THEN</span> <span class="n">up_pct</span>  <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">hour_8</span><span class="p">,</span>
</span><span class='line'>    <span class="k">max</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">cal_hour</span> <span class="o">=</span> <span class="mi">9</span> <span class="k">THEN</span> <span class="n">up_pct</span>  <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">hour_9</span><span class="p">,</span>
</span><span class='line'>    <span class="k">max</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">cal_hour</span> <span class="o">=</span> <span class="mi">10</span> <span class="k">THEN</span> <span class="n">up_pct</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">hour_10</span><span class="p">,</span>
</span><span class='line'>    <span class="k">max</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">cal_hour</span> <span class="o">=</span> <span class="mi">11</span> <span class="k">THEN</span> <span class="n">up_pct</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">hour_11</span><span class="p">,</span>
</span><span class='line'>    <span class="k">max</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">cal_hour</span> <span class="o">=</span> <span class="mi">12</span> <span class="k">THEN</span> <span class="n">up_pct</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">hour_12</span><span class="p">,</span>
</span><span class='line'>    <span class="k">max</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">cal_hour</span> <span class="o">=</span> <span class="mi">13</span> <span class="k">THEN</span> <span class="n">up_pct</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">hour_13</span><span class="p">,</span>
</span><span class='line'>    <span class="k">max</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">cal_hour</span> <span class="o">=</span> <span class="mi">14</span> <span class="k">THEN</span> <span class="n">up_pct</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">hour_14</span><span class="p">,</span>
</span><span class='line'>    <span class="k">max</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">cal_hour</span> <span class="o">=</span> <span class="mi">15</span> <span class="k">THEN</span> <span class="n">up_pct</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">hour_15</span><span class="p">,</span>
</span><span class='line'>    <span class="k">max</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">cal_hour</span> <span class="o">=</span> <span class="mi">16</span> <span class="k">THEN</span> <span class="n">up_pct</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">hour_16</span><span class="p">,</span>
</span><span class='line'>    <span class="k">max</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">cal_hour</span> <span class="o">=</span> <span class="mi">17</span> <span class="k">THEN</span> <span class="n">up_pct</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">hour_17</span><span class="p">,</span>
</span><span class='line'>    <span class="k">max</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">cal_hour</span> <span class="o">=</span> <span class="mi">18</span> <span class="k">THEN</span> <span class="n">up_pct</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">hour_18</span><span class="p">,</span>
</span><span class='line'>    <span class="k">max</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">cal_hour</span> <span class="o">=</span> <span class="mi">19</span> <span class="k">THEN</span> <span class="n">up_pct</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">hour_19</span><span class="p">,</span>
</span><span class='line'>    <span class="k">max</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">cal_hour</span> <span class="o">=</span> <span class="mi">20</span> <span class="k">THEN</span> <span class="n">up_pct</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">hour_20</span><span class="p">,</span>
</span><span class='line'>    <span class="k">max</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">cal_hour</span> <span class="o">=</span> <span class="mi">21</span> <span class="k">THEN</span> <span class="n">up_pct</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">hour_21</span><span class="p">,</span>
</span><span class='line'>    <span class="k">max</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">cal_hour</span> <span class="o">=</span> <span class="mi">22</span> <span class="k">THEN</span> <span class="n">up_pct</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">hour_22</span><span class="p">,</span>
</span><span class='line'>    <span class="k">max</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">cal_hour</span> <span class="o">=</span> <span class="mi">23</span> <span class="k">THEN</span> <span class="n">up_pct</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">hour_23</span>
</span><span class='line'><span class="k">FROM</span> <span class="p">(</span>
</span><span class='line'>    <span class="c1">-- build virtual table of all hours between</span>
</span><span class='line'>    <span class="c1">-- a date range</span>
</span><span class='line'>    <span class="k">SELECT</span>
</span><span class='line'>        <span class="n">start_ts</span><span class="p">,</span>
</span><span class='line'>        <span class="n">start_ts</span> <span class="o">+</span> <span class="nb">interval</span> <span class="s1">&#39;1 hour&#39;</span> <span class="k">AS</span> <span class="n">end_ts</span>
</span><span class='line'>        <span class="k">FROM</span> <span class="n">generate_series</span><span class="p">(</span><span class="s1">&#39;2017-03-01&#39;</span><span class="p">::</span><span class="nb">date</span><span class="p">,</span>
</span><span class='line'>                             <span class="s1">&#39;2017-03-03&#39;</span><span class="p">::</span><span class="k">timestamp</span> <span class="o">-</span> <span class="nb">interval</span> <span class="s1">&#39;1 hour&#39;</span><span class="p">,</span>
</span><span class='line'>                             <span class="nb">interval</span> <span class="s1">&#39;1 hour&#39;</span>
</span><span class='line'>        <span class="p">)</span> <span class="k">AS</span> <span class="n">t</span><span class="p">(</span><span class="n">start_ts</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="k">AS</span> <span class="n">cal</span>
</span><span class='line'><span class="k">LEFT</span> <span class="k">JOIN</span> <span class="p">(</span>
</span><span class='line'>    <span class="c1">-- build virtual table of uptimes</span>
</span><span class='line'>    <span class="k">SELECT</span> <span class="o">*</span>
</span><span class='line'>    <span class="k">FROM</span> <span class="p">(</span>
</span><span class='line'>        <span class="k">VALUES</span>
</span><span class='line'>        <span class="p">(</span><span class="s1">&#39;2017-03-01 01:15:00-06&#39;</span><span class="p">::</span><span class="k">timestamp</span><span class="p">,</span> <span class="s1">&#39;2017-03-01 02:15:00-06&#39;</span><span class="p">::</span><span class="k">timestamp</span><span class="p">),</span>
</span><span class='line'>        <span class="p">(</span><span class="s1">&#39;2017-03-01 08:00:00-06&#39;</span><span class="p">,</span> <span class="s1">&#39;2017-03-01 20:00:00-06&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="p">(</span><span class="s1">&#39;2017-03-02 19:00:00-06&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="k">AS</span> <span class="n">t</span><span class="p">(</span><span class="n">start_ts</span><span class="p">,</span> <span class="n">end_ts</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span> <span class="k">AS</span> <span class="n">uptime</span> <span class="k">ON</span> <span class="n">cal</span><span class="p">.</span><span class="n">end_ts</span> <span class="o">&gt;</span> <span class="n">uptime</span><span class="p">.</span><span class="n">start_ts</span> <span class="k">AND</span> <span class="n">cal</span><span class="p">.</span><span class="n">start_ts</span> <span class="o">&lt;=</span> <span class="n">coalesce</span><span class="p">(</span><span class="n">uptime</span><span class="p">.</span><span class="n">end_ts</span><span class="p">,</span> <span class="k">current_timestamp</span><span class="p">)</span>
</span><span class='line'><span class="k">JOIN</span> <span class="k">LATERAL</span> <span class="p">(</span>
</span><span class='line'>  <span class="k">SELECT</span>
</span><span class='line'>      <span class="c1">-- will use `first_ts` and `last_ts` to calculate uptime duration</span>
</span><span class='line'>    <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">uptime</span><span class="p">.</span><span class="n">start_ts</span> <span class="k">IS</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">THEN</span>
</span><span class='line'>        <span class="n">greatest</span><span class="p">(</span><span class="n">uptime</span><span class="p">.</span><span class="n">start_ts</span><span class="p">,</span> <span class="n">cal</span><span class="p">.</span><span class="n">start_ts</span><span class="p">)</span>
</span><span class='line'>    <span class="k">END</span>                                               <span class="k">AS</span> <span class="n">first_ts</span><span class="p">,</span>
</span><span class='line'>    <span class="n">least</span><span class="p">(</span><span class="n">cal</span><span class="p">.</span><span class="n">end_ts</span><span class="p">,</span> <span class="n">uptime</span><span class="p">.</span><span class="n">end_ts</span><span class="p">)</span>                  <span class="k">AS</span> <span class="n">last_ts</span><span class="p">,</span>
</span><span class='line'>    <span class="n">date_trunc</span><span class="p">(</span><span class="s1">&#39;day&#39;</span><span class="p">,</span> <span class="n">cal</span><span class="p">.</span><span class="n">start_ts</span><span class="p">)::</span><span class="nb">date</span>             <span class="k">AS</span> <span class="n">cal_date</span><span class="p">,</span>
</span><span class='line'>    <span class="k">extract</span><span class="p">(</span><span class="n">hour</span> <span class="k">from</span> <span class="n">cal</span><span class="p">.</span><span class="n">start_ts</span><span class="p">)</span>                   <span class="k">AS</span> <span class="n">cal_hour</span><span class="p">,</span>
</span><span class='line'>    <span class="k">extract</span><span class="p">(</span><span class="n">epoch</span> <span class="k">from</span> <span class="n">age</span><span class="p">(</span><span class="n">cal</span><span class="p">.</span><span class="n">end_ts</span><span class="p">,</span> <span class="n">cal</span><span class="p">.</span><span class="n">start_ts</span><span class="p">))</span> <span class="k">AS</span> <span class="n">cal_seconds</span>
</span><span class='line'><span class="p">)</span> <span class="n">t1</span> <span class="k">ON</span> <span class="k">true</span>
</span><span class='line'><span class="k">JOIN</span> <span class="k">LATERAL</span> <span class="p">(</span>
</span><span class='line'>  <span class="k">SELECT</span>
</span><span class='line'>    <span class="n">coalesce</span><span class="p">(</span>
</span><span class='line'>        <span class="k">extract</span><span class="p">(</span><span class="n">epoch</span> <span class="k">FROM</span> <span class="n">age</span><span class="p">(</span><span class="n">last_ts</span><span class="p">,</span> <span class="n">first_ts</span><span class="p">)),</span>
</span><span class='line'>        <span class="mi">0</span>
</span><span class='line'>    <span class="p">)</span> <span class="k">AS</span> <span class="n">up_seconds</span>
</span><span class='line'><span class="p">)</span> <span class="n">t2</span> <span class="k">ON</span> <span class="k">true</span>
</span><span class='line'><span class="k">JOIN</span> <span class="k">LATERAL</span> <span class="p">(</span>
</span><span class='line'>  <span class="c1">-- calculate percentage between uptime seconds and available seconds</span>
</span><span class='line'>  <span class="c1">-- within the time slice</span>
</span><span class='line'>  <span class="k">SELECT</span>
</span><span class='line'>  <span class="n">up_seconds</span> <span class="o">/</span> <span class="n">cal_seconds</span> <span class="k">AS</span> <span class="n">up_pct</span>
</span><span class='line'><span class="p">)</span> <span class="n">t3</span> <span class="k">ON</span> <span class="k">true</span>
</span><span class='line'><span class="k">GROUP</span> <span class="k">BY</span> <span class="n">cal_date</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  cal_date  | hour_0 | hour_1 | hour_2 | hour_3 | ... | hour_23
</span><span class='line'>------------+--------+--------+--------+--------+ ... +---------
</span><span class='line'> 2017-03-01 |      0 |   0.75 |   0.25 |      0 | ... |       0
</span><span class='line'> 2017-03-02 |      0 |      0 |      0 |      0 | ... |       1
</span><span class='line'>(2 rows)</span></code></pre></td></tr></table></div></figure>


<h1>More than CTE and Cross Join</h1>

<p>This example only scratches the surface of <code>LATERAL</code>s super powers. On the
surface <code>LATERAL</code> can do things <code>CTE</code>, cross join, and <code>WINDOW</code> can do.
PostgreSQL describe <code>LATERAL</code> as:</p>

<blockquote><p>Subqueries appearing in FROM can be preceded by the key word LATERAL.
This allows them to reference columns provided by preceding FROM items.
(Without LATERAL, each subquery is evaluated independently and so cannot
cross-reference any other FROM item.)</p></blockquote>

<p>TL;DR &ndash; <code>LATERAL</code> allows subqueries to reference earlier tables.</p>

<h1>References</h1>

<ul>
<li><a href="https://www.postgresql.org/docs/9.6/static/queries-table-expressions.html#QUERIES-LATERAL">Postgres Lateral Joins</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Get Better At Anything]]></title>
    <link href="https://ddrscott.github.io/blog/2017/how-to-get-better-at-anything/"/>
    <updated>2017-02-07T05:30:06-06:00</updated>
    <id>https://ddrscott.github.io/blog/2017/how-to-get-better-at-anything</id>
    <content type="html"><![CDATA[<p><img class="featured" src="https://ddrscott.github.io/images/better.jpg" width="600" height="445" title="'Better Title'" ></p>

<!-- more -->


<h2>RTFM</h2>

<p><img src="https://ddrscott.github.io/images/rtfm-wtfm.jpg" width="400" height="387" title="'RTFM WTFM'" ></p>

<ul>
<li>WTFM, Write The Flip&#8217;n Manual</li>
<li>Do a lightning talk about it :)</li>
</ul>


<h2>Make it Fun</h2>

<p><img src="https://ddrscott.github.io/images/koala_trophy.jpg" title="'Surprised Koala Trophy'" ></p>

<ul>
<li>Gamification</li>
<li>Trophy anyone?</li>
<li>If it can&rsquo;t be made fun, make it fun.</li>
</ul>


<h2>Practice</h2>

<p><img src="https://ddrscott.github.io/images/ive_practiced.jpg" title="&#34;I've practiced a lot&#34;" alt="&#34;I've practiced a lot&#34;"></p>

<ul>
<li>Slowly with intent</li>
<li>Pressure cycles: none, some, actual, intolerable.</li>
<li>The practice of practice deserves its own talk.</li>
</ul>


<h2>Better not good</h2>

<p><img src="https://ddrscott.github.io/images/good_to_better.jpg" title="&#34;Good to Better Chart&#34;" alt="&#34;Good to Better Chart&#34;"></p>

<ul>
<li>Good is the killer of better.</li>
<li>People tend to stop because good is unreachable.</li>
<li>People tend to stop after they&rsquo;re good enough.</li>
<li>If we aim to get better, we&rsquo;ll eventually be better than good.</li>
<li>Progressive goals. OMG! I forgot goal setting!</li>
</ul>


<h2>Learn, don&rsquo;t Memorize</h2>

<p><img src="https://ddrscott.github.io/images/one_does_not_memorize_pi.jpg" title="&#34;One does not simply memorize PI&#34;" alt="&#34;One does not simply memorize PI&#34;"></p>

<ul>
<li>Learning is understanding</li>
<li>Understanding is connecting the new thing to an old thing.</li>
<li>Computers memorize. You&rsquo;re not a computer.</li>
</ul>


<h2>Learn with others</h2>

<p><img src="https://ddrscott.github.io/images/google_hug.jpg" title="&#34;Google Hug&#34;" alt="&#34;Google Hug&#34;"></p>

<ul>
<li>With the Internet you&rsquo;re never alone and always alone.</li>
<li>Actually talk with people!</li>
</ul>


<h2>Cheat</h2>

<p><img src="https://ddrscott.github.io/images/inspect_source.jpg" title="&#34;One does not simply memorize PI&#34;" alt="&#34;One does not simply memorize PI&#34;"></p>

<ul>
<li>If you&rsquo;re not cheating, you&rsquo;re not trying.</li>
<li>Reverse engineer the cheat, don&rsquo;t actually cheat!</li>
</ul>


<h1>How I got better at Vim</h1>

<ul>
<li><strong>RTFM</strong> &ndash; <code>:help</code></li>
<li><strong>WTFM</strong> &ndash; Blogging, figure out other people&rsquo;s problems :/</li>
<li><strong>Practice</strong> &ndash; Wrote stuff that wasn&rsquo;t needed immediately, my own notes.</li>
<li><strong>Don&rsquo;t Memorize</strong> &ndash; Vim has grammar like English. Oooh&hellip; Reconnection!</li>
<li><strong>Learn with Others</strong> &ndash; We have vim users, teach them (but don&rsquo;t let them know you&rsquo;re only one step ahead)</li>
<li><strong>Cheat</strong> &ndash; Look at other&rsquo;s Vimscript to figure out that cool thing they did.</li>
</ul>


<h2>What do you want to get better at next?!?</h2>

<ul>
<li>lightning talks?</li>
<li>Shuffling cards? (@devin)</li>
<li><a href="http://www.postgresql.org/docs/9.6/static/index.html">SQL?</a></li>
<li><a href="https://www.amazon.com/Drawing-Right-Side-Brain-Definitive/dp/1585429201">Drawing?</a></li>
<li><a href="http://www.pianofundamentals.com/book/en/chapter_1">Piano?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ANSI Codes with Character]]></title>
    <link href="https://ddrscott.github.io/blog/2016/ansi-codes-with-character/"/>
    <updated>2016-07-26T11:11:51-05:00</updated>
    <id>https://ddrscott.github.io/blog/2016/ansi-codes-with-character</id>
    <content type="html"><![CDATA[<p>This was a lightening talk given to the office about ANSI Escape Codes. Most of
the time, all 5 minutes of it, was spent explaining the code snippets.</p>

<!-- more -->


<p><a href="https://en.wikipedia.org/wiki/ANSI_escape_code">Wiki about ANSI Codes</a></p>

<h2>What is an ANSI code?</h2>

<p>ANSI Escape Codes are a nearly universal means of embedding display options in
computer terminals.</p>

<p><code>\e[</code> is how to tell the terminal we&rsquo;re giving it a command instead just
outputting text.</p>

<p>What does that mean?!? Let the examples do the talking.</p>

<h2>Color Examples</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> -e <span class="s2">&quot;\e[2J\e[32m It&#39;s not easy being green \e[0m&quot;</span>
</span><span class='line'><span class="nb">echo</span> -e <span class="s2">&quot;\e[2J\e[31m Apples are red  \e[0m&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">30</span><span class="o">.</span><span class="n">.</span><span class="mi">37</span><span class="p">)</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="nb">puts</span> <span class="s2">&quot;i: </span><span class="se">\e</span><span class="s2">[</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">m </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2"> </span><span class="se">\e</span><span class="s2">[0m&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Position Examples</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">x</span><span class="o">=</span><span class="sb">`tput cols`</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'><span class="n">y</span><span class="o">=</span><span class="sb">`tput lines`</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'><span class="kp">loop</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">print</span> <span class="s2">&quot;</span><span class="se">\e</span><span class="s2">[s&quot;</span> <span class="c1"># Save current cursor position</span>
</span><span class='line'>  <span class="nb">print</span> <span class="s2">&quot;</span><span class="se">\e</span><span class="s2">[</span><span class="si">#{</span><span class="nb">rand</span><span class="p">(</span><span class="n">y</span><span class="p">)</span><span class="si">}</span><span class="s2">;</span><span class="si">#{</span><span class="nb">rand</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="si">}</span><span class="s2">H&quot;</span>  <span class="c1"># move to row/column</span>
</span><span class='line'>  <span class="nb">print</span> <span class="s2">&quot;💩&quot;</span>    <span class="c1"># print POOP!</span>
</span><span class='line'>  <span class="nb">print</span> <span class="s2">&quot;</span><span class="se">\e</span><span class="s2">[u&quot;</span> <span class="c1"># restore position</span>
</span><span class='line'>  <span class="nb">sleep</span><span class="p">(</span><span class="nb">rand</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Ruby oneliner troll</span>
</span><span class='line'>ruby -e <span class="s1">&#39;x=`tput cols`.to_i; y=`tput lines`.to_i; loop {print &quot;\e[s\e[#{rand(y)};#{rand(x)}H💩\e[u&quot;; sleep(rand)}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ANSI-nine Examples</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Poop-field</span>
</span><span class='line'>curl -s https://raw.githubusercontent.com/ddrscott/ansinine/master/stars <span class="p">|</span> ruby
</span><span class='line'>
</span><span class='line'><span class="c"># Smoke</span>
</span><span class='line'>curl -s https://raw.githubusercontent.com/ddrscott/ansinine/master/fire.rb <span class="p">|</span> ruby
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Photography Refactored]]></title>
    <link href="https://ddrscott.github.io/blog/2016/photography-lightening-talk/"/>
    <updated>2016-07-11T09:00:00-05:00</updated>
    <id>https://ddrscott.github.io/blog/2016/photography-lightening-talk</id>
    <content type="html"><![CDATA[<p><img class="featured" src="https://ddrscott.github.io/images/photography-lightening-talk.png" width="527" height="494" title="'Photography Lightening Talk'" ></p>

<p>Someone convinced me to do a lightening talk about photography. Here&rsquo;s the slide deck.</p>

<!-- more -->


<div class="responsive-wrapper">
<iframe src="https://docs.google.com/presentation/d/1Fc0FhDv9Qhtx1704oKA3qWb3-OFsobk-ppGHU2LKolg/embed?start=false&loop=false&delayms=3000" frameborder="0" width="1440" height="839" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PSA: Vim Modulo '%' Returns Negative Numbers!]]></title>
    <link href="https://ddrscott.github.io/blog/2016/negative-modulo/"/>
    <updated>2016-05-28T09:00:00-05:00</updated>
    <id>https://ddrscott.github.io/blog/2016/negative-modulo</id>
    <content type="html"><![CDATA[<p><img class="featured" src="https://ddrscott.github.io/images/einstein_mod.jpg" width="500" height="375" title="'-10 % 3 != -1'" ></p>

<p>Surprise! Vim has the same modulo bug as Javascript. Some say it&rsquo;s not a bug,
but if Ruby and Google Calculator is wrong, I don&rsquo;t want to be right.</p>

<!-- more -->


<ul>
<li>Vim, <code>:echo -10 % 3</code> returns <code>-1</code></li>
<li>Javascript <code>-10 % 3</code> returns <code>-1</code></li>
<li>Ruby/IRB, <code>-10 % 3</code> returns <code>2</code> <strong>&mdash; my expectation is here</strong></li>
</ul>


<h2>Solution</h2>

<p>Add this function some where in your Vimscript and throw away <code>%</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; ((n % m) + m) % m` or `((-10 % 3) + 3) % 3` returns `2`</span>
</span><span class='line'><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:<span class="k">mod</span><span class="p">(</span><span class="k">n</span><span class="p">,</span><span class="k">m</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">((</span><span class="k">a</span>:<span class="k">n</span> % <span class="k">a</span>:<span class="k">m</span><span class="p">)</span> <span class="p">+</span> <span class="k">a</span>:<span class="k">m</span><span class="p">)</span> % <span class="k">a</span>:<span class="k">m</span>
</span><span class='line'><span class="k">endfunction</span>
</span></code></pre></td></tr></table></div></figure>


<p>I hope this saves someone some time somewhere out there. It&rsquo;s an hour I&rsquo;ll never
get back, but happy to give back.</p>

<p><strong>References</strong></p>

<ul>
<li><a href="https://www.google.com/#q=-10+%25+3">https://www.google.com/#q=-10+%25+3</a></li>
<li><a href="http://vimdoc.sourceforge.net/htmldoc/eval.html#expr6">http://vimdoc.sourceforge.net/htmldoc/eval.html#expr6</a></li>
<li><a href="http://math.stackexchange.com/questions/519845/modulo-of-a-negative-number/519856">http://math.stackexchange.com/questions/519845/modulo-of-a-negative-number/519856</a></li>
<li><a href="https://en.wikipedia.org/wiki/Modulo_operation">https://en.wikipedia.org/wiki/Modulo_operation</a></li>
<li><a href="http://stackoverflow.com/questions/4467539/javascript-modulo-not-behaving">http://stackoverflow.com/questions/4467539/javascript-modulo-not-behaving</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim Side Search: Making Search Fun Again]]></title>
    <link href="https://ddrscott.github.io/blog/2016/side-search/"/>
    <updated>2016-05-27T09:00:00-05:00</updated>
    <id>https://ddrscott.github.io/blog/2016/side-search</id>
    <content type="html"><![CDATA[<p><img class="featured" src="https://ddrscott.github.io/images/vim_ag_unicorn.png" width="699" height="453" title="'Vim + Ag = Unicorn'" ></p>

<p>The <code>quickfix</code> feature is nice, but it doesn&rsquo;t give enough context around the
search term that leads to use <code>ag</code> from terminal and switch back and forth
between programs. I do this search dance every day and I&rsquo;ve had it! There must
be better way!</p>

<!-- more -->


<h2>Problem</h2>

<p><img class="featured" src="https://ddrscott.github.io/images/side-search-a.png" width="1280" height="1009" title="'Quickfix for help'" >
Look at the <code>quickfix</code> window above. It spends most of its space showing the file name
of the hit, then the remainder is spent on text around it. In projects using
<a href="http://guides.rubyonrails.org/engines.html">Rails Engines</a> with deeply nested
directory structures, this often leaves me with just a bunch of paths in the <code>quickfix</code>.</p>

<h2>Solution A &ndash; The Unix Way</h2>

<p>Some may argue Vim isn&rsquo;t suppose to do search. Vim rightly delegates to the
<a href="http://www.catb.org/esr/writings/taoup/html/ch01s06.html">Unix philosophy</a> by
allowing an external program do its searching. Let&rsquo;s try that for this
solution using <code>grep</code>, <code>ack</code>, and <code>ag</code>.</p>

<p><img class="featured" src="https://ddrscott.github.io/images/side-search-compare.png" width="1280" height="822" title="'grep vs ack vs ag'" ></p>

<p>We&rsquo;ve run the 3 separate programs (normally, I would only use <code>ag</code>) then
browse the results to see if there&rsquo;s an interesting file. At this point I start
using my handy-dandy mouse to scroll around, precisely highlight the path of
interest, copy, and type <code>vim &lt;Paste&gt;</code>. Intuitive? Yes. Fast? No!</p>

<p>Maybe I should use <code>tmux</code> or <code>screen</code> so I don&rsquo;t need to mouse around, but
trying to select a path is still pretty slow for me and requires more cognitive
load than I have patience for. After all, I&rsquo;m trying to concentrate on a
refactor or something, not how to open a bunch of files. Should I practice more?
Yes. Will I? No!</p>

<p>We&rsquo;re going to use <code>ag</code> from now on, since it&rsquo;s faster than <code>ack</code>, and has
prettier output than <code>grep</code>. I really really really tried to get <code>grep</code> to
output for humans, but couldn&rsquo;t figure it out.</p>

<h2>Solution B &ndash; Vim without Quickfix</h2>

<p>Let Vim do some work for us.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vim `ag --ignore=\*.{css,scss} -l help` +'/help'</span></code></pre></td></tr></table></div></figure>


<p>What&rsquo;s that?!? Open Vim passing the result of <code>ag</code> command. <code>ag</code> is run with
some file exclusions, <code>-l</code> only file names, and <code>help</code> is the search term.
<code>+'/help'</code> tells Vim to immediately start searching for &lsquo;help&rsquo;.</p>

<p>After all that, Vim should have started with a bunch of buffers. View them with
<code>:ls</code>. Take notice of the buffer numbers to see how many files were found. Use
<code>n</code> and <code>N</code> to jump through search matches in the file. Use <code>:bn</code> to go to the
next buffer and start hitting <code>n</code> again to cycle through the changes. If the
number of files is small enough, you may be able to use <code>:ball</code> to open every
buffer in its own window.</p>

<p>Thats a lot of work to jump through changes. Good thing the <code>quickfix</code> exists.</p>

<h2>Solution C &ndash; Quickfix</h2>

<p>This is here for posterity. <code>quickfix</code> DOES make cycling through changes easier
than Solution B, but as I stated in the intro, it doesn&rsquo;t give the context that
we want.</p>

<p><a href="https://robots.thoughtbot.com/faster-grepping-in-vim">Thoughtbot has a pretty good article</a>
about how to setup Vim to use <code>ag</code>. Once you do that, you can <code>:grep help</code> to
get the following output:</p>

<p><img class="featured" src="https://ddrscott.github.io/images/side-search-a.png" width="1280" height="1009" title="'Quickfix for help'" ></p>

<p>Use <code>:cnext</code>, <code>:cprev</code>, <code>:cfirst</code>, <code>:clast</code> to go to next, previous, first, and
last <code>quickfix</code> result respectively. Map those to keys to make it easier to
navigate.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nnoremap [q :cprev&lt;CR&gt;
</span><span class='line'>nnoremap ]q :cnext&lt;CR&gt;
</span><span class='line'>nnoremap [Q :cfirst&lt;CR&gt;
</span><span class='line'>nnoremap ]Q :clast&lt;CR&gt;</span></code></pre></td></tr></table></div></figure>


<p>Get more help about <code>quickfix</code> using <code>:help quickfix</code>. Cry after realizing
even <code>:help quickfix</code> can&rsquo;t show more context. I&rsquo;ll be here when you&rsquo;re done.</p>

<h2>Solution D &ndash; Side Search Plugin</h2>

<p>So how do we get the best of both worlds? How do we enter the land of a thousand
wives/husbands? How do we get <code>ag</code> output and quick navigation? For me, it
was writing a plugin in. For you it&rsquo;s using it. <a href="https://github.com/ddrscott/vim-side-search">https://github.com/ddrscott/vim-side-search</a></p>

<p>After installing the plugin using your favorite package manager, you&rsquo;ll have
access to the following functionality:</p>

<p><img class="featured" src="https://ddrscott.github.io/images/side-search-demo-b.gif" width="1169" height="631" title="'Side Search Demo'" ></p>

<p>Things to notice:</p>

<ul>
<li><code>ag</code> output is in a buffer with additional syntax highlighting!</li>
<li><code>n</code> and <code>N</code> used to jump to matches. Regular Vim navigation works, too!</li>
<li><code>&lt;CR&gt;</code> and <code>&lt;C-w&gt;&lt;CR&gt;</code> used to open change and jump to change!</li>
<li>Number of matches shown in the buffer name!</li>
<li>I use too many exclamation points!!!</li>
</ul>


<p>The plugin&rsquo;s <code>README</code> has more details.</p>

<h2>Closing</h2>

<p>I&rsquo;ve been using this plugin ever since its inception and don&rsquo;t know where I&rsquo;d
be without it. It gets some inspiration from <a href="https://github.com/tpope/vim-fugitive">fugitive&rsquo;s</a>
<code>:Gstatus</code> mode/buffer, and I wish there were more plugins that added
functionality from <code>stdout</code> instead of transforming it into a different format. Unix
tools makers spend a lot of time thinking about the output. Let&rsquo;s use it to our
advantage.</p>

<p>I&rsquo;ve learn a lot creating this plugin and plan to write about it in a future post.
Do you love it or hate it? Have more ideas for Side Search? Please let me know what you
think of it. Have more ideas or issues for Side Search? Hit me up on <a href="https://github.com/ddrscott/vim-side-search">Github</a>.</p>

<h3>References</h3>

<ul>
<li><a href="https://github.com/ggreer/the_silver_searcher">The Silver Searcher</a> by Geoff Greer</li>
<li><code>man ag</code></li>
<li><code>man grep</code></li>
<li><code>man tmux</code></li>
<li><code>man screen</code></li>
<li><code>:help quickfix</code></li>
<li><a href="https://robots.thoughtbot.com/faster-grepping-in-vim">Faster Grepping in Vim</a> by Thoughtbot</li>
<li><a href="https://www.google.com/search?q=the+number+12">The number 12</a></li>
</ul>


<h3>In The News</h3>

<ul>
<li><a href="https://news.ycombinator.com/item?id=11787085">Hacker News</a></li>
<li><a href="https://www.reddit.com/r/vim/comments/4lbdur/vim_side_search_plugin_making_search_fun_again/">Reddit</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sensible Horizontal Scroll in Vim]]></title>
    <link href="https://ddrscott.github.io/blog/2016/sidescroll/"/>
    <updated>2016-05-05T09:00:00-05:00</updated>
    <id>https://ddrscott.github.io/blog/2016/sidescroll</id>
    <content type="html"><![CDATA[<p><img class="featured" src="https://ddrscott.github.io/images/sidescroll-feature.png" width="1280" height="971" title="'I heart sidescroll'" ></p>

<p>Sometimes it&rsquo;s the little things that make a big difference, and this is about
as small as it can get. Occasionally, I hold down <code>l</code>, <code>w</code>, or <code>e</code> to view long
lines which have disappeared off the window. It&rsquo;s a bad habit and the penalty
always ruins my concentration. But after I found this setting, I&rsquo;m free
to cursor around like an innocent child unaware of death.</p>

<!-- more -->


<p><em>TL;DR</em> &mdash; <code>set sidescroll=1</code></p>

<h2>Problem</h2>

<p>When <code>set wrap</code> is off, otherwise known as <code>set nowrap</code>, and a line is longer
than the window can handle, you&rsquo;ll need to scroll to see more of the line.
<code>{x}zl</code> and <code>{x}zh</code> will scroll the screen right and left respectively.
That&rsquo;s a lot to remember to see some more text. Which leads me to hold
down <code>w</code> or <code>e</code> to get it done followed by janky behavior when the
cursor gets to the edge of the window. The default behavior of revealing more
text is &frac12; a window width at a time. This abrupt jump throws off my fragile
concentration.</p>

<p><img class="featured" src="https://ddrscott.github.io/images/sidescroll-off.gif" width="635" height="337" title="'Demo Sidescroll Off'" ></p>

<h2>Solution A</h2>

<p>Turn on word wrapping. <code>set wrap</code>. Boring, but effective. You might also want
to make word wrapping look nicer. I do that with the following settings.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> breakindent
</span><span class='line'><span class="k">set</span> breakindentopt<span class="p">=</span><span class="k">sbr</span>
</span><span class='line'><span class="c">&quot; I use a unicode curly array with a &lt;backslash&gt;&lt;space&gt;</span>
</span><span class='line'><span class="k">set</span> <span class="nb">showbreak</span><span class="p">=</span>↪<span class="p">&gt;</span>\
</span></code></pre></td></tr></table></div></figure>


<p>This of course doesn&rsquo;t solve the problem if, in fact, we want wrapping off.</p>

<h2>Solution B</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">sidescroll</span><span class="p">=</span><span class="m">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>This simple setting makes Vim behave like every other plain editor. It will
incrementally scroll one character at a time to reveal more text as needed.</p>

<p><img class="featured" src="https://ddrscott.github.io/images/sidescroll-on.gif" width="635" height="337" title="'Demo Sidescroll On'" ></p>

<p>Here&rsquo;s the help doc to clear things up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'sidescroll' 'ss'    number  (default 0)
</span><span class='line'>                  global
</span><span class='line'>        The minimal number of columns to scroll horizontally.  Used only when
</span><span class='line'>        the 'wrap' option is off and the cursor is moved off of the screen.
</span><span class='line'>        When it is zero the cursor will be put in the middle of the screen.
</span><span class='line'>        When using a slow terminal set it to a large number or 0.  When using
</span><span class='line'>        a fast terminal use a small number or 1.  Not used for "zh" and "zl"
</span><span class='line'>        commands.
</span><span class='line'>
</span><span class='line'>'sidescrolloff' 'siso'    number (default 0)
</span><span class='line'>global
</span><span class='line'>        The minimal number of screen columns to keep to the left and to the
</span><span class='line'>        right of the cursor if 'nowrap' is set.  Setting this option to a
</span><span class='line'>        value greater than 0 while having |'sidescroll'| also at a non-zero
</span><span class='line'>        value makes some context visible in the line you are scrolling in
</span><span class='line'>        horizontally (except at beginning of the line).  Setting this option
</span><span class='line'>        to a large value (like 999) has the effect of keeping the cursor
</span><span class='line'>        horizontally centered in the window, as long as one does not come too
</span><span class='line'>        close to the beginning of the line.
</span><span class='line'>
</span><span class='line'>        Example: Try this together with 'sidescroll' and 'listchars' as
</span><span class='line'>                 in the following example to never allow the cursor to move
</span><span class='line'>                 onto the "extends" character:
</span><span class='line'>
</span><span class='line'>                 :set nowrap sidescroll=1 listchars=extends:&gt;,precedes:&lt;
</span><span class='line'>                 :set sidescrolloff=1</span></code></pre></td></tr></table></div></figure>


<p>Seems like the default was intended for a &ldquo;slow terminal&rdquo;. If you&rsquo;re using a
slow terminal while editing a large amount of unwrapped text, I&rsquo;d recommend
getting a computer from this millennia and enabling <code>sidescroll</code>.
Also note that a sensible example is shown in the <code>sidescrolloff</code> section.</p>

<h1>Off Topic&hellip;</h1>

<p>It&rsquo;s interesting to study all the decisions made due to slow terminals.
Try <code>:help slow-terminal</code> for a quick look and try <code>:helpgrep slow</code> to see way
more mentions. Use <code>:help helpgrep</code> if you didn&rsquo;t know about <code>helpgrep</code> :)</p>

<h1>Closing</h1>

<p>I&rsquo;m sure you&rsquo;re thinking why so many words were written for a single setting.
Similar to my previous post about <a href="https://ddrscott.github.io/blog/2016/yank-without-jank/">Yank without Jank</a>,
these unexpected janky behaviors cause anxiety. Anxiety that usually can&rsquo;t be
identified or resolved in the heat of a coding session, but is there, wading in
the weeds, ready to pounce at your next stray keystroke. As a student of Vim, I
want identify and resolve these issues so I can get back to why I like Vim;
using the dot operator.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making a Window Submode in Vim]]></title>
    <link href="https://ddrscott.github.io/blog/2016/making-a-window-submode/"/>
    <updated>2016-04-29T09:00:00-05:00</updated>
    <id>https://ddrscott.github.io/blog/2016/making-a-window-submode</id>
    <content type="html"><![CDATA[<p><img class="featured" src="https://ddrscott.github.io/images/window-mode-feature.png" width="1280" height="380" title="'Header Image'" >
I found a plugin that is changing my Vim-tire life! This
<a href="https://github.com/kana/vim-submode">plugin</a> is so awesome it should be
built into default Vim. What does the <a href="https://github.com/kana/vim-submode">plugin</a>
do? It enables the creation of new submodes. Why would a person want <em>more</em> modes?!?
Isn&rsquo;t dealing with modes the main deterrent for new Vim users? Isn&rsquo;t Normal,
Insert, Command-line, Visual, Select, and Operator-pending enough? (Did I miss one?)
Let&rsquo;s try out a new submode and see what happens.</p>

<!-- more -->


<h2>Problem</h2>

<p>Window commands are prefixed with <code>&lt;C-w&gt;</code>. Want to create a horizontal split?
Try <code>&lt;C-w&gt;s</code>, didn&rsquo;t mean to do that and want to do vertical split? <code>&lt;C-w&gt;q&lt;C-w&gt;v</code>.
Want to resize the vertical split <code>50&lt;C-w&gt;&gt;</code>? Too wide? Narrow it with <code>5&lt;C-w&gt;&lt;</code>.
Move back to the other window? <code>&lt;C-w&gt;p</code> or <code>&lt;C-w&gt;w</code>.</p>

<p>Are your fingers getting tired? After I get the windows just right using default
mappings my fingers are crying for mercy.</p>

<p>Here&rsquo;s a short list of common default window commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; Change window focus</span>
</span><span class='line'>{<span class="k">n</span>}<span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;</span><span class="k">h</span>   move cursor <span class="k">left</span>  {<span class="k">n</span>} <span class="nb">window</span>
</span><span class='line'>{<span class="k">n</span>}<span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;</span><span class="k">l</span>   move cursor <span class="k">right</span> {<span class="k">n</span>} <span class="nb">window</span>
</span><span class='line'>{<span class="k">n</span>}<span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;</span><span class="k">j</span>   move cursor down  {<span class="k">n</span>} <span class="nb">window</span>
</span><span class='line'>{<span class="k">n</span>}<span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;</span><span class="k">k</span>   move cursor <span class="k">up</span>    {<span class="k">n</span>} <span class="nb">window</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Move window</span>
</span><span class='line'><span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;</span>H   move <span class="nb">window</span> far <span class="k">left</span>
</span><span class='line'><span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;</span>L   move <span class="nb">window</span> far <span class="k">right</span>
</span><span class='line'><span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;</span>J   move <span class="nb">window</span> far bottom
</span><span class='line'><span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;</span>K   move <span class="nb">window</span> far <span class="k">top</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Change size</span>
</span><span class='line'>{<span class="k">n</span>}<span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;+</span>  increase height by {<span class="k">n</span>} rows
</span><span class='line'>{<span class="k">n</span>}<span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;-</span>  decrease height by {<span class="k">n</span>} rows
</span><span class='line'>{<span class="k">n</span>}<span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;&lt;</span>  decrease width by {<span class="k">n</span>} <span class="nb">columns</span>
</span><span class='line'>{<span class="k">n</span>}<span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;&gt;</span>  increase width by {<span class="k">n</span>} <span class="nb">columns</span>
</span><span class='line'>   <span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;|</span>  maximize width
</span><span class='line'>   <span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;</span>_  maximize height
</span><span class='line'>   <span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;=</span>  equalize sizes
</span></code></pre></td></tr></table></div></figure>


<p>For a comprehensive list of window commands try <code>:help windows.txt</code>.</p>

<h2>Solution A</h2>

<p>The most common solution to window-command-itis is to map other keys to these
common actions so to include the <code>&lt;C-w&gt;</code> prefix.</p>

<p>From <a href="https://github.com/spf13/spf13-vim/blob/3.0/.vimrc">spf13-vim</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>map <span class="p">&lt;</span>C<span class="p">-</span>J<span class="p">&gt;</span> <span class="p">&lt;</span>C<span class="p">-</span>W<span class="p">&gt;</span><span class="k">j</span><span class="p">&lt;</span>C<span class="p">-</span>W<span class="p">&gt;</span>_
</span><span class='line'>map <span class="p">&lt;</span>C<span class="p">-</span>K<span class="p">&gt;</span> <span class="p">&lt;</span>C<span class="p">-</span>W<span class="p">&gt;</span><span class="k">k</span><span class="p">&lt;</span>C<span class="p">-</span>W<span class="p">&gt;</span>_
</span><span class='line'>map <span class="p">&lt;</span>C<span class="p">-</span>L<span class="p">&gt;</span> <span class="p">&lt;</span>C<span class="p">-</span>W<span class="p">&gt;</span><span class="k">l</span><span class="p">&lt;</span>C<span class="p">-</span>W<span class="p">&gt;</span>_
</span><span class='line'>map <span class="p">&lt;</span>C<span class="p">-</span>H<span class="p">&gt;</span> <span class="p">&lt;</span>C<span class="p">-</span>W<span class="p">&gt;</span><span class="k">h</span><span class="p">&lt;</span>C<span class="p">-</span>W<span class="p">&gt;</span>_
</span><span class='line'><span class="c">&quot; Note: They go one extra by maximizing the height after entering the split.</span>
</span></code></pre></td></tr></table></div></figure>


<p>From <a href="https://robots.thoughtbot.com/vim-splits-move-faster-and-more-naturally">Thoughbot</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>C<span class="p">-</span>J<span class="p">&gt;</span> <span class="p">&lt;</span>C<span class="p">-</span>W<span class="p">&gt;&lt;</span>C<span class="p">-</span>J<span class="p">&gt;</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>C<span class="p">-</span>K<span class="p">&gt;</span> <span class="p">&lt;</span>C<span class="p">-</span>W<span class="p">&gt;&lt;</span>C<span class="p">-</span>K<span class="p">&gt;</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>C<span class="p">-</span>L<span class="p">&gt;</span> <span class="p">&lt;</span>C<span class="p">-</span>W<span class="p">&gt;&lt;</span>C<span class="p">-</span>L<span class="p">&gt;</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>C<span class="p">-</span>H<span class="p">&gt;</span> <span class="p">&lt;</span>C<span class="p">-</span>W<span class="p">&gt;&lt;</span>C<span class="p">-</span>H<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This has been the accepted solution for most, but it takes away so many
convenient keys. And in some cases, it even overrides default behaviour.
<code>&lt;C-L&gt;</code>, I miss you. <code>C-H</code>, isn&rsquo;t that also <code>&lt;BS&gt;</code>? Guess I won&rsquo;t be using
you either.</p>

<h2>Solution B &ndash; Submode to the Rescue</h2>

<p>This entire solution depends on <a href="https://github.com/kana/vim-submode.git">kana/vim-submode</a>,
I consider it one of Japan&rsquo;s national treasures along with ninjas and ramen.
Unfortunately, Kana&rsquo;s example use of submodes is a little underwhelming:
undo/redo using <code>g-</code> and <code>g+</code>. I agree with the author that using <code>g-</code> and
<code>g+</code> is not convenient, and using <code>g++++-++-+</code> is easier, but the solution
for that was simply <code>u</code> and <code>&lt;C-R&gt;</code>. I feel a better application for a new
submode is window management. Imagine if resizing a split was <code>&lt;C-w&gt;++++++++</code>
or <code>&lt;C-w&gt;------=-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&lt;&gt;</code> or changing cursor location was <code>&lt;C-w&gt;hjlll</code>
or moving was <code>&lt;C-w&gt;HjKLkjh</code>. Imagine no more!</p>

<p>First, install the plugin. If you&rsquo;re not sure how to install a plugin, try
<a href="https://github.com/junegunn/vim-plug">junegunn/vim-plug</a>. Next, add the
following to your <code>$MYVIMRC</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; A message will appear in the message line when you&#39;re in a submode</span>
</span><span class='line'><span class="c">&quot; and stay there until the mode has existed.</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:submode_always_show_submode <span class="p">=</span> <span class="m">1</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; We&#39;re taking over the default &lt;C-w&gt; setting. Don&#39;t worry we&#39;ll do</span>
</span><span class='line'><span class="c">&quot; our best to put back the default functionality.</span>
</span><span class='line'><span class="k">call</span> submode#enter_with<span class="p">(</span><span class="s1">&#39;window&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;C-w&gt;&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Note: &lt;C-c&gt; will also get you out to the mode without this mapping.</span>
</span><span class='line'><span class="c">&quot; Note: &lt;C-[&gt; also behaves as &lt;ESC&gt;</span>
</span><span class='line'><span class="k">call</span> submode#leave_with<span class="p">(</span><span class="s1">&#39;window&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;ESC&gt;&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Go through every letter</span>
</span><span class='line'><span class="k">for</span> <span class="nb">key</span> <span class="k">in</span> [<span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="s1">&#39;c&#39;</span><span class="p">,</span><span class="s1">&#39;d&#39;</span><span class="p">,</span><span class="s1">&#39;e&#39;</span><span class="p">,</span><span class="s1">&#39;f&#39;</span><span class="p">,</span><span class="s1">&#39;g&#39;</span><span class="p">,</span><span class="s1">&#39;h&#39;</span><span class="p">,</span><span class="s1">&#39;i&#39;</span><span class="p">,</span><span class="s1">&#39;j&#39;</span><span class="p">,</span><span class="s1">&#39;k&#39;</span><span class="p">,</span><span class="s1">&#39;l&#39;</span><span class="p">,</span><span class="s1">&#39;m&#39;</span><span class="p">,</span>
</span><span class='line'>\           <span class="s1">&#39;n&#39;</span><span class="p">,</span><span class="s1">&#39;o&#39;</span><span class="p">,</span><span class="s1">&#39;p&#39;</span><span class="p">,</span><span class="s1">&#39;q&#39;</span><span class="p">,</span><span class="s1">&#39;r&#39;</span><span class="p">,</span><span class="s1">&#39;s&#39;</span><span class="p">,</span><span class="s1">&#39;t&#39;</span><span class="p">,</span><span class="s1">&#39;u&#39;</span><span class="p">,</span><span class="s1">&#39;v&#39;</span><span class="p">,</span><span class="s1">&#39;w&#39;</span><span class="p">,</span><span class="s1">&#39;x&#39;</span><span class="p">,</span><span class="s1">&#39;y&#39;</span><span class="p">,</span><span class="s1">&#39;z&#39;</span>]
</span><span class='line'><span class="c">  &quot; maps lowercase, uppercase and &lt;C-key&gt;</span>
</span><span class='line'>  <span class="k">call</span> submode#map<span class="p">(</span><span class="s1">&#39;window&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nb">key</span><span class="p">,</span> <span class="s1">&#39;&lt;C-w&gt;&#39;</span> . <span class="nb">key</span><span class="p">)</span>
</span><span class='line'>  <span class="k">call</span> submode#map<span class="p">(</span><span class="s1">&#39;window&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> toupper<span class="p">(</span><span class="nb">key</span><span class="p">),</span> <span class="s1">&#39;&lt;C-w&gt;&#39;</span> . toupper<span class="p">(</span><span class="nb">key</span><span class="p">))</span>
</span><span class='line'>  <span class="k">call</span> submode#map<span class="p">(</span><span class="s1">&#39;window&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;C-&#39;</span> . <span class="nb">key</span> . <span class="s1">&#39;&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;C-w&gt;&#39;</span> . <span class="s1">&#39;&lt;C-&#39;</span>.<span class="nb">key</span> . <span class="s1">&#39;&gt;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">endfor</span>
</span><span class='line'><span class="c">&quot; Go through symbols. Sadly, &#39;|&#39;, not supported in submode plugin.</span>
</span><span class='line'><span class="k">for</span> <span class="nb">key</span> <span class="k">in</span> [<span class="s1">&#39;=&#39;</span><span class="p">,</span><span class="s1">&#39;_&#39;</span><span class="p">,</span><span class="s1">&#39;+&#39;</span><span class="p">,</span><span class="s1">&#39;-&#39;</span><span class="p">,</span><span class="s1">&#39;&lt;&#39;</span><span class="p">,</span><span class="s1">&#39;&gt;&#39;</span>]
</span><span class='line'>  <span class="k">call</span> submode#map<span class="p">(</span><span class="s1">&#39;window&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nb">key</span><span class="p">,</span> <span class="s1">&#39;&lt;C-w&gt;&#39;</span> . <span class="nb">key</span><span class="p">)</span>
</span><span class='line'><span class="k">endfor</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Old way, just in case.</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">w</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After <code>:source $MYVIMRC</code>, you&rsquo;ll have a glorious new submode in Vim.
You can see I named it <em>window</em> mode. Can you guess how to get into <em>window</em> mode?
<code>&lt;C-w&gt;</code>, the normal prefix used to do any <code>wincmd</code>. If this is too drastic, feel
free to change line #7 to something else. Just replace <code>&lt;C-w&gt;</code> with a different
normal mapping.</p>

<p>Let&rsquo;s give it a test drive.
<img class="featured" src="https://ddrscott.github.io/images/window-submode.gif" width="1142" height="719" title="'window mode in action'" >
I know you can&rsquo;t see what keys I&rsquo;m pressing, but I guarantee I only pressed
<code>&lt;C-w&gt;</code> once. I also didn&rsquo;t have to remember any new key bindings. The
hesitation in the demo is the resistance to hitting <code>&lt;C-w&gt;</code> every time, which
I&rsquo;ll get over soon enough.</p>

<h2>Bonus Mappings</h2>

<p>But wait there&rsquo;s more! In case I haven&rsquo;t provided enough tips for one post,
here&rsquo;s the overrides I have in <code>$MYVIMRC</code> to make windowing even better.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; I don&#39;t like &lt;C-w&gt;q, &lt;C-w&gt;c won&#39;t exit Vim when it&#39;s the last window.</span>
</span><span class='line'><span class="k">call</span> submode#map<span class="p">(</span><span class="s1">&#39;window&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;q&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;C-w&gt;c&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">call</span> submode#map<span class="p">(</span><span class="s1">&#39;window&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;C-q&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;C-w&gt;c&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; &lt;lowercase-pipe&gt; sets the width to 80 columns, pipe (&lt;S-\&gt;) by default</span>
</span><span class='line'><span class="c">&quot; maximizes the width.</span>
</span><span class='line'><span class="k">call</span> submode#map<span class="p">(</span><span class="s1">&#39;window&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;\&#39;, &#39;</span>:<span class="k">vertical</span> <span class="k">resize</span> <span class="m">80</span><span class="p">&lt;</span>CR<span class="p">&gt;</span>&#39;<span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Resize faster</span>
</span><span class='line'><span class="k">call</span> submode#map<span class="p">(</span><span class="s1">&#39;window&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;+&#39;</span><span class="p">,</span> <span class="s1">&#39;3&lt;C-w&gt;+&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">call</span> submode#map<span class="p">(</span><span class="s1">&#39;window&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="s1">&#39;3&lt;C-w&gt;-&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">call</span> submode#map<span class="p">(</span><span class="s1">&#39;window&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;&#39;</span><span class="p">,</span> <span class="s1">&#39;10&lt;C-w&gt;&lt;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">call</span> submode#map<span class="p">(</span><span class="s1">&#39;window&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;10&lt;C-w&gt;&gt;&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Rainbows without Unicorns</h2>

<p>While learning this new way of windowing, there have been a few negatives:</p>

<ol>
<li><p>I forget that I&rsquo;m in window mode and get disoriented when I think I&rsquo;m moving
the cursor within a buffer, but it jumps around to other splits.</p></li>
<li><p>For one off window commands, I have to hit an extra key to get out of window
mode or wait for the timeout.</p></li>
<li><p>When I use some one else&rsquo;s computer, I&rsquo;m useless.</p></li>
</ol>


<p>I think most of these annoyances will go away with time, and the benefits
overtime in keystroke savings are non-trivial. As for #3, regardless of submodes,
the brain freeze will never go away, because no one thinks as strangely as me,
and that&rsquo;s a Good Thing™.</p>

<h2>Thanks</h2>

<p>Shout-out to Kana Natsuno, @kana1, <a href="http://whileimautomaton.net/,">http://whileimautomaton.net/,</a> <a href="https://github.com/kana">https://github.com/kana</a> . None
of this awesomeness would be possible without <a href="https://github.com/kana/vim-submode">https://github.com/kana/vim-submode</a> . She
makes some totally sweet plug-ins. Check out her stuff. You won&rsquo;t regret it!</p>

<p>Let me know what you think. Am I crazy? What other things deserve a submode?
Hit me up in the comments below! Thanks for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yank Without Jank]]></title>
    <link href="https://ddrscott.github.io/blog/2016/yank-without-jank/"/>
    <updated>2016-04-25T04:51:11-05:00</updated>
    <id>https://ddrscott.github.io/blog/2016/yank-without-jank</id>
    <content type="html"><![CDATA[<p><img class="featured" src="https://ddrscott.github.io/images/yank-default.gif" width="234" height="130" title="'Yank default jump'" ></p>

<p>For all the great things Vim has to offer, it still has some inconsistencies with
basic editors that I simply can&rsquo;t unlearn. One of these nasties is moving the cursor
after a visual yank. Go ahead, try it: <code>vipy</code>. Where&rsquo;s your cursor? Where did
you expect it to be located? When you&rsquo;re in a boring editor and do
<code>shift-down-down-down &lt;Cmd-c&gt;</code>, where&rsquo;s your cursor?  Where did you expect it
to be located? This janky behaviour always throws me off for a moment, then I
compose myself, do a <code>&lt;backtick&gt;&lt;greaterthan&gt;</code> to jump to the end of my selection, and <code>p</code>.</p>

<p>There must be a better way!</p>

<!-- more -->


<h2>Solution A</h2>

<p>Rebind <code>y</code> to do exactly what we did above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">vnoremap</span> <span class="k">y</span> <span class="k">y</span>`<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This work and I lived with it for a few minutes, but it still wasn&rsquo;t perfect. I
noticed when I do line select using capital <code>V</code> the cursor would still move. The
vertical motion was perfect, but horizontal motion was still jarring.</p>

<p><img class="featured" src="https://ddrscott.github.io/images/yank-solution-a.gif" width="234" height="130" title="'Yank tick greater than'" ></p>

<h2>Solution B</h2>

<p>Let&rsquo;s try using marks to keep things in place:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">vnoremap</span> <span class="k">y</span> myy`<span class="k">y</span>
</span><span class='line'><span class="nb">vnoremap</span> Y myY`<span class="k">y</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="featured" src="https://ddrscott.github.io/images/2016-04-15-yank-without-jank_markdown.png" width="600" height="379" title="'Yank Without Jank Annotation'" >
The capital <code>Y</code> mapping is just in case we want to do a line wise yank from a
character wise selection.</p>

<p><img class="featured" src="https://ddrscott.github.io/images/yank-solution-b.gif" width="234" height="130" title="'Yank mark y'" ></p>

<p>Like a well trained dog, the cursor stays even though you yank it.</p>

<p><strong>BONUS</strong> This snippet also takes over the <code>y</code> marker, so you can manually
<code>&lt;backtick&gt;y</code> at a later time to continue yanking where you left off. This is great when
you&rsquo;re moving a lot of stuff around and want pick up where you last were. You
can also change the mark to capitals in the binding so it spans buffers, too.</p>

<h2>Closing</h2>

<p>I&rsquo;ve been using this setting for a while and noticed my blood pressure is way
down. No more yank anxiety means I&rsquo;m a step closer to editing utopia!</p>

<p>Let me know how this goes for you in the comments below.</p>

<h2>Updates from Comments</h2>

<p>Commenter @Krzysztof noticed Solution B wasn&rsquo;t allowing the user to specify
the target register. He was awesome enough to update the solution. Here&rsquo;s his
solution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">vnoremap</span> <span class="p">&lt;</span>expr<span class="p">&gt;</span><span class="k">y</span> <span class="s2">&quot;my\&quot;&quot;</span> . <span class="k">v</span>:<span class="k">register</span> . <span class="s2">&quot;y`y&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve updated <code>$MYVIMRC</code> and it works great.
Thanks @Krzysztof for being awesome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim Toggle Movement: I Just Want to Go Home]]></title>
    <link href="https://ddrscott.github.io/blog/2016/vim-toggle-movement/"/>
    <updated>2016-04-14T05:51:11-05:00</updated>
    <id>https://ddrscott.github.io/blog/2016/vim-toggle-movement</id>
    <content type="html"><![CDATA[<p><img class="featured" src="https://ddrscott.github.io/images/i_just_want_to_go_home.png" width="600" height="255" title="'I just want to go home'" ></p>

<p>I have a problem with the <code>^</code> key. I need its functionality, but its proximity is
too far for either of my stubby index fingers. No vimrc change can physically move it
closer to me, but I have found a way to move its funtionality to another a key.
A key which already knows how to go home. An alternate home. A home where my
heart isn&rsquo;t. Enough drama, what&rsquo;s the problem?!?</p>

<!-- more -->


<h2>The Problem</h2>

<p>In my daily coding, I have a deep seeded need to go to the first non-blank
character of a line. The only key that Vim provides for that functionality is <code>^</code>,
the hardest key to reach from the home row. A much more comfortable key to reach
is <code>0</code>, but that shoots us past the first non-blank character all the way to
the left edge of the window. <code>&lt;Home&gt;</code> is the ugly step child of either option
since it&rsquo;s even harder to reach and takes us to the first column, too.</p>

<p>In case you don&rsquo;t believe me. Here&rsquo;s what the Vim document says:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>  0          To the first character of the line.  |exclusive|
</span><span class='line'>        motion.
</span><span class='line'>
</span><span class='line'>                *&lt;Home&gt;* *&lt;kHome&gt;*
</span><span class='line'>  &lt;Home&gt;  To the first character of the line.  |exclusive|
</span><span class='line'>        motion.  When moving up or down next, stay in same
</span><span class='line'>        TEXT column (if possible).  Most other commands stay
</span><span class='line'>        in the same SCREEN column.  &lt;Home&gt; works like &quot;1|&quot;,
</span><span class='line'>        which differs from &quot;0&quot; when the line starts with a
</span><span class='line'>        &lt;Tab&gt;.
</span><span class='line'>
</span><span class='line'>                *^*
</span><span class='line'>  ^           To the first non-blank character of the line. |exclusive| motion.
</span></code></pre></td></tr></table></div></figure>


<p>Why can&rsquo;t I have a key that is easy to reach and takes me to the first
non-blank?!?</p>

<p><img src="https://ddrscott.github.io/images/venn_home_0.png" width="552" height="475" title="'venn diagram - home, caret, and 0'" ></p>

<p>I could swap the functionality of <code>0</code> and <code>^</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>nnoremap 0 ^
</span><span class='line'>nnoremap ^ 0
</span></code></pre></td></tr></table></div></figure>


<p>This still forces me to reach for <code>^</code> when I need to need to get to that left
edge. There must be a better way!</p>

<h2>The Solution</h2>

<p>Let&rsquo;s give <code>0</code> some super toggling powers. When I hit it the first time, I want it be
be like <code>^</code>. If I hit it again, I want it to finish its travels and go to the
first column.</p>

<h3>Solution A</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> ToggleHomeZero<span class="p">()</span>
</span><span class='line'>  <span class="k">let</span> pos <span class="p">=</span> getpos<span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span>
</span><span class='line'>  execute <span class="s2">&quot;normal! ^&quot;</span>
</span><span class='line'>  <span class="k">if</span> pos <span class="p">==</span> getpos<span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span>
</span><span class='line'>    execute <span class="s2">&quot;normal! 0&quot;</span>
</span><span class='line'>  <span class="k">endif</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="nb">nnoremap</span> <span class="m">0</span> :<span class="k">call</span> ToggleHome<span class="p">()&lt;</span>CR<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gets us exactly to the center of Venn diagrams heart:</p>

<p><strong>Easy to reach + First non-blank character + First column = Rainbow Colored Unicorn!</strong></p>

<h3>Solution B</h3>

<p>After enjoying staring at the function for a while, I realized we could add
super toggling powers to other movements. Lets extract the <code>normal</code> commands
into arguments and share the love with other keys!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> ToggleMovement<span class="p">(</span>firstOp<span class="p">,</span> thenOp<span class="p">)</span>
</span><span class='line'>  <span class="k">let</span> pos <span class="p">=</span> getpos<span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span>
</span><span class='line'>  execute <span class="s2">&quot;normal! &quot;</span> . <span class="k">a</span>:firstOp
</span><span class='line'>  <span class="k">if</span> pos <span class="p">==</span> getpos<span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span>
</span><span class='line'>    execute <span class="s2">&quot;normal! &quot;</span> . <span class="k">a</span>:thenOp
</span><span class='line'>  <span class="k">endif</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; The original carat 0 swap</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="m">0</span> :<span class="k">call</span> ToggleMovement<span class="p">(</span><span class="s1">&#39;^&#39;</span><span class="p">,</span> <span class="s1">&#39;0&#39;</span><span class="p">)&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; How about ; and ,</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> ; :<span class="k">call</span> ToggleMovement<span class="p">(</span><span class="s1">&#39;;&#39;</span><span class="p">,</span> <span class="s1">&#39;,&#39;</span><span class="p">)&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">,</span> :<span class="k">call</span> ToggleMovement<span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">,</span> <span class="s1">&#39;;&#39;</span><span class="p">)&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; How about H and L</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> H :<span class="k">call</span> ToggleMovement<span class="p">(</span><span class="s1">&#39;H&#39;</span><span class="p">,</span> <span class="s1">&#39;L&#39;</span><span class="p">)&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> L :<span class="k">call</span> ToggleMovement<span class="p">(</span><span class="s1">&#39;L&#39;</span><span class="p">,</span> <span class="s1">&#39;H&#39;</span><span class="p">)&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; How about G and gg</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> G :<span class="k">call</span> ToggleMovement<span class="p">(</span><span class="s1">&#39;G&#39;</span><span class="p">,</span> <span class="s1">&#39;gg&#39;</span><span class="p">)&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> gg :<span class="k">call</span> ToggleMovement<span class="p">(</span><span class="s1">&#39;gg&#39;</span><span class="p">,</span> <span class="s1">&#39;G&#39;</span><span class="p">)&lt;</span>CR<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p><code>ToggleMovement</code> is the gift that keeps on giving!</p>

<p>What other movement can we add to the list?
Let me know in the comments below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BS to the Black Hole]]></title>
    <link href="https://ddrscott.github.io/blog/2016/bs-to-the-black-hole/"/>
    <updated>2016-04-13T00:48:47-05:00</updated>
    <id>https://ddrscott.github.io/blog/2016/bs-to-the-black-hole</id>
    <content type="html"><![CDATA[<p><img class="featured" src="https://ddrscott.github.io/images/blackhole_bs.png" width="800" height="469" title="'BS to Black Hole'" ></p>

<p>First post in 2 years. Sorry to keep you waiting.</p>

<p>I&rsquo;ve been playing with Vim again, more specifically NeoVim
<a href="https://neovim.io/,">https://neovim.io/,</a> and this time I think it&rsquo;s going to stick.</p>

<h2>The Problem</h2>

<p>Sometimes, I want to delete text without worrying about blowing away the <code>unnamed</code>
register. This can be done by prefixing a normal or visual delete with <code>"_</code>,
but that&rsquo;s an awkward dance for my pinky and ring finger. Go ahead, try it.
You&rsquo;ll feel like you&rsquo;re in junior high again.</p>

<!-- more -->


<h2>Solution #1</h2>

<p>Setup a single key to do that <code>"_</code> thing for me. So my naive approach was to add
the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>BS<span class="p">&gt;</span> <span class="c">&quot;_</span>
</span><span class='line'><span class="nb">vnoremap</span> <span class="p">&lt;</span>BS<span class="p">&gt;</span> <span class="c">&quot;_</span>
</span></code></pre></td></tr></table></div></figure>


<p>This was fine for 32.1 seconds of usability testing. It did the job, but what
cames after a <code>"_</code> was usually a <code>dw</code> or <code>db</code> operator. Ah oh, I said the &ldquo;o&rdquo;
word. That means I have to make a <code>opfunc</code>. (Who makes these rules?!?)</p>

<h2>Solution #2</h2>

<p>So what is this operator going to let us do? How about <code>&lt;BS&gt;iw</code> or <code>&lt;BS&gt;ap</code> or
<code>v{motion around something you hate}&lt;BS&gt;</code>? If any of those seem awesome, here&rsquo;s
how to get in on the hot action!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; Add to your .vimrc or init.vim or vim.after or :e $MYVIMRC</span>
</span><span class='line'>func<span class="p">!</span> BlackHoleDeleteOperator<span class="p">(</span>type<span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="k">a</span>:type <span class="p">==</span># <span class="s1">&#39;char&#39;</span>
</span><span class='line'>    execute <span class="s1">&#39;normal! `[v`]&quot;_d&#39;</span>
</span><span class='line'>  <span class="k">elseif</span> <span class="k">a</span>:type <span class="p">==</span># <span class="s1">&#39;line&#39;</span>
</span><span class='line'>    execute <span class="s1">&#39;normal! `[V`]&quot;_d&#39;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    execute <span class="s1">&#39;normal! `&lt;&#39;</span> . <span class="k">a</span>:type . <span class="s1">&#39;`&gt;&quot;_d&#39;</span>
</span><span class='line'>  <span class="k">endif</span>
</span><span class='line'><span class="k">endf</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Map to &lt;BS&gt; because it&#39;s under worked in Vim.</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>BS<span class="p">&gt;</span> <span class="p">&lt;</span>Esc<span class="p">&gt;</span>:<span class="k">set</span> <span class="nb">opfunc</span><span class="p">=</span>BlackHoleDeleteOperator<span class="p">&lt;</span>CR<span class="p">&gt;</span><span class="k">g</span>@
</span><span class='line'><span class="nb">vnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>BS<span class="p">&gt;</span> :<span class="p">&lt;</span>C<span class="p">-</span><span class="k">u</span><span class="p">&gt;</span><span class="k">call</span> BlackHoleDeleteOperator<span class="p">(</span>visualmode<span class="p">())&lt;</span>CR<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>How Does it Work?</h2>

<ul>
<li><p><code>opfunc</code> is best explained in Vim help. Use <code>:help opfunc</code> and follow the <code>&lt;C-]&gt;</code>
 until clarity is achieved.</p></li>
<li><p><code>:help normal</code> &ndash; evaluates the following characters as if they were typed.</p></li>
<li><p><code>:help marks</code> &ndash; page down a bit to get the list of automatic marks based on
 last positions of various changes, jumps, and actions.</p></li>
<li><p><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/33.html">http://learnvimscriptthehardway.stevelosh.com/chapters/33.html</a> &ndash; seriously,
 this guy does a lot better explaining than me. Learn it the hard way, first,
 ask questions later.</p></li>
</ul>


<h2>Closing</h2>

<p>Thanks for getting this far. Do you have a better mapping for <code>&lt;BS&gt;</code>? Do you
have a more creative solution than typing <code>"_</code> to access the black hole
register? Let me know by commenting or share this post to some one who does.</p>
]]></content>
  </entry>
  
</feed>

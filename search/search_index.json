{
    "docs": [
        {
            "location": "/",
            "text": "Why, Scott, Why?!\n\u00b6\n\n\n\"Why, Scott, Why?!\" is a collection of posts and projects which catalog the developer's history in the field. The site's name reflects a common sentiment when working with him due to his proclivity for making tools for problems no one thinks they have. Need to solve \nWheel of Fortune\n puzzles from the command line? Neither has anyone else.\n\n\nWho is Scott?\n\u00b6\n\n\n\n\n\n\nScott makes software. His most interesting projects are tools spoken in passing, born of statements like, \"Wouldn't it be great if AWESOME_THING existed?\"\n\n\n\n\n\n\nScott makes posts. A teacher at heart who loves sharing tips and tricks to anyone who will listen. May these articles live on longer than him so future readers can appreciate how easy they have it now. Writing code in a terminal using Vim? What's that?!\n\n\n\n\n\n\nScott makes jokes. His sense of humor is an acquired taste full of puns and absurdities. Trail and error is used extensively throughout the process. One of them has \ngot\n to be funny.\n\n\n\n\n\n\nQ & A\n\u00b6\n\n\nShould SQL be taught in the class room?\n\u00b6\n\n\nYes. A language that describes data should be everyone's second language. It's supported by more business tools than \nJavascript\n and is easier to learn.\n\n\nHow to exit Vim?\n\u00b6\n\n\nType literally: \n:qa!\n then press \n<enter>\n\n\nWhat's your favorite language?\n\u00b6\n\n\nRuby. It's not the fastest, but the most succinct for my uses. This may change depending on the project. Some tasks need speed, some may already be mostly implemented in another language's ecosystem, and sometimes Ruby is a bad team fit if everyone isn't comfortable with it. If I'm on a desert, I'll write Ruby in the sand. \n10.times { p \"HELP\" }\n\n\nWhat projects have you worked on?\n\u00b6\n\n\nSee \nprojects\n.\n\n\nWhat about my question?\n\u00b6\n\n\nDo you have a question for Scott? Ask in the comments and he'll post an answer here or as a separate post.",
            "title": "Home"
        },
        {
            "location": "/#why-scott-why",
            "text": "\"Why, Scott, Why?!\" is a collection of posts and projects which catalog the developer's history in the field. The site's name reflects a common sentiment when working with him due to his proclivity for making tools for problems no one thinks they have. Need to solve  Wheel of Fortune  puzzles from the command line? Neither has anyone else.",
            "title": "Why, Scott, Why?!"
        },
        {
            "location": "/#who-is-scott",
            "text": "Scott makes software. His most interesting projects are tools spoken in passing, born of statements like, \"Wouldn't it be great if AWESOME_THING existed?\"    Scott makes posts. A teacher at heart who loves sharing tips and tricks to anyone who will listen. May these articles live on longer than him so future readers can appreciate how easy they have it now. Writing code in a terminal using Vim? What's that?!    Scott makes jokes. His sense of humor is an acquired taste full of puns and absurdities. Trail and error is used extensively throughout the process. One of them has  got  to be funny.",
            "title": "Who is Scott?"
        },
        {
            "location": "/#q-a",
            "text": "",
            "title": "Q &amp; A"
        },
        {
            "location": "/#should-sql-be-taught-in-the-class-room",
            "text": "Yes. A language that describes data should be everyone's second language. It's supported by more business tools than  Javascript  and is easier to learn.",
            "title": "Should SQL be taught in the class room?"
        },
        {
            "location": "/#how-to-exit-vim",
            "text": "Type literally:  :qa!  then press  <enter>",
            "title": "How to exit Vim?"
        },
        {
            "location": "/#whats-your-favorite-language",
            "text": "Ruby. It's not the fastest, but the most succinct for my uses. This may change depending on the project. Some tasks need speed, some may already be mostly implemented in another language's ecosystem, and sometimes Ruby is a bad team fit if everyone isn't comfortable with it. If I'm on a desert, I'll write Ruby in the sand.  10.times { p \"HELP\" }",
            "title": "What's your favorite language?"
        },
        {
            "location": "/#what-projects-have-you-worked-on",
            "text": "See  projects .",
            "title": "What projects have you worked on?"
        },
        {
            "location": "/#what-about-my-question",
            "text": "Do you have a question for Scott? Ask in the comments and he'll post an answer here or as a separate post.",
            "title": "What about my question?"
        },
        {
            "location": "/projects/",
            "text": "Projects\n\u00b6\n\n\nHere's a list of Scott's public projects. The Vim projects are the most popular. Most of the projects could and use some TLC, but they worked at one point in time and served the author well.\n\n\nSmoke\n\u00b6\n\n\nhttps://github.com/ddrscott/smoke\n\n\nMake your terminal smoke.\n\n\nFake Pipe / Anonymizer\n\u00b6\n\n\nhttps://github.com/ddrscott/fake_pipe\n\n\nA simply way to \nanonymize data\n for exporting to various departments for analytics and troubleshooting. This tool allows us to annotate a DB schema with special comments that can trigger different data mutations.\n\n\nThread Logger\n\u00b6\n\n\nhttps://github.com/ddrscott/thread_logger\n\n\nThis is a logger wrapper that keeps in memory a ring buffer of log lines isolated to the Thread.current. The main use of this is to have access to log history for when exception happen.\n\n\nAnsinine\n\u00b6\n\n\nhttps://github.com/ddrscott/ansinine\n\n\nAsinine things to do with ANSI escape codes.\n\n\nFlameboyant\n\u00b6\n\n\nhttps://github.com/ddrscott/flameboyant\n\n\nRuby profile with flame graphs.\n\n\nGCP Directory\n\u00b6\n\n\nhttps://github.com/ddrscott/gcp_directory\n\n\nListen to a directory for new files and send them to Google Cloud Print.\n\n\nGolumn\n\u00b6\n\n\nhttps://github.com/ddrscott/golumn\n\n\nGolumn is a desktop CSV viewer to replace the \ncolumn\n command. Think column with a \"g\". It behaves similar to the \ncolumn\n command, but with a graphic user interface. It bridges the command line and desktop divide by allowing us to present tabular data outside the confines of the terminal.\n\n\nHipaatitis\n\u00b6\n\n\nhttps://github.com/ddrscott/hipaatitis\n\n\nA fake reference medical CRM with fake data and naughty queries.\n\n\nListen SQL\n\u00b6\n\n\nhttps://github.com/ddrscott/listen_sql\n\n\nHelper scripts to monitor SQL file changes and execute them using psql.\n\n\nMath Finder\n\u00b6\n\n\nhttps://ddrscott.github.io/math-finder/\n\n\nFind math problems in the number grid. Kids love it. Solver included.\n\n\nModel Mirror\n\u00b6\n\n\nhttps://github.com/ddrscott/model_mirror\n\n\nThis project provides a basic viewer of your Rails models without needing to configure your model relationships in YACF (Yet Another Config File).\n\n\nModelMirror\n inspects your existing ActiveRecord associations using reflection to figure out the relationships.\n\n\nPoppy\n\u00b6\n\n\nhttps://github.com/ddrscott/poppy\n\n\nAlways on top resizable dialog displaying a URL.\n\n\nS3 Index\n\u00b6\n\n\nhttps://github.com/ddrscott/s3_index\n\n\nThis gem is intended to provide a catalog of S3 objects in order to easily query the metadata about those objects. S3 can provide a list of objects, but that is slow. With S3Index, you can save and query that list using standard database tools and SQL.\n\n\nSlack CLI\n\u00b6\n\n\nhttps://github.com/ddrscott/slack_cli\n\n\nPost Slack messages from CLI.\n\n\nSocket2me\n\u00b6\n\n\nhttps://github.com/ddrscott/socket2me\n\n\nExecute Javascript in the browser from the server using WebSockets.\n\n\nSQL Probe\n\u00b6\n\n\nhttps://github.com/ddrscott/sql_probe\n\n\nSQL Probe is a tool to trace SQL utilization in your application and provides a UI to investigate how tables are accessed.\n\n\nStream Stats\n\u00b6\n\n\nhttps://github.com/ddrscott/stream_stats\n\n\nOutput statistics about data from stdin while redirecting the data to stdout. The statistics are bytes read, bytes read per second, lines read, lines read per second and total seconds.\n\n\nSimilar to \npv\n command which I didn't know about until after I created this project.\n\n\nSudoku\n\u00b6\n\n\nhttps://github.com/ddrscott/sudoku\n\n\nSolver using backtracking prioritizing fewer choices first.\n\n\nvim-cycle-movements\n\u00b6\n\n\nhttps://github.com/ddrscott/vim-cycle-movements\n\n\nhttp://ddrscott.github.io/blog/2016/vim-toggle-movement\n\n\nProvides a mechanism to perform different movements based on repetition.\n\n\nvim-sendtext\n\u00b6\n\n\nhttps://github.com/ddrscott/vim-sendtext\n\n\nSendText-like support for running Vim with iTerm2\n\n\nvim-side-search\n\u00b6\n\n\nhttps://github.com/ddrscott/vim-side-search\n\n\nThis plugin adds ag output to a side buffer with quick navigation mappings using comfortable Vim conventions.\n\n\nvim-textobj-anyblock\n\u00b6\n\n\nhttps://github.com/ddrscott/vim-textobj-anyblock\n\n\nGuess the surrounding text object.\n\n\nvim-window\n\u00b6\n\n\nhttps://github.com/ddrscott/vim-window\n\n\nThis aims to make Vim window layouts a easier. The default mappings and commands make managing more than a couple windows difficult.\n\n\nwheeler\n\u00b6\n\n\nhttps://github.com/ddrscott/wheeler\n\n\nWheeler is a naive Wheel of Fortune solver. It does this by indexing sampled text from where ever into every possible contiguous combination of words up to a max phrase length.",
            "title": "Projects"
        },
        {
            "location": "/projects/#projects",
            "text": "Here's a list of Scott's public projects. The Vim projects are the most popular. Most of the projects could and use some TLC, but they worked at one point in time and served the author well.",
            "title": "Projects"
        },
        {
            "location": "/projects/#smoke",
            "text": "https://github.com/ddrscott/smoke  Make your terminal smoke.",
            "title": "Smoke"
        },
        {
            "location": "/projects/#fake-pipe-anonymizer",
            "text": "https://github.com/ddrscott/fake_pipe  A simply way to  anonymize data  for exporting to various departments for analytics and troubleshooting. This tool allows us to annotate a DB schema with special comments that can trigger different data mutations.",
            "title": "Fake Pipe / Anonymizer"
        },
        {
            "location": "/projects/#thread-logger",
            "text": "https://github.com/ddrscott/thread_logger  This is a logger wrapper that keeps in memory a ring buffer of log lines isolated to the Thread.current. The main use of this is to have access to log history for when exception happen.",
            "title": "Thread Logger"
        },
        {
            "location": "/projects/#ansinine",
            "text": "https://github.com/ddrscott/ansinine  Asinine things to do with ANSI escape codes.",
            "title": "Ansinine"
        },
        {
            "location": "/projects/#flameboyant",
            "text": "https://github.com/ddrscott/flameboyant  Ruby profile with flame graphs.",
            "title": "Flameboyant"
        },
        {
            "location": "/projects/#gcp-directory",
            "text": "https://github.com/ddrscott/gcp_directory  Listen to a directory for new files and send them to Google Cloud Print.",
            "title": "GCP Directory"
        },
        {
            "location": "/projects/#golumn",
            "text": "https://github.com/ddrscott/golumn  Golumn is a desktop CSV viewer to replace the  column  command. Think column with a \"g\". It behaves similar to the  column  command, but with a graphic user interface. It bridges the command line and desktop divide by allowing us to present tabular data outside the confines of the terminal.",
            "title": "Golumn"
        },
        {
            "location": "/projects/#hipaatitis",
            "text": "https://github.com/ddrscott/hipaatitis  A fake reference medical CRM with fake data and naughty queries.",
            "title": "Hipaatitis"
        },
        {
            "location": "/projects/#listen-sql",
            "text": "https://github.com/ddrscott/listen_sql  Helper scripts to monitor SQL file changes and execute them using psql.",
            "title": "Listen SQL"
        },
        {
            "location": "/projects/#math-finder",
            "text": "https://ddrscott.github.io/math-finder/  Find math problems in the number grid. Kids love it. Solver included.",
            "title": "Math Finder"
        },
        {
            "location": "/projects/#model-mirror",
            "text": "https://github.com/ddrscott/model_mirror  This project provides a basic viewer of your Rails models without needing to configure your model relationships in YACF (Yet Another Config File).  ModelMirror  inspects your existing ActiveRecord associations using reflection to figure out the relationships.",
            "title": "Model Mirror"
        },
        {
            "location": "/projects/#poppy",
            "text": "https://github.com/ddrscott/poppy  Always on top resizable dialog displaying a URL.",
            "title": "Poppy"
        },
        {
            "location": "/projects/#s3-index",
            "text": "https://github.com/ddrscott/s3_index  This gem is intended to provide a catalog of S3 objects in order to easily query the metadata about those objects. S3 can provide a list of objects, but that is slow. With S3Index, you can save and query that list using standard database tools and SQL.",
            "title": "S3 Index"
        },
        {
            "location": "/projects/#slack-cli",
            "text": "https://github.com/ddrscott/slack_cli  Post Slack messages from CLI.",
            "title": "Slack CLI"
        },
        {
            "location": "/projects/#socket2me",
            "text": "https://github.com/ddrscott/socket2me  Execute Javascript in the browser from the server using WebSockets.",
            "title": "Socket2me"
        },
        {
            "location": "/projects/#sql-probe",
            "text": "https://github.com/ddrscott/sql_probe  SQL Probe is a tool to trace SQL utilization in your application and provides a UI to investigate how tables are accessed.",
            "title": "SQL Probe"
        },
        {
            "location": "/projects/#stream-stats",
            "text": "https://github.com/ddrscott/stream_stats  Output statistics about data from stdin while redirecting the data to stdout. The statistics are bytes read, bytes read per second, lines read, lines read per second and total seconds.  Similar to  pv  command which I didn't know about until after I created this project.",
            "title": "Stream Stats"
        },
        {
            "location": "/projects/#sudoku",
            "text": "https://github.com/ddrscott/sudoku  Solver using backtracking prioritizing fewer choices first.",
            "title": "Sudoku"
        },
        {
            "location": "/projects/#vim-cycle-movements",
            "text": "https://github.com/ddrscott/vim-cycle-movements  http://ddrscott.github.io/blog/2016/vim-toggle-movement  Provides a mechanism to perform different movements based on repetition.",
            "title": "vim-cycle-movements"
        },
        {
            "location": "/projects/#vim-sendtext",
            "text": "https://github.com/ddrscott/vim-sendtext  SendText-like support for running Vim with iTerm2",
            "title": "vim-sendtext"
        },
        {
            "location": "/projects/#vim-side-search",
            "text": "https://github.com/ddrscott/vim-side-search  This plugin adds ag output to a side buffer with quick navigation mappings using comfortable Vim conventions.",
            "title": "vim-side-search"
        },
        {
            "location": "/projects/#vim-textobj-anyblock",
            "text": "https://github.com/ddrscott/vim-textobj-anyblock  Guess the surrounding text object.",
            "title": "vim-textobj-anyblock"
        },
        {
            "location": "/projects/#vim-window",
            "text": "https://github.com/ddrscott/vim-window  This aims to make Vim window layouts a easier. The default mappings and commands make managing more than a couple windows difficult.",
            "title": "vim-window"
        },
        {
            "location": "/projects/#wheeler",
            "text": "https://github.com/ddrscott/wheeler  Wheeler is a naive Wheel of Fortune solver. It does this by indexing sampled text from where ever into every possible contiguous combination of words up to a max phrase length.",
            "title": "wheeler"
        },
        {
            "location": "/blog/2018/getting-rusty-with-vim/",
            "text": "Getting Rusty with Vim\n\u00b6\n\n\n\n\nAfter dabbing in Go and Crystal, I figured I'd give Rust a try. Of course I\nused Vim along the way. Here are some notes I compiled after my first session.\n\n\n\n\n\nVim Setup\n\u00b6\n\n\nThere are 2 excellent Vim plugins which play nice with Rust. First is\n\nhttps://github.com/rust-lang/rust.vim\n which provides:\n\n\n\n\n... Rust file detection, syntax highlighting, formatting, Syntastic integration, and more.\n\n\n\n\nIt has nearly 1k stars, one of which is from me, and it's triple the stars of\n\nrust-mode\n for Emacs.\n\n\nThe second plugin is \nhttps://github.com/racer-rust/vim-racer\n which provides omni-complete and jump to definition. Both features are good enough that I don't need to use ctags. I've in fact overridden several default Vim mappings with \nvim-racer\n implementations:\n\n\nau\n \nFileType\n rust nmap \n<\nsilent\n>\n \n<\nC\n-\n]\n>\n \n<\nPlug\n>(\nrust\n-\ndef\n)\n\n\nau\n \nFileType\n rust nmap \n<\nsilent\n>\n \n<\nC\n-\nw\n><\nC\n-\n]\n>\n \n<\nPlug\n>(\nrust\n-\ndef\n-\nvertical\n)\n\n\nau\n \nFileType\n rust nmap \n<\nsilent\n>\n \n<\nC\n-\nw\n>\n} \n<\nPlug\n>(\nrust\n-\ndef\n-\nsplit\n)\n\n\nau\n \nFileType\n rust nmap \n<\nsilent\n>\n \n<\nC\n-\nk\n>\n \n<\nPlug\n>(\nrust\n-\ndoc\n)\n\n\n\n\n\nRust Experience\n\u00b6\n\n\nThe featured image is an implementation of a number guessing game. The game is\nfrom the Rust Tutorial Guide at\n\nhttps://doc.rust-lang.org/book/first-edition/guessing-game.html\n. I followed the\nguide sentence by sentence, line by line, and everything worked without\nadditional troubleshooting sessions. Good Job @rustlang! \n\n\nI massaged the code a little more to fool around and came up with the code in\nthe featured screen shot. The source is available in this \ngist\n. It's not the most exciting code I've\never written, but possibly the most painless of the new languages I've tried.\n\n\nWhen I came across some confusing language decisions. I posted a tweet about it:\n\n\nRust has clever tuple indexing, but square brackets would have been fine. What's wrong with `tuple[0]`? \n#rustlang\n \npic.twitter.com/E0VY70zxuV\n\u2014 Scott Pierce (@_ddrscott_) \nMarch 3, 2018\n\n\n\n\n\n@rustlang responded quickly with insightful information. They're totally getting\nthe Raving Fan Award this weekend!\n\n\nConclusion\n\u00b6\n\n\nRust is worth pursing with or without Vim. The feedback from the compiler\nand runtime errors is clear. The\n\nracer-rust\n completion utility gives\nall IDE super powers. And finally, I hear it's a pretty good language, too.  \nhttps://www.rust-lang.org",
            "title": "Getting Rusty with Vim"
        },
        {
            "location": "/blog/2018/getting-rusty-with-vim/#getting-rusty-with-vim",
            "text": "After dabbing in Go and Crystal, I figured I'd give Rust a try. Of course I\nused Vim along the way. Here are some notes I compiled after my first session.",
            "title": "Getting Rusty with Vim"
        },
        {
            "location": "/blog/2018/getting-rusty-with-vim/#vim-setup",
            "text": "There are 2 excellent Vim plugins which play nice with Rust. First is https://github.com/rust-lang/rust.vim  which provides:   ... Rust file detection, syntax highlighting, formatting, Syntastic integration, and more.   It has nearly 1k stars, one of which is from me, and it's triple the stars of rust-mode  for Emacs.  The second plugin is  https://github.com/racer-rust/vim-racer  which provides omni-complete and jump to definition. Both features are good enough that I don't need to use ctags. I've in fact overridden several default Vim mappings with  vim-racer  implementations:  au   FileType  rust nmap  < silent >   < C - ] >   < Plug >( rust - def )  au   FileType  rust nmap  < silent >   < C - w >< C - ] >   < Plug >( rust - def - vertical )  au   FileType  rust nmap  < silent >   < C - w > }  < Plug >( rust - def - split )  au   FileType  rust nmap  < silent >   < C - k >   < Plug >( rust - doc )",
            "title": "Vim Setup"
        },
        {
            "location": "/blog/2018/getting-rusty-with-vim/#rust-experience",
            "text": "The featured image is an implementation of a number guessing game. The game is\nfrom the Rust Tutorial Guide at https://doc.rust-lang.org/book/first-edition/guessing-game.html . I followed the\nguide sentence by sentence, line by line, and everything worked without\nadditional troubleshooting sessions. Good Job @rustlang!   I massaged the code a little more to fool around and came up with the code in\nthe featured screen shot. The source is available in this  gist . It's not the most exciting code I've\never written, but possibly the most painless of the new languages I've tried.  When I came across some confusing language decisions. I posted a tweet about it:  Rust has clever tuple indexing, but square brackets would have been fine. What's wrong with `tuple[0]`?  #rustlang   pic.twitter.com/E0VY70zxuV \u2014 Scott Pierce (@_ddrscott_)  March 3, 2018   @rustlang responded quickly with insightful information. They're totally getting\nthe Raving Fan Award this weekend!",
            "title": "Rust Experience"
        },
        {
            "location": "/blog/2018/getting-rusty-with-vim/#conclusion",
            "text": "Rust is worth pursing with or without Vim. The feedback from the compiler\nand runtime errors is clear. The racer-rust  completion utility gives\nall IDE super powers. And finally, I hear it's a pretty good language, too.   https://www.rust-lang.org",
            "title": "Conclusion"
        },
        {
            "location": "/blog/2017/vim-send-text/",
            "text": "Vim Send Text\n\u00b6\n\n\n\n\nAfter pairing with some Sublime users, I noticed a neat feature. Or more\naccurately, they were rubbing it in my face that their cute editor was better\nthan mine. The feature was \nSendText\n. Well, I\ncouldn't let Sublime users have all the fun, and apparently neither could a few\nother people.\n\n\n\n\n\nHistory\n\u00b6\n\n\nThere have been a few other implementations at this feature. These\nimplementations sent the text to a screen or tmux split. Since I don't use\neither, I couldn't use them a la carte.\n\n\n\n\nhttps://github.com/vim-scripts/tslime.vim\n\n\nhttps://github.com/jpalardy/vim-slime\n\n\nhttps://github.com/ervandew/screen\n\n\n\n\nThis next implementation was good. It's only flaw, IMHO, was it's mappings and\nnaming. The naming \"ISlime2\" is impossible for me to type on the first try. The\nmappings overlapped my existing mappings.\n\nISlime2\n did all the hard work\nAppleScript work and provides the Vim function to pass into the AppleScript.\n\n\nEnter \nvim-sendtext\n.\n\nvim-sendtext\n is a fork of \nISlime2\n.\nMy fork removes all the mappings, exposes useful internal functions, and adds\nrecommended mappings to the README.md.\n\n\nRecommended Mappings\n\u00b6\n\n\n\" Send current line\n\n\nnnoremap\n \n<\nsilent\n>\n \n<\nLeader\n>\ni\n<\nCR\n>\n :SendTextCurrentLine\n<\nCR\n>\n\n\n\n\" Send in/around text object - operation pending\n\n\nnnoremap\n \n<\nsilent\n>\n \n<\nLeader\n>\ni\n :\nset\n \nopfunc\n=\nsendtext#iTermSendOperator\n<\nCR\n>\ng\n@\n\n\n\" Send visual selection\n\n\nvnoremap\n \n<\nsilent\n>\n \n<\nLeader\n>\ni\n :\n<\nC\n-\nu\n>\ncall\n sendtext#iTermSendOperator\n(\nvisualmode\n(),\n \n1\n)<\nCR\n>\n\n\n\n\" Move to next line then send it\n\n\nnnoremap\n \n<\nsilent\n>\n \n<\nLeader\n>\nij\n :SendTextNextLine\n<\nCR\n>\n\n\n\n\" Move to previous line then send it\n\n\nnnoremap\n \n<\nsilent\n>\n \n<\nLeader\n>\nik :SendTextPreviousLine\n<\nCR\n>\n\n\n\n\n\nVim Operator Pending\n\u00b6\n\n\nOne of the main reasons to use Vim is Operator pending.  It's at the heart of\n\nvip\n, \ndip\n, \nciw\n, etc.\n\nvim-sendtext\n provides an operator\npending function so we can logically do \n{SEND}ap\n, \n{SEND}ip\n, \n{SEND}if\n, etc.\nThe identical function works in visual mode to help build confidence in our text\nobject targets.\n\n\nTo read more about operator pending functions and how to create them try:\n\n:\nh\n map\n-\noperator\n\n\n\nConclusion\n\u00b6\n\n\nHope \nvim-sendtext\n can remove some\nfeature envy from Sublime. Happy console hacking!",
            "title": "Vim Send Text"
        },
        {
            "location": "/blog/2017/vim-send-text/#vim-send-text",
            "text": "After pairing with some Sublime users, I noticed a neat feature. Or more\naccurately, they were rubbing it in my face that their cute editor was better\nthan mine. The feature was  SendText . Well, I\ncouldn't let Sublime users have all the fun, and apparently neither could a few\nother people.",
            "title": "Vim Send Text"
        },
        {
            "location": "/blog/2017/vim-send-text/#history",
            "text": "There have been a few other implementations at this feature. These\nimplementations sent the text to a screen or tmux split. Since I don't use\neither, I couldn't use them a la carte.   https://github.com/vim-scripts/tslime.vim  https://github.com/jpalardy/vim-slime  https://github.com/ervandew/screen   This next implementation was good. It's only flaw, IMHO, was it's mappings and\nnaming. The naming \"ISlime2\" is impossible for me to type on the first try. The\nmappings overlapped my existing mappings. ISlime2  did all the hard work\nAppleScript work and provides the Vim function to pass into the AppleScript.  Enter  vim-sendtext . vim-sendtext  is a fork of  ISlime2 .\nMy fork removes all the mappings, exposes useful internal functions, and adds\nrecommended mappings to the README.md.",
            "title": "History"
        },
        {
            "location": "/blog/2017/vim-send-text/#recommended-mappings",
            "text": "\" Send current line  nnoremap   < silent >   < Leader > i < CR >  :SendTextCurrentLine < CR >  \" Send in/around text object - operation pending  nnoremap   < silent >   < Leader > i  : set   opfunc = sendtext#iTermSendOperator < CR > g @ \" Send visual selection  vnoremap   < silent >   < Leader > i  : < C - u > call  sendtext#iTermSendOperator ( visualmode (),   1 )< CR >  \" Move to next line then send it  nnoremap   < silent >   < Leader > ij  :SendTextNextLine < CR >  \" Move to previous line then send it  nnoremap   < silent >   < Leader > ik :SendTextPreviousLine < CR >",
            "title": "Recommended Mappings"
        },
        {
            "location": "/blog/2017/vim-send-text/#vim-operator-pending",
            "text": "One of the main reasons to use Vim is Operator pending.  It's at the heart of vip ,  dip ,  ciw , etc. vim-sendtext  provides an operator\npending function so we can logically do  {SEND}ap ,  {SEND}ip ,  {SEND}if , etc.\nThe identical function works in visual mode to help build confidence in our text\nobject targets.  To read more about operator pending functions and how to create them try: : h  map - operator",
            "title": "Vim Operator Pending"
        },
        {
            "location": "/blog/2017/vim-send-text/#conclusion",
            "text": "Hope  vim-sendtext  can remove some\nfeature envy from Sublime. Happy console hacking!",
            "title": "Conclusion"
        },
        {
            "location": "/blog/2016/vim-toggle-movement/",
            "text": "Vim Toggle Movement: I Just Want to Go Home\n\u00b6\n\n\n\n\nI have a problem with the \n^\n key. I need its functionality, but its proximity is\ntoo far for either of my stubby index fingers. No vimrc change can physically move it\ncloser to me, but I have found a way to move its funtionality to another a key.\nA key which already knows how to go home. An alternate home. A home where my\nheart isn't. Enough drama, what's the problem?!?\n\n\n\n\n\nThe Problem\n\u00b6\n\n\nIn my daily coding, I have a deep seeded need to go to the first non-blank\ncharacter of a line. The only key that Vim provides for that functionality is \n^\n,\nthe hardest key to reach from the home row. A much more comfortable key to reach\nis \n0\n, but that shoots us past the first non-blank character all the way to\nthe left edge of the window. \n<Home>\n is the ugly step child of either option\nsince it's even harder to reach and takes us to the first column, too.\n\n\nIn case you don't believe me. Here's what the Vim document says:\n\n\n  0         To the first character of the line.  |exclusive|\n        motion.\n\n                *<Home>* *<kHome>*\n  <Home>  To the first character of the line.  |exclusive|\n        motion.  When moving up or down next, stay in same\n        TEXT column (if possible).  Most other commands stay\n        in the same SCREEN column.  <Home> works like \"1|\",\n        which differs from \"0\" when the line starts with a\n        <Tab>.\n\n                *^*\n  ^         To the first non-blank character of the line. |exclusive| motion.\n\n\n\n\nWhy can't I have a key that is easy to reach and takes me to the first\nnon-blank?!?\n\n\n\n\nI could swap the functionality of \n0\n and \n^\n:\n\n\nnnoremap 0 ^\nnnoremap ^ 0\n\n\n\n\nThis still forces me to reach for \n^\n when I need to need to get to that left\nedge. There must be a better way!\n\n\nThe Solution\n\u00b6\n\n\nLet's give \n0\n some super toggling powers. When I hit it the first time, I want it be\nbe like \n^\n. If I hit it again, I want it to finish its travels and go to the\nfirst column.\n\n\nSolution A\n\u00b6\n\n\nfunction\n!\n ToggleHomeZero\n()\n\n  \nlet\n pos \n=\n getpos\n(\n'.'\n)\n\n  execute \n\"normal! ^\"\n\n  \nif\n pos \n==\n getpos\n(\n'.'\n)\n\n    execute \n\"normal! 0\"\n\n  \nendif\n\n\nendfunction\n\n\n\nnnoremap\n \n0\n :\ncall\n ToggleHome\n()<\nCR\n>\n\n\n\n\n\nThis gets us exactly to the center of Venn diagrams heart:\n\n\nEasy to reach + First non-blank character + First column = Rainbow Colored Unicorn!\n\n\nSolution B\n\u00b6\n\n\nAfter enjoying staring at the function for a while, I realized we could add\nsuper toggling powers to other movements. Lets extract the \nnormal\n commands\ninto arguments and share the love with other keys!\n\n\nfunction\n!\n ToggleMovement\n(\nfirstOp\n,\n thenOp\n)\n\n  \nlet\n pos \n=\n getpos\n(\n'.'\n)\n\n  execute \n\"normal! \"\n . \na\n:firstOp\n  \nif\n pos \n==\n getpos\n(\n'.'\n)\n\n    execute \n\"normal! \"\n . \na\n:thenOp\n  \nendif\n\n\nendfunction\n\n\n\n\" The original carat 0 swap\n\n\nnnoremap\n \n<\nsilent\n>\n \n0\n :\ncall\n ToggleMovement\n(\n'^'\n,\n \n'0'\n)<\nCR\n>\n\n\n\n\" How about ; and ,\n\n\nnnoremap\n \n<\nsilent\n>\n ; :\ncall\n ToggleMovement\n(\n';'\n,\n \n','\n)<\nCR\n>\n\n\nnnoremap\n \n<\nsilent\n>\n \n,\n :\ncall\n ToggleMovement\n(\n','\n,\n \n';'\n)<\nCR\n>\n\n\n\n\" How about H and L\n\n\nnnoremap\n \n<\nsilent\n>\n H :\ncall\n ToggleMovement\n(\n'H'\n,\n \n'L'\n)<\nCR\n>\n\n\nnnoremap\n \n<\nsilent\n>\n L :\ncall\n ToggleMovement\n(\n'L'\n,\n \n'H'\n)<\nCR\n>\n\n\n\n\" How about G and gg\n\n\nnnoremap\n \n<\nsilent\n>\n G :\ncall\n ToggleMovement\n(\n'G'\n,\n \n'gg'\n)<\nCR\n>\n\n\nnnoremap\n \n<\nsilent\n>\n gg :\ncall\n ToggleMovement\n(\n'gg'\n,\n \n'G'\n)<\nCR\n>\n\n\n\n\n\nConclusion\n\u00b6\n\n\nToggleMovement\n is the gift that keeps on giving!\n\n\nWhat other movement can we add to the list?\nLet me know in the comments below.",
            "title": "Vim Toggle Movement: I Just Want to Go Home"
        },
        {
            "location": "/blog/2016/vim-toggle-movement/#vim-toggle-movement-i-just-want-to-go-home",
            "text": "I have a problem with the  ^  key. I need its functionality, but its proximity is\ntoo far for either of my stubby index fingers. No vimrc change can physically move it\ncloser to me, but I have found a way to move its funtionality to another a key.\nA key which already knows how to go home. An alternate home. A home where my\nheart isn't. Enough drama, what's the problem?!?",
            "title": "Vim Toggle Movement: I Just Want to Go Home"
        },
        {
            "location": "/blog/2016/vim-toggle-movement/#the-problem",
            "text": "In my daily coding, I have a deep seeded need to go to the first non-blank\ncharacter of a line. The only key that Vim provides for that functionality is  ^ ,\nthe hardest key to reach from the home row. A much more comfortable key to reach\nis  0 , but that shoots us past the first non-blank character all the way to\nthe left edge of the window.  <Home>  is the ugly step child of either option\nsince it's even harder to reach and takes us to the first column, too.  In case you don't believe me. Here's what the Vim document says:    0         To the first character of the line.  |exclusive|\n        motion.\n\n                *<Home>* *<kHome>*\n  <Home>  To the first character of the line.  |exclusive|\n        motion.  When moving up or down next, stay in same\n        TEXT column (if possible).  Most other commands stay\n        in the same SCREEN column.  <Home> works like \"1|\",\n        which differs from \"0\" when the line starts with a\n        <Tab>.\n\n                *^*\n  ^         To the first non-blank character of the line. |exclusive| motion.  Why can't I have a key that is easy to reach and takes me to the first\nnon-blank?!?   I could swap the functionality of  0  and  ^ :  nnoremap 0 ^\nnnoremap ^ 0  This still forces me to reach for  ^  when I need to need to get to that left\nedge. There must be a better way!",
            "title": "The Problem"
        },
        {
            "location": "/blog/2016/vim-toggle-movement/#the-solution",
            "text": "Let's give  0  some super toggling powers. When I hit it the first time, I want it be\nbe like  ^ . If I hit it again, I want it to finish its travels and go to the\nfirst column.",
            "title": "The Solution"
        },
        {
            "location": "/blog/2016/vim-toggle-movement/#solution-a",
            "text": "function !  ToggleHomeZero () \n   let  pos  =  getpos ( '.' ) \n  execute  \"normal! ^\" \n   if  pos  ==  getpos ( '.' ) \n    execute  \"normal! 0\" \n   endif  endfunction  nnoremap   0  : call  ToggleHome ()< CR >   This gets us exactly to the center of Venn diagrams heart:  Easy to reach + First non-blank character + First column = Rainbow Colored Unicorn!",
            "title": "Solution A"
        },
        {
            "location": "/blog/2016/vim-toggle-movement/#solution-b",
            "text": "After enjoying staring at the function for a while, I realized we could add\nsuper toggling powers to other movements. Lets extract the  normal  commands\ninto arguments and share the love with other keys!  function !  ToggleMovement ( firstOp ,  thenOp ) \n   let  pos  =  getpos ( '.' ) \n  execute  \"normal! \"  .  a :firstOp\n   if  pos  ==  getpos ( '.' ) \n    execute  \"normal! \"  .  a :thenOp\n   endif  endfunction  \" The original carat 0 swap  nnoremap   < silent >   0  : call  ToggleMovement ( '^' ,   '0' )< CR >  \" How about ; and ,  nnoremap   < silent >  ; : call  ToggleMovement ( ';' ,   ',' )< CR >  nnoremap   < silent >   ,  : call  ToggleMovement ( ',' ,   ';' )< CR >  \" How about H and L  nnoremap   < silent >  H : call  ToggleMovement ( 'H' ,   'L' )< CR >  nnoremap   < silent >  L : call  ToggleMovement ( 'L' ,   'H' )< CR >  \" How about G and gg  nnoremap   < silent >  G : call  ToggleMovement ( 'G' ,   'gg' )< CR >  nnoremap   < silent >  gg : call  ToggleMovement ( 'gg' ,   'G' )< CR >",
            "title": "Solution B"
        },
        {
            "location": "/blog/2016/vim-toggle-movement/#conclusion",
            "text": "ToggleMovement  is the gift that keeps on giving!  What other movement can we add to the list?\nLet me know in the comments below.",
            "title": "Conclusion"
        },
        {
            "location": "/blog/2016/yank-without-jank/",
            "text": "Yank Without Jank\n\u00b6\n\n\n\n\nFor all the great things Vim has to offer, it still has some inconsistencies with\nbasic editors that I simply can't unlearn. One of these nasties is moving the cursor\nafter a visual yank. Go ahead, try it: \nvipy\n. Where's your cursor? Where did\nyou expect it to be located? When you're in a boring editor and do\n\nshift-down-down-down <Cmd-c>\n, where's your cursor?  Where did you expect it\nto be located? This janky behaviour always throws me off for a moment, then I\ncompose myself, do a \n<backtick><greaterthan>\n to jump to the end of my selection, and \np\n.\n\n\nThere must be a better way!\n\n\n\nSolution A\n\u00b6\n\n\nRebind \ny\n to do exactly what we did above:\n\n\nvnoremap\n \ny\n \ny\n`\n>\n\n\n\n\n\nThis work and I lived with it for a few minutes, but it still wasn't perfect. I\nnoticed when I do line select using capital \nV\n the cursor would still move. The\nvertical motion was perfect, but horizontal motion was still jarring.\n\n\n\n\nSolution B\n\u00b6\n\n\nLet's try using marks to keep things in place:\n\n\nvnoremap\n \ny\n myy`\ny\n\n\nvnoremap\n Y myY`\ny\n\n\n\n\n\nThe capital \nY\n mapping is just in case we want to do a line wise yank from a\ncharacter wise selection.\n\n\n\n\nLike a well trained dog, the cursor stays even though you yank it.\n\n\nBONUS\n This snippet also takes over the \ny\n marker, so you can manually\n\n<backtick>y\n at a later time to continue yanking where you left off. This is great when\nyou're moving a lot of stuff around and want pick up where you last were. You\ncan also change the mark to capitals in the binding so it spans buffers, too.\n\n\nClosing\n\u00b6\n\n\nI've been using this setting for a while and noticed my blood pressure is way\ndown. No more yank anxiety means I'm a step closer to editing utopia!\n\n\nLet me know how this goes for you in the comments below.\n\n\nUpdates from Comments\n\u00b6\n\n\nCommenter @Krzysztof noticed Solution B wasn't allowing the user to specify\nthe target register. He was awesome enough to update the solution. Here's his\nsolution:\n\n\nvnoremap\n \n<\nexpr\n>\ny\n \n\"my\\\"\"\n . \nv\n:\nregister\n . \n\"y`y\"\n\n\n\n\n\nI've updated \n$MYVIMRC\n and it works great.\nThanks @Krzysztof for being awesome!",
            "title": "Yank Without Jank"
        },
        {
            "location": "/blog/2016/yank-without-jank/#yank-without-jank",
            "text": "For all the great things Vim has to offer, it still has some inconsistencies with\nbasic editors that I simply can't unlearn. One of these nasties is moving the cursor\nafter a visual yank. Go ahead, try it:  vipy . Where's your cursor? Where did\nyou expect it to be located? When you're in a boring editor and do shift-down-down-down <Cmd-c> , where's your cursor?  Where did you expect it\nto be located? This janky behaviour always throws me off for a moment, then I\ncompose myself, do a  <backtick><greaterthan>  to jump to the end of my selection, and  p .  There must be a better way!",
            "title": "Yank Without Jank"
        },
        {
            "location": "/blog/2016/yank-without-jank/#solution-a",
            "text": "Rebind  y  to do exactly what we did above:  vnoremap   y   y ` >   This work and I lived with it for a few minutes, but it still wasn't perfect. I\nnoticed when I do line select using capital  V  the cursor would still move. The\nvertical motion was perfect, but horizontal motion was still jarring.",
            "title": "Solution A"
        },
        {
            "location": "/blog/2016/yank-without-jank/#solution-b",
            "text": "Let's try using marks to keep things in place:  vnoremap   y  myy` y  vnoremap  Y myY` y   \nThe capital  Y  mapping is just in case we want to do a line wise yank from a\ncharacter wise selection.   Like a well trained dog, the cursor stays even though you yank it.  BONUS  This snippet also takes over the  y  marker, so you can manually <backtick>y  at a later time to continue yanking where you left off. This is great when\nyou're moving a lot of stuff around and want pick up where you last were. You\ncan also change the mark to capitals in the binding so it spans buffers, too.",
            "title": "Solution B"
        },
        {
            "location": "/blog/2016/yank-without-jank/#closing",
            "text": "I've been using this setting for a while and noticed my blood pressure is way\ndown. No more yank anxiety means I'm a step closer to editing utopia!  Let me know how this goes for you in the comments below.",
            "title": "Closing"
        },
        {
            "location": "/blog/2016/yank-without-jank/#updates-from-comments",
            "text": "Commenter @Krzysztof noticed Solution B wasn't allowing the user to specify\nthe target register. He was awesome enough to update the solution. Here's his\nsolution:  vnoremap   < expr > y   \"my\\\"\"  .  v : register  .  \"y`y\"   I've updated  $MYVIMRC  and it works great.\nThanks @Krzysztof for being awesome!",
            "title": "Updates from Comments"
        },
        {
            "location": "/blog/2016/sidescroll/",
            "text": "Sensible Horizontal Scroll in Vim\n\u00b6\n\n\n\n\nSometimes it's the little things that make a big difference, and this is about\nas small as it can get. Occasionally, I hold down \nl\n, \nw\n, or \ne\n to view long\nlines which have disappeared off the window. It's a bad habit and the penalty\nalways ruins my concentration. But after I found this setting, I'm free\nto cursor around like an innocent child unaware of death.\n\n\n\n\n\nTL;DR\n -- \nset sidescroll=1\n\n\nProblem\n\u00b6\n\n\nWhen \nset wrap\n is off, otherwise known as \nset nowrap\n, and a line is longer\nthan the window can handle, you'll need to scroll to see more of the line.\n\n{x}zl\n and \n{x}zh\n will scroll the screen right and left respectively.\nThat's a lot to remember to see some more text. Which leads me to hold\ndown \nw\n or \ne\n to get it done followed by janky behavior when the\ncursor gets to the edge of the window. The default behavior of revealing more\ntext is \u00bd a window width at a time. This abrupt jump throws off my fragile\nconcentration.\n\n\n\n\nSolution A\n\u00b6\n\n\nTurn on word wrapping. \nset wrap\n. Boring, but effective. You might also want\nto make word wrapping look nicer. I do that with the following settings.\n\n\nset\n breakindent\n\nset\n breakindentopt\n=\nsbr\n\n\n\" I use a unicode curly array with a <backslash><space>\n\n\nset\n \nshowbreak\n=\n\u21aa\n>\n\\\n\n\n\n\nThis of course doesn't solve the problem if, in fact, we want wrapping off.\n\n\nSolution B\n\u00b6\n\n\nset\n \nsidescroll\n=\n1\n\n\n\n\n\nThis simple setting makes Vim behave like every other plain editor. It will\nincrementally scroll one character at a time to reveal more text as needed.\n\n\n\n\nHere's the help doc to clear things up:\n\n\n'sidescroll' 'ss'   number  (default 0)\n                  global\n        The minimal number of columns to scroll horizontally.  Used only when\n        the 'wrap' option is off and the cursor is moved off of the screen.\n        When it is zero the cursor will be put in the middle of the screen.\n        When using a slow terminal set it to a large number or 0.  When using\n        a fast terminal use a small number or 1.  Not used for \"zh\" and \"zl\"\n        commands.\n\n'sidescrolloff' 'siso'  number (default 0)\nglobal\n        The minimal number of screen columns to keep to the left and to the\n        right of the cursor if 'nowrap' is set.  Setting this option to a\n        value greater than 0 while having |'sidescroll'| also at a non-zero\n        value makes some context visible in the line you are scrolling in\n        horizontally (except at beginning of the line).  Setting this option\n        to a large value (like 999) has the effect of keeping the cursor\n        horizontally centered in the window, as long as one does not come too\n        close to the beginning of the line.\n\n        Example: Try this together with 'sidescroll' and 'listchars' as\n                 in the following example to never allow the cursor to move\n                 onto the \"extends\" character:\n\n                 :set nowrap sidescroll=1 listchars=extends:>,precedes:<\n                 :set sidescrolloff=1\n\n\n\n\nSeems like the default was intended for a \"slow terminal\". If you're using a\nslow terminal while editing a large amount of unwrapped text, I'd recommend\ngetting a computer from this millennia and enabling \nsidescroll\n.\nAlso note that a sensible example is shown in the \nsidescrolloff\n section.\n\n\nOff Topic...\n\u00b6\n\n\nIt's interesting to study all the decisions made due to slow terminals.\nTry \n:help slow-terminal\n for a quick look and try \n:helpgrep slow\n to see way\nmore mentions. Use \n:help helpgrep\n if you didn't know about \nhelpgrep\n :)\n\n\nClosing\n\u00b6\n\n\nI'm sure you're thinking why so many words were written for a single setting.\nSimilar to my previous post about \nYank without Jank\n,\nthese unexpected janky behaviors cause anxiety. Anxiety that usually can't be\nidentified or resolved in the heat of a coding session, but is there, wading in\nthe weeds, ready to pounce at your next stray keystroke. As a student of Vim, I\nwant identify and resolve these issues so I can get back to why I like Vim;\nusing the dot operator.",
            "title": "Sensible Horizontal Scroll in Vim"
        },
        {
            "location": "/blog/2016/sidescroll/#sensible-horizontal-scroll-in-vim",
            "text": "Sometimes it's the little things that make a big difference, and this is about\nas small as it can get. Occasionally, I hold down  l ,  w , or  e  to view long\nlines which have disappeared off the window. It's a bad habit and the penalty\nalways ruins my concentration. But after I found this setting, I'm free\nto cursor around like an innocent child unaware of death.   TL;DR  --  set sidescroll=1",
            "title": "Sensible Horizontal Scroll in Vim"
        },
        {
            "location": "/blog/2016/sidescroll/#problem",
            "text": "When  set wrap  is off, otherwise known as  set nowrap , and a line is longer\nthan the window can handle, you'll need to scroll to see more of the line. {x}zl  and  {x}zh  will scroll the screen right and left respectively.\nThat's a lot to remember to see some more text. Which leads me to hold\ndown  w  or  e  to get it done followed by janky behavior when the\ncursor gets to the edge of the window. The default behavior of revealing more\ntext is \u00bd a window width at a time. This abrupt jump throws off my fragile\nconcentration.",
            "title": "Problem"
        },
        {
            "location": "/blog/2016/sidescroll/#solution-a",
            "text": "Turn on word wrapping.  set wrap . Boring, but effective. You might also want\nto make word wrapping look nicer. I do that with the following settings.  set  breakindent set  breakindentopt = sbr  \" I use a unicode curly array with a <backslash><space>  set   showbreak = \u21aa > \\  This of course doesn't solve the problem if, in fact, we want wrapping off.",
            "title": "Solution A"
        },
        {
            "location": "/blog/2016/sidescroll/#solution-b",
            "text": "set   sidescroll = 1   This simple setting makes Vim behave like every other plain editor. It will\nincrementally scroll one character at a time to reveal more text as needed.   Here's the help doc to clear things up:  'sidescroll' 'ss'   number  (default 0)\n                  global\n        The minimal number of columns to scroll horizontally.  Used only when\n        the 'wrap' option is off and the cursor is moved off of the screen.\n        When it is zero the cursor will be put in the middle of the screen.\n        When using a slow terminal set it to a large number or 0.  When using\n        a fast terminal use a small number or 1.  Not used for \"zh\" and \"zl\"\n        commands.\n\n'sidescrolloff' 'siso'  number (default 0)\nglobal\n        The minimal number of screen columns to keep to the left and to the\n        right of the cursor if 'nowrap' is set.  Setting this option to a\n        value greater than 0 while having |'sidescroll'| also at a non-zero\n        value makes some context visible in the line you are scrolling in\n        horizontally (except at beginning of the line).  Setting this option\n        to a large value (like 999) has the effect of keeping the cursor\n        horizontally centered in the window, as long as one does not come too\n        close to the beginning of the line.\n\n        Example: Try this together with 'sidescroll' and 'listchars' as\n                 in the following example to never allow the cursor to move\n                 onto the \"extends\" character:\n\n                 :set nowrap sidescroll=1 listchars=extends:>,precedes:<\n                 :set sidescrolloff=1  Seems like the default was intended for a \"slow terminal\". If you're using a\nslow terminal while editing a large amount of unwrapped text, I'd recommend\ngetting a computer from this millennia and enabling  sidescroll .\nAlso note that a sensible example is shown in the  sidescrolloff  section.",
            "title": "Solution B"
        },
        {
            "location": "/blog/2016/sidescroll/#off-topic",
            "text": "It's interesting to study all the decisions made due to slow terminals.\nTry  :help slow-terminal  for a quick look and try  :helpgrep slow  to see way\nmore mentions. Use  :help helpgrep  if you didn't know about  helpgrep  :)",
            "title": "Off Topic..."
        },
        {
            "location": "/blog/2016/sidescroll/#closing",
            "text": "I'm sure you're thinking why so many words were written for a single setting.\nSimilar to my previous post about  Yank without Jank ,\nthese unexpected janky behaviors cause anxiety. Anxiety that usually can't be\nidentified or resolved in the heat of a coding session, but is there, wading in\nthe weeds, ready to pounce at your next stray keystroke. As a student of Vim, I\nwant identify and resolve these issues so I can get back to why I like Vim;\nusing the dot operator.",
            "title": "Closing"
        },
        {
            "location": "/blog/2016/side-search/",
            "text": "Vim Side Search: Making Search Fun Again\n\u00b6\n\n\n\n\nThe \nquickfix\n feature is nice, but it doesn't give enough context around the\nsearch term that leads to use \nag\n from terminal and switch back and forth\nbetween programs. I do this search dance every day and I've had it! There must\nbe better way!\n\n\n\n\n\nProblem\n\u00b6\n\n\n\nLook at the \nquickfix\n window above. It spends most of its space showing the file name\nof the hit, then the remainder is spent on text around it. In projects using \n\nRails Engines\n with deeply nested\ndirectory structures, this often leaves me with just a bunch of paths in the \nquickfix\n.\n\n\nSolution A - The Unix Way\n\u00b6\n\n\nSome may argue Vim isn't suppose to do search. Vim rightly delegates to the\n\nUnix philosophy\n by\nallowing an external program do its searching. Let's try that for this\nsolution using \ngrep\n, \nack\n, and \nag\n.\n\n\n\n\nWe've run the 3 separate programs (normally, I would only use \nag\n) then\nbrowse the results to see if there's an interesting file. At this point I start\nusing my handy-dandy mouse to scroll around, precisely highlight the path of\ninterest, copy, and type \nvim <Paste>\n. Intuitive? Yes. Fast? No!\n\n\nMaybe I should use \ntmux\n or \nscreen\n so I don't need to mouse around, but\ntrying to select a path is still pretty slow for me and requires more cognitive\nload than I have patience for. After all, I'm trying to concentrate on a\nrefactor or something, not how to open a bunch of files. Should I practice more?\nYes. Will I? No!\n\n\nWe're going to use \nag\n from now on, since it's faster than \nack\n, and has\nprettier output than \ngrep\n. I really really really tried to get \ngrep\n to\noutput for humans, but couldn't figure it out.\n\n\nSolution B - Vim without Quickfix\n\u00b6\n\n\nLet Vim do some work for us.\n\n\nvim `ag --ignore=\\*.{css,scss} -l help` +'/help'\n\n\n\n\nWhat's that?!? Open Vim passing the result of \nag\n command. \nag\n is run with\nsome file exclusions, \n-l\n only file names, and \nhelp\n is the search term.\n\n+'/help'\n tells Vim to immediately start searching for 'help'.\n\n\nAfter all that, Vim should have started with a bunch of buffers. View them with\n\n:ls\n. Take notice of the buffer numbers to see how many files were found. Use\n\nn\n and \nN\n to jump through search matches in the file. Use \n:bn\n to go to the\nnext buffer and start hitting \nn\n again to cycle through the changes. If the\nnumber of files is small enough, you may be able to use \n:ball\n to open every\nbuffer in its own window.\n\n\nThats a lot of work to jump through changes. Good thing the \nquickfix\n exists.\n\n\nSolution C - Quickfix\n\u00b6\n\n\nThis is here for posterity. \nquickfix\n DOES make cycling through changes easier\nthan Solution B, but as I stated in the intro, it doesn't give the context that\nwe want.\n\n\nThoughtbot has a pretty good article\n\nabout how to setup Vim to use \nag\n. Once you do that, you can \n:grep help\n to\nget the following output:\n\n\n\n\nUse \n:cnext\n, \n:cprev\n, \n:cfirst\n, \n:clast\n to go to next, previous, first, and\nlast \nquickfix\n result respectively. Map those to keys to make it easier to\nnavigate.\n\n\nnnoremap [q :cprev<CR>\nnnoremap ]q :cnext<CR>\nnnoremap [Q :cfirst<CR>\nnnoremap ]Q :clast<CR>\n\n\n\n\nGet more help about \nquickfix\n using \n:help quickfix\n. Cry after realizing\neven \n:help quickfix\n can't show more context. I'll be here when you're done.\n\n\nSolution D - Side Search Plugin\n\u00b6\n\n\nSo how do we get the best of both worlds? How do we enter the land of a thousand\nwives/husbands? How do we get \nag\n output and quick navigation? For me, it\nwas writing a plugin in. For you it's using it. \nhttps://github.com/ddrscott/vim-side-search\n\n\nAfter installing the plugin using your favorite package manager, you'll have\naccess to the following functionality:\n\n\n\n\nThings to notice:\n\n\n\n\nag\n output is in a buffer with additional syntax highlighting!\n\n\nn\n and \nN\n used to jump to matches. Regular Vim navigation works, too!\n\n\n<CR>\n and \n<C-w><CR>\n used to open change and jump to change!\n\n\nNumber of matches shown in the buffer name!\n\n\nI use too many exclamation points!!!\n\n\n\n\nThe plugin's \nREADME\n has more details.\n\n\nClosing\n\u00b6\n\n\nI've been using this plugin ever since its inception and don't know where I'd\nbe without it. It gets some inspiration from \nfugitive's\n\n\n:Gstatus\n mode/buffer, and I wish there were more plugins that added\nfunctionality from \nstdout\n instead of transforming it into a different format. Unix\ntools makers spend a lot of time thinking about the output. Let's use it to our\nadvantage.\n\n\nI've learn a lot creating this plugin and plan to write about it in a future post.\nDo you love it or hate it? Have more ideas for Side Search? Please let me know what you\nthink of it. Have more ideas or issues for Side Search? Hit me up on \nGithub\n.\n\n\nReferences\n\u00b6\n\n\n\n\nThe Silver Searcher\n by Geoff Greer\n\n\nman ag\n\n\nman grep\n\n\nman tmux\n\n\nman screen\n\n\n:help quickfix\n\n\nFaster Grepping in Vim\n by Thoughtbot\n\n\nThe number 12\n\n\n\n\nIn The News\n\u00b6\n\n\n\n\nHacker News\n\n\nReddit",
            "title": "Vim Side Search: Making Search Fun Again"
        },
        {
            "location": "/blog/2016/side-search/#vim-side-search-making-search-fun-again",
            "text": "The  quickfix  feature is nice, but it doesn't give enough context around the\nsearch term that leads to use  ag  from terminal and switch back and forth\nbetween programs. I do this search dance every day and I've had it! There must\nbe better way!",
            "title": "Vim Side Search: Making Search Fun Again"
        },
        {
            "location": "/blog/2016/side-search/#problem",
            "text": "Look at the  quickfix  window above. It spends most of its space showing the file name\nof the hit, then the remainder is spent on text around it. In projects using  Rails Engines  with deeply nested\ndirectory structures, this often leaves me with just a bunch of paths in the  quickfix .",
            "title": "Problem"
        },
        {
            "location": "/blog/2016/side-search/#solution-a-the-unix-way",
            "text": "Some may argue Vim isn't suppose to do search. Vim rightly delegates to the Unix philosophy  by\nallowing an external program do its searching. Let's try that for this\nsolution using  grep ,  ack , and  ag .   We've run the 3 separate programs (normally, I would only use  ag ) then\nbrowse the results to see if there's an interesting file. At this point I start\nusing my handy-dandy mouse to scroll around, precisely highlight the path of\ninterest, copy, and type  vim <Paste> . Intuitive? Yes. Fast? No!  Maybe I should use  tmux  or  screen  so I don't need to mouse around, but\ntrying to select a path is still pretty slow for me and requires more cognitive\nload than I have patience for. After all, I'm trying to concentrate on a\nrefactor or something, not how to open a bunch of files. Should I practice more?\nYes. Will I? No!  We're going to use  ag  from now on, since it's faster than  ack , and has\nprettier output than  grep . I really really really tried to get  grep  to\noutput for humans, but couldn't figure it out.",
            "title": "Solution A - The Unix Way"
        },
        {
            "location": "/blog/2016/side-search/#solution-b-vim-without-quickfix",
            "text": "Let Vim do some work for us.  vim `ag --ignore=\\*.{css,scss} -l help` +'/help'  What's that?!? Open Vim passing the result of  ag  command.  ag  is run with\nsome file exclusions,  -l  only file names, and  help  is the search term. +'/help'  tells Vim to immediately start searching for 'help'.  After all that, Vim should have started with a bunch of buffers. View them with :ls . Take notice of the buffer numbers to see how many files were found. Use n  and  N  to jump through search matches in the file. Use  :bn  to go to the\nnext buffer and start hitting  n  again to cycle through the changes. If the\nnumber of files is small enough, you may be able to use  :ball  to open every\nbuffer in its own window.  Thats a lot of work to jump through changes. Good thing the  quickfix  exists.",
            "title": "Solution B - Vim without Quickfix"
        },
        {
            "location": "/blog/2016/side-search/#solution-c-quickfix",
            "text": "This is here for posterity.  quickfix  DOES make cycling through changes easier\nthan Solution B, but as I stated in the intro, it doesn't give the context that\nwe want.  Thoughtbot has a pretty good article \nabout how to setup Vim to use  ag . Once you do that, you can  :grep help  to\nget the following output:   Use  :cnext ,  :cprev ,  :cfirst ,  :clast  to go to next, previous, first, and\nlast  quickfix  result respectively. Map those to keys to make it easier to\nnavigate.  nnoremap [q :cprev<CR>\nnnoremap ]q :cnext<CR>\nnnoremap [Q :cfirst<CR>\nnnoremap ]Q :clast<CR>  Get more help about  quickfix  using  :help quickfix . Cry after realizing\neven  :help quickfix  can't show more context. I'll be here when you're done.",
            "title": "Solution C - Quickfix"
        },
        {
            "location": "/blog/2016/side-search/#solution-d-side-search-plugin",
            "text": "So how do we get the best of both worlds? How do we enter the land of a thousand\nwives/husbands? How do we get  ag  output and quick navigation? For me, it\nwas writing a plugin in. For you it's using it.  https://github.com/ddrscott/vim-side-search  After installing the plugin using your favorite package manager, you'll have\naccess to the following functionality:   Things to notice:   ag  output is in a buffer with additional syntax highlighting!  n  and  N  used to jump to matches. Regular Vim navigation works, too!  <CR>  and  <C-w><CR>  used to open change and jump to change!  Number of matches shown in the buffer name!  I use too many exclamation points!!!   The plugin's  README  has more details.",
            "title": "Solution D - Side Search Plugin"
        },
        {
            "location": "/blog/2016/side-search/#closing",
            "text": "I've been using this plugin ever since its inception and don't know where I'd\nbe without it. It gets some inspiration from  fugitive's  :Gstatus  mode/buffer, and I wish there were more plugins that added\nfunctionality from  stdout  instead of transforming it into a different format. Unix\ntools makers spend a lot of time thinking about the output. Let's use it to our\nadvantage.  I've learn a lot creating this plugin and plan to write about it in a future post.\nDo you love it or hate it? Have more ideas for Side Search? Please let me know what you\nthink of it. Have more ideas or issues for Side Search? Hit me up on  Github .",
            "title": "Closing"
        },
        {
            "location": "/blog/2016/side-search/#references",
            "text": "The Silver Searcher  by Geoff Greer  man ag  man grep  man tmux  man screen  :help quickfix  Faster Grepping in Vim  by Thoughtbot  The number 12",
            "title": "References"
        },
        {
            "location": "/blog/2016/side-search/#in-the-news",
            "text": "Hacker News  Reddit",
            "title": "In The News"
        },
        {
            "location": "/blog/2016/making-a-window-submode/",
            "text": "Making a Window Submode in Vim\n\u00b6\n\n\n\nI found a plugin that is changing my Vim-tire life! This\n\nplugin\n is so awesome it should be\nbuilt into default Vim. What does the \nplugin\n\ndo? It enables the creation of new submodes. Why would a person want \nmore\n modes?!?\nIsn't dealing with modes the main deterrent for new Vim users? Isn't Normal,\nInsert, Command-line, Visual, Select, and Operator-pending enough? (Did I miss one?)\nLet's try out a new submode and see what happens.\n\n\n\nProblem\n\u00b6\n\n\nWindow commands are prefixed with \n<C-w>\n. Want to create a horizontal split?\nTry \n<C-w>s\n, didn't mean to do that and want to do vertical split? \n<C-w>q<C-w>v\n.\nWant to resize the vertical split \n50<C-w>>\n? Too wide? Narrow it with \n5<C-w><\n.\nMove back to the other window? \n<C-w>p\n or \n<C-w>w\n.\n\n\nAre your fingers getting tired? After I get the windows just right using default\nmappings my fingers are crying for mercy.\n\n\nHere's a short list of common default window commands:\n\n\" Change window focus\n\n{\nn\n}\n<\nC\n-\nw\n>\nh\n   move cursor \nleft\n  {\nn\n} \nwindow\n\n{\nn\n}\n<\nC\n-\nw\n>\nl\n   move cursor \nright\n {\nn\n} \nwindow\n\n{\nn\n}\n<\nC\n-\nw\n>\nj\n   move cursor down  {\nn\n} \nwindow\n\n{\nn\n}\n<\nC\n-\nw\n>\nk\n   move cursor \nup\n    {\nn\n} \nwindow\n\n\n\n\" Move window\n\n\n<\nC\n-\nw\n>\nH   move \nwindow\n far \nleft\n\n\n<\nC\n-\nw\n>\nL   move \nwindow\n far \nright\n\n\n<\nC\n-\nw\n>\nJ   move \nwindow\n far bottom\n\n<\nC\n-\nw\n>\nK   move \nwindow\n far \ntop\n\n\n\n\" Change size\n\n{\nn\n}\n<\nC\n-\nw\n>+\n  increase height by {\nn\n} rows\n{\nn\n}\n<\nC\n-\nw\n>-\n  decrease height by {\nn\n} rows\n{\nn\n}\n<\nC\n-\nw\n><\n  decrease width by {\nn\n} \ncolumns\n\n{\nn\n}\n<\nC\n-\nw\n>>\n  increase width by {\nn\n} \ncolumns\n\n   \n<\nC\n-\nw\n>|\n  maximize width\n   \n<\nC\n-\nw\n>\n_  maximize height\n   \n<\nC\n-\nw\n>=\n  equalize sizes\n\n\n\nFor a comprehensive list of window commands try \n:help windows.txt\n.\n\n\nSolution A\n\u00b6\n\n\nThe most common solution to window-command-itis is to map other keys to these\ncommon actions so to include the \n<C-w>\n prefix.\n\n\nFrom \nspf13-vim\n:\n\nmap \n<\nC\n-\nJ\n>\n \n<\nC\n-\nW\n>\nj\n<\nC\n-\nW\n>\n_\nmap \n<\nC\n-\nK\n>\n \n<\nC\n-\nW\n>\nk\n<\nC\n-\nW\n>\n_\nmap \n<\nC\n-\nL\n>\n \n<\nC\n-\nW\n>\nl\n<\nC\n-\nW\n>\n_\nmap \n<\nC\n-\nH\n>\n \n<\nC\n-\nW\n>\nh\n<\nC\n-\nW\n>\n_\n\n\" Note: They go one extra by maximizing the height after entering the split.\n\n\n\n\nFrom \nThoughbot\n:\n\nnnoremap\n \n<\nC\n-\nJ\n>\n \n<\nC\n-\nW\n><\nC\n-\nJ\n>\n\n\nnnoremap\n \n<\nC\n-\nK\n>\n \n<\nC\n-\nW\n><\nC\n-\nK\n>\n\n\nnnoremap\n \n<\nC\n-\nL\n>\n \n<\nC\n-\nW\n><\nC\n-\nL\n>\n\n\nnnoremap\n \n<\nC\n-\nH\n>\n \n<\nC\n-\nW\n><\nC\n-\nH\n>\n\n\n\n\nThis has been the accepted solution for most, but it takes away so many\nconvenient keys. And in some cases, it even overrides default behaviour.\n\n<C-L>\n, I miss you. \nC-H\n, isn't that also \n<BS>\n? Guess I won't be using\nyou either.\n\n\nSolution B - Submode to the Rescue\n\u00b6\n\n\nThis entire solution depends on \nkana/vim-submode\n,\nI consider it one of Japan's national treasures along with ninjas and ramen.\nUnfortunately, Kana's example use of submodes is a little underwhelming:\nundo/redo using \ng-\n and \ng+\n. I agree with the author that using \ng-\n and\n\ng+\n is not convenient, and using \ng++++-++-+\n is easier, but the solution\nfor that was simply \nu\n and \n<C-R>\n. I feel a better application for a new\nsubmode is window management. Imagine if resizing a split was \n<C-w>++++++++\n\nor \n<C-w>------=->>>>>>>><>\n or changing cursor location was \n<C-w>hjlll\n\nor moving was \n<C-w>HjKLkjh\n. Imagine no more!\n\n\nFirst, install the plugin. If you're not sure how to install a plugin, try\n\njunegunn/vim-plug\n. Next, add the\nfollowing to your \n$MYVIMRC\n.\n\n\n\" A message will appear in the message line when you're in a submode\n\n\n\" and stay there until the mode has existed.\n\n\nlet\n \ng\n:submode_always_show_submode \n=\n \n1\n\n\n\n\" We're taking over the default <C-w> setting. Don't worry we'll do\n\n\n\" our best to put back the default functionality.\n\n\ncall\n submode#enter_with\n(\n'window'\n,\n \n'n'\n,\n \n''\n,\n \n'<C-w>'\n)\n\n\n\n\" Note: <C-c> will also get you out to the mode without this mapping.\n\n\n\" Note: <C-[> also behaves as <ESC>\n\n\ncall\n submode#leave_with\n(\n'window'\n,\n \n'n'\n,\n \n''\n,\n \n'<ESC>'\n)\n\n\n\n\" Go through every letter\n\n\nfor\n \nkey\n \nin\n [\n'a'\n,\n'b'\n,\n'c'\n,\n'd'\n,\n'e'\n,\n'f'\n,\n'g'\n,\n'h'\n,\n'i'\n,\n'j'\n,\n'k'\n,\n'l'\n,\n'm'\n,\n\n\\           \n'n'\n,\n'o'\n,\n'p'\n,\n'q'\n,\n'r'\n,\n's'\n,\n't'\n,\n'u'\n,\n'v'\n,\n'w'\n,\n'x'\n,\n'y'\n,\n'z'\n]\n\n  \" maps lowercase, uppercase and <C-key>\n\n  \ncall\n submode#map\n(\n'window'\n,\n \n'n'\n,\n \n''\n,\n \nkey\n,\n \n'<C-w>'\n . \nkey\n)\n\n  \ncall\n submode#map\n(\n'window'\n,\n \n'n'\n,\n \n''\n,\n toupper\n(\nkey\n),\n \n'<C-w>'\n . toupper\n(\nkey\n))\n\n  \ncall\n submode#map\n(\n'window'\n,\n \n'n'\n,\n \n''\n,\n \n'<C-'\n . \nkey\n . \n'>'\n,\n \n'<C-w>'\n . \n'<C-'\n.\nkey\n . \n'>'\n)\n\n\nendfor\n\n\n\" Go through symbols. Sadly, '|', not supported in submode plugin.\n\n\nfor\n \nkey\n \nin\n [\n'='\n,\n'_'\n,\n'+'\n,\n'-'\n,\n'<'\n,\n'>'\n]\n  \ncall\n submode#map\n(\n'window'\n,\n \n'n'\n,\n \n''\n,\n \nkey\n,\n \n'<C-w>'\n . \nkey\n)\n\n\nendfor\n\n\n\n\" Old way, just in case.\n\n\nnnoremap\n \n<\nLeader\n>\nw\n \n<\nC\n-\nw\n>\n\n\n\n\n\nAfter \n:source $MYVIMRC\n, you'll have a glorious new submode in Vim.\nYou can see I named it \nwindow\n mode. Can you guess how to get into \nwindow\n mode?\n\n<C-w>\n, the normal prefix used to do any \nwincmd\n. If this is too drastic, feel\nfree to change line #7 to something else. Just replace \n<C-w>\n with a different\nnormal mapping.\n\n\nLet's give it a test drive.\n\n\nI know you can't see what keys I'm pressing, but I guarantee I only pressed\n\n<C-w>\n once. I also didn't have to remember any new key bindings. The\nhesitation in the demo is the resistance to hitting \n<C-w>\n every time, which\nI'll get over soon enough.\n\n\nBonus Mappings\n\u00b6\n\n\nBut wait there's more! In case I haven't provided enough tips for one post,\nhere's the overrides I have in \n$MYVIMRC\n to make windowing even better.\n\n\n\" I don't like <C-w>q, <C-w>c won't exit Vim when it's the last window.\n\n\ncall\n submode#map\n(\n'window'\n,\n \n'n'\n,\n \n''\n,\n \n'q'\n,\n \n'<C-w>c'\n)\n\n\ncall\n submode#map\n(\n'window'\n,\n \n'n'\n,\n \n''\n,\n \n'<C-q>'\n,\n \n'<C-w>c'\n)\n\n\n\n\" <lowercase-pipe> sets the width to 80 columns, pipe (<S-\\>) by default\n\n\n\" maximizes the width.\n\n\ncall\n submode#map\n(\n'window'\n,\n \n'n'\n,\n \n''\n,\n \n'\\'\n,\n \n':vertical resize 80<CR>'\n)\n\n\n\n\" Resize faster\n\n\ncall\n submode#map\n(\n'window'\n,\n \n'n'\n,\n \n''\n,\n \n'+'\n,\n \n'3<C-w>+'\n)\n\n\ncall\n submode#map\n(\n'window'\n,\n \n'n'\n,\n \n''\n,\n \n'-'\n,\n \n'3<C-w>-'\n)\n\n\ncall\n submode#map\n(\n'window'\n,\n \n'n'\n,\n \n''\n,\n \n'<'\n,\n \n'10<C-w><'\n)\n\n\ncall\n submode#map\n(\n'window'\n,\n \n'n'\n,\n \n''\n,\n \n'>'\n,\n \n'10<C-w>>'\n)\n\n\n\n\n\nRainbows without Unicorns\n\u00b6\n\n\nWhile learning this new way of windowing, there have been a few negatives:\n\n\n\n\n\n\nI forget that I'm in window mode and get disoriented when I think I'm moving\n   the cursor within a buffer, but it jumps around to other splits.\n\n\n\n\n\n\nFor one off window commands, I have to hit an extra key to get out of window\n   mode or wait for the timeout.\n\n\n\n\n\n\nWhen I use some one else's computer, I'm useless.\n\n\n\n\n\n\nI think most of these annoyances will go away with time, and the benefits\novertime in keystroke savings are non-trivial. As for #3, regardless of submodes,\nthe brain freeze will never go away, because no one thinks as strangely as me,\nand that's a Good Thing\u2122.\n\n\nThanks\n\u00b6\n\n\nShout-out to Kana Natsuno, @kana1, \nhttp://whileimautomaton.net/\n, \nhttps://github.com/kana\n . None\nof this awesomeness would be possible without \nhttps://github.com/kana/vim-submode\n . She\nmakes some totally sweet plug-ins. Check out her stuff. You won't regret it!\n\n\nLet me know what you think. Am I crazy? What other things deserve a submode?\nHit me up in the comments below! Thanks for reading!",
            "title": "Making a Window Submode in Vim"
        },
        {
            "location": "/blog/2016/making-a-window-submode/#making-a-window-submode-in-vim",
            "text": "I found a plugin that is changing my Vim-tire life! This plugin  is so awesome it should be\nbuilt into default Vim. What does the  plugin \ndo? It enables the creation of new submodes. Why would a person want  more  modes?!?\nIsn't dealing with modes the main deterrent for new Vim users? Isn't Normal,\nInsert, Command-line, Visual, Select, and Operator-pending enough? (Did I miss one?)\nLet's try out a new submode and see what happens.",
            "title": "Making a Window Submode in Vim"
        },
        {
            "location": "/blog/2016/making-a-window-submode/#problem",
            "text": "Window commands are prefixed with  <C-w> . Want to create a horizontal split?\nTry  <C-w>s , didn't mean to do that and want to do vertical split?  <C-w>q<C-w>v .\nWant to resize the vertical split  50<C-w>> ? Too wide? Narrow it with  5<C-w>< .\nMove back to the other window?  <C-w>p  or  <C-w>w .  Are your fingers getting tired? After I get the windows just right using default\nmappings my fingers are crying for mercy.  Here's a short list of common default window commands: \" Change window focus \n{ n } < C - w > h    move cursor  left   { n }  window \n{ n } < C - w > l    move cursor  right  { n }  window \n{ n } < C - w > j    move cursor down  { n }  window \n{ n } < C - w > k    move cursor  up     { n }  window  \" Move window  < C - w > H   move  window  far  left  < C - w > L   move  window  far  right  < C - w > J   move  window  far bottom < C - w > K   move  window  far  top  \" Change size \n{ n } < C - w >+   increase height by { n } rows\n{ n } < C - w >-   decrease height by { n } rows\n{ n } < C - w ><   decrease width by { n }  columns \n{ n } < C - w >>   increase width by { n }  columns \n    < C - w >|   maximize width\n    < C - w > _  maximize height\n    < C - w >=   equalize sizes  For a comprehensive list of window commands try  :help windows.txt .",
            "title": "Problem"
        },
        {
            "location": "/blog/2016/making-a-window-submode/#solution-a",
            "text": "The most common solution to window-command-itis is to map other keys to these\ncommon actions so to include the  <C-w>  prefix.  From  spf13-vim : map  < C - J >   < C - W > j < C - W > _\nmap  < C - K >   < C - W > k < C - W > _\nmap  < C - L >   < C - W > l < C - W > _\nmap  < C - H >   < C - W > h < C - W > _ \" Note: They go one extra by maximizing the height after entering the split.   From  Thoughbot : nnoremap   < C - J >   < C - W >< C - J >  nnoremap   < C - K >   < C - W >< C - K >  nnoremap   < C - L >   < C - W >< C - L >  nnoremap   < C - H >   < C - W >< C - H >   This has been the accepted solution for most, but it takes away so many\nconvenient keys. And in some cases, it even overrides default behaviour. <C-L> , I miss you.  C-H , isn't that also  <BS> ? Guess I won't be using\nyou either.",
            "title": "Solution A"
        },
        {
            "location": "/blog/2016/making-a-window-submode/#solution-b-submode-to-the-rescue",
            "text": "This entire solution depends on  kana/vim-submode ,\nI consider it one of Japan's national treasures along with ninjas and ramen.\nUnfortunately, Kana's example use of submodes is a little underwhelming:\nundo/redo using  g-  and  g+ . I agree with the author that using  g-  and g+  is not convenient, and using  g++++-++-+  is easier, but the solution\nfor that was simply  u  and  <C-R> . I feel a better application for a new\nsubmode is window management. Imagine if resizing a split was  <C-w>++++++++ \nor  <C-w>------=->>>>>>>><>  or changing cursor location was  <C-w>hjlll \nor moving was  <C-w>HjKLkjh . Imagine no more!  First, install the plugin. If you're not sure how to install a plugin, try junegunn/vim-plug . Next, add the\nfollowing to your  $MYVIMRC .  \" A message will appear in the message line when you're in a submode  \" and stay there until the mode has existed.  let   g :submode_always_show_submode  =   1  \" We're taking over the default <C-w> setting. Don't worry we'll do  \" our best to put back the default functionality.  call  submode#enter_with ( 'window' ,   'n' ,   '' ,   '<C-w>' )  \" Note: <C-c> will also get you out to the mode without this mapping.  \" Note: <C-[> also behaves as <ESC>  call  submode#leave_with ( 'window' ,   'n' ,   '' ,   '<ESC>' )  \" Go through every letter  for   key   in  [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' , 'i' , 'j' , 'k' , 'l' , 'm' , \n\\            'n' , 'o' , 'p' , 'q' , 'r' , 's' , 't' , 'u' , 'v' , 'w' , 'x' , 'y' , 'z' ]   \" maps lowercase, uppercase and <C-key> \n   call  submode#map ( 'window' ,   'n' ,   '' ,   key ,   '<C-w>'  .  key ) \n   call  submode#map ( 'window' ,   'n' ,   '' ,  toupper ( key ),   '<C-w>'  . toupper ( key )) \n   call  submode#map ( 'window' ,   'n' ,   '' ,   '<C-'  .  key  .  '>' ,   '<C-w>'  .  '<C-' . key  .  '>' )  endfor  \" Go through symbols. Sadly, '|', not supported in submode plugin.  for   key   in  [ '=' , '_' , '+' , '-' , '<' , '>' ]\n   call  submode#map ( 'window' ,   'n' ,   '' ,   key ,   '<C-w>'  .  key )  endfor  \" Old way, just in case.  nnoremap   < Leader > w   < C - w >   After  :source $MYVIMRC , you'll have a glorious new submode in Vim.\nYou can see I named it  window  mode. Can you guess how to get into  window  mode? <C-w> , the normal prefix used to do any  wincmd . If this is too drastic, feel\nfree to change line #7 to something else. Just replace  <C-w>  with a different\nnormal mapping.  Let's give it a test drive. \nI know you can't see what keys I'm pressing, but I guarantee I only pressed <C-w>  once. I also didn't have to remember any new key bindings. The\nhesitation in the demo is the resistance to hitting  <C-w>  every time, which\nI'll get over soon enough.",
            "title": "Solution B - Submode to the Rescue"
        },
        {
            "location": "/blog/2016/making-a-window-submode/#bonus-mappings",
            "text": "But wait there's more! In case I haven't provided enough tips for one post,\nhere's the overrides I have in  $MYVIMRC  to make windowing even better.  \" I don't like <C-w>q, <C-w>c won't exit Vim when it's the last window.  call  submode#map ( 'window' ,   'n' ,   '' ,   'q' ,   '<C-w>c' )  call  submode#map ( 'window' ,   'n' ,   '' ,   '<C-q>' ,   '<C-w>c' )  \" <lowercase-pipe> sets the width to 80 columns, pipe (<S-\\>) by default  \" maximizes the width.  call  submode#map ( 'window' ,   'n' ,   '' ,   '\\' ,   ':vertical resize 80<CR>' )  \" Resize faster  call  submode#map ( 'window' ,   'n' ,   '' ,   '+' ,   '3<C-w>+' )  call  submode#map ( 'window' ,   'n' ,   '' ,   '-' ,   '3<C-w>-' )  call  submode#map ( 'window' ,   'n' ,   '' ,   '<' ,   '10<C-w><' )  call  submode#map ( 'window' ,   'n' ,   '' ,   '>' ,   '10<C-w>>' )",
            "title": "Bonus Mappings"
        },
        {
            "location": "/blog/2016/making-a-window-submode/#rainbows-without-unicorns",
            "text": "While learning this new way of windowing, there have been a few negatives:    I forget that I'm in window mode and get disoriented when I think I'm moving\n   the cursor within a buffer, but it jumps around to other splits.    For one off window commands, I have to hit an extra key to get out of window\n   mode or wait for the timeout.    When I use some one else's computer, I'm useless.    I think most of these annoyances will go away with time, and the benefits\novertime in keystroke savings are non-trivial. As for #3, regardless of submodes,\nthe brain freeze will never go away, because no one thinks as strangely as me,\nand that's a Good Thing\u2122.",
            "title": "Rainbows without Unicorns"
        },
        {
            "location": "/blog/2016/making-a-window-submode/#thanks",
            "text": "Shout-out to Kana Natsuno, @kana1,  http://whileimautomaton.net/ ,  https://github.com/kana  . None\nof this awesomeness would be possible without  https://github.com/kana/vim-submode  . She\nmakes some totally sweet plug-ins. Check out her stuff. You won't regret it!  Let me know what you think. Am I crazy? What other things deserve a submode?\nHit me up in the comments below! Thanks for reading!",
            "title": "Thanks"
        },
        {
            "location": "/blog/2016/bs-to-the-black-hole/",
            "text": "BS to the Black Hole\n\u00b6\n\n\n\n\nFirst post in 2 years. Sorry to keep you waiting.\n\n\nI've been playing with Vim again, more specifically NeoVim\n\nhttps://neovim.io/\n, and this time I think it's going to stick.\n\n\nThe Problem\n\u00b6\n\n\nSometimes, I want to delete text without worrying about blowing away the \nunnamed\n\nregister. This can be done by prefixing a normal or visual delete with \n\"_\n,\nbut that's an awkward dance for my pinky and ring finger. Go ahead, try it.\nYou'll feel like you're in junior high again.\n\n\n\n\n\nSolution #1\n\u00b6\n\n\nSetup a single key to do that \n\"_\n thing for me. So my naive approach was to add\nthe following:\n\n\nnnoremap\n \n<\nBS\n>\n \n\"_\n\n\nvnoremap\n \n<\nBS\n>\n \n\"_\n\n\n\n\n\nThis was fine for 32.1 seconds of usability testing. It did the job, but what\ncames after a \n\"_\n was usually a \ndw\n or \ndb\n operator. Ah oh, I said the \"o\"\nword. That means I have to make a \nopfunc\n. (Who makes these rules?!?)\n\n\nSolution #2\n\u00b6\n\n\nSo what is this operator going to let us do? How about \n<BS>iw\n or \n<BS>ap\n or\n\nv{motion around something you hate}<BS>\n? If any of those seem awesome, here's\nhow to get in on the hot action!\n\n\n\" Add to your .vimrc or init.vim or vim.after or :e $MYVIMRC\n\nfunc\n!\n BlackHoleDeleteOperator\n(\ntype\n)\n\n  \nif\n \na\n:type \n==\n# \n'char'\n\n    execute \n'normal! `[v`]\"_d'\n\n  \nelseif\n \na\n:type \n==\n# \n'line'\n\n    execute \n'normal! `[V`]\"_d'\n\n  \nelse\n\n    execute \n'normal! `<'\n . \na\n:type . \n'`>\"_d'\n\n  \nendif\n\n\nendf\n\n\n\n\" Map to <BS> because it's under worked in Vim.\n\n\nnnoremap\n \n<\nsilent\n>\n \n<\nBS\n>\n \n<\nEsc\n>\n:\nset\n \nopfunc\n=\nBlackHoleDeleteOperator\n<\nCR\n>\ng\n@\n\nvnoremap\n \n<\nsilent\n>\n \n<\nBS\n>\n :\n<\nC\n-\nu\n>\ncall\n BlackHoleDeleteOperator\n(\nvisualmode\n())<\nCR\n>\n\n\n\n\n\nHow Does it Work?\n\u00b6\n\n\n\n\n\n\nopfunc\n is best explained in Vim help. Use \n:help opfunc\n and follow the \n<C-]>\n\n   until clarity is achieved.\n\n\n\n\n\n\n:help normal\n - evaluates the following characters as if they were typed.\n\n\n\n\n\n\n:help marks\n - page down a bit to get the list of automatic marks based on\n   last positions of various changes, jumps, and actions.\n\n\n\n\n\n\nhttp://learnvimscriptthehardway.stevelosh.com/chapters/33.html\n - seriously,\n   this guy does a lot better explaining than me. Learn it the hard way, first,\n   ask questions later.\n\n\n\n\n\n\nClosing\n\u00b6\n\n\nThanks for getting this far. Do you have a better mapping for \n<BS>\n? Do you\nhave a more creative solution than typing \n\"_\n to access the black hole\nregister? Let me know by commenting or share this post to some one who does.",
            "title": "BS to the Black Hole"
        },
        {
            "location": "/blog/2016/bs-to-the-black-hole/#bs-to-the-black-hole",
            "text": "First post in 2 years. Sorry to keep you waiting.  I've been playing with Vim again, more specifically NeoVim https://neovim.io/ , and this time I think it's going to stick.",
            "title": "BS to the Black Hole"
        },
        {
            "location": "/blog/2016/bs-to-the-black-hole/#the-problem",
            "text": "Sometimes, I want to delete text without worrying about blowing away the  unnamed \nregister. This can be done by prefixing a normal or visual delete with  \"_ ,\nbut that's an awkward dance for my pinky and ring finger. Go ahead, try it.\nYou'll feel like you're in junior high again.",
            "title": "The Problem"
        },
        {
            "location": "/blog/2016/bs-to-the-black-hole/#solution-1",
            "text": "Setup a single key to do that  \"_  thing for me. So my naive approach was to add\nthe following:  nnoremap   < BS >   \"_  vnoremap   < BS >   \"_   This was fine for 32.1 seconds of usability testing. It did the job, but what\ncames after a  \"_  was usually a  dw  or  db  operator. Ah oh, I said the \"o\"\nword. That means I have to make a  opfunc . (Who makes these rules?!?)",
            "title": "Solution #1"
        },
        {
            "location": "/blog/2016/bs-to-the-black-hole/#solution-2",
            "text": "So what is this operator going to let us do? How about  <BS>iw  or  <BS>ap  or v{motion around something you hate}<BS> ? If any of those seem awesome, here's\nhow to get in on the hot action!  \" Add to your .vimrc or init.vim or vim.after or :e $MYVIMRC \nfunc !  BlackHoleDeleteOperator ( type ) \n   if   a :type  == #  'char' \n    execute  'normal! `[v`]\"_d' \n   elseif   a :type  == #  'line' \n    execute  'normal! `[V`]\"_d' \n   else \n    execute  'normal! `<'  .  a :type .  '`>\"_d' \n   endif  endf  \" Map to <BS> because it's under worked in Vim.  nnoremap   < silent >   < BS >   < Esc > : set   opfunc = BlackHoleDeleteOperator < CR > g @ vnoremap   < silent >   < BS >  : < C - u > call  BlackHoleDeleteOperator ( visualmode ())< CR >",
            "title": "Solution #2"
        },
        {
            "location": "/blog/2016/bs-to-the-black-hole/#how-does-it-work",
            "text": "opfunc  is best explained in Vim help. Use  :help opfunc  and follow the  <C-]> \n   until clarity is achieved.    :help normal  - evaluates the following characters as if they were typed.    :help marks  - page down a bit to get the list of automatic marks based on\n   last positions of various changes, jumps, and actions.    http://learnvimscriptthehardway.stevelosh.com/chapters/33.html  - seriously,\n   this guy does a lot better explaining than me. Learn it the hard way, first,\n   ask questions later.",
            "title": "How Does it Work?"
        },
        {
            "location": "/blog/2016/bs-to-the-black-hole/#closing",
            "text": "Thanks for getting this far. Do you have a better mapping for  <BS> ? Do you\nhave a more creative solution than typing  \"_  to access the black hole\nregister? Let me know by commenting or share this post to some one who does.",
            "title": "Closing"
        },
        {
            "location": "/blog/2016/negative-modulo/",
            "text": "PSA: Vim Modulo '%' Returns Negative Numbers!\n\u00b6\n\n\n\n\nSurprise! Vim has the same modulo bug as Javascript. Some say it's not a bug,\nbut if Ruby and Google Calculator is wrong, I don't want to be right.\n\n\n\n\n\n\n\nVim, \n:echo -10 % 3\n returns \n-1\n\n\nJavascript \n-10 % 3\n returns \n-1\n\n\nRuby/IRB, \n-10 % 3\n returns \n2\n \n-- my expectation is here\n\n\n\n\nSolution\n\u00b6\n\n\nAdd this function some where in your Vimscript and throw away \n%\n.\n\n\n\" ((n % m) + m) % m` or `((-10 % 3) + 3) % 3` returns `2`\n\n\nfunction\n!\n s:\nmod\n(\nn\n,\nm\n)\n\n  \nreturn\n \n((\na\n:\nn\n % \na\n:\nm\n)\n \n+\n \na\n:\nm\n)\n % \na\n:\nm\n\n\nendfunction\n\n\n\n\n\nI hope this saves someone some time somewhere out there. It's an hour I'll never\nget back, but happy to give back.\n\n\nReferences\n\n\n\n\nhttps://www.google.com/#q=-10+%25+3\n\n\nhttp://vimdoc.sourceforge.net/htmldoc/eval.html#expr6\n\n\nhttp://math.stackexchange.com/questions/519845/modulo-of-a-negative-number/519856\n\n\nhttps://en.wikipedia.org/wiki/Modulo_operation\n\n\nhttp://stackoverflow.com/questions/4467539/javascript-modulo-not-behaving",
            "title": "PSA: Vim Modulo '%' Returns Negative Numbers!"
        },
        {
            "location": "/blog/2016/negative-modulo/#psa-vim-modulo-returns-negative-numbers",
            "text": "Surprise! Vim has the same modulo bug as Javascript. Some say it's not a bug,\nbut if Ruby and Google Calculator is wrong, I don't want to be right.    Vim,  :echo -10 % 3  returns  -1  Javascript  -10 % 3  returns  -1  Ruby/IRB,  -10 % 3  returns  2   -- my expectation is here",
            "title": "PSA: Vim Modulo '%' Returns Negative Numbers!"
        },
        {
            "location": "/blog/2016/negative-modulo/#solution",
            "text": "Add this function some where in your Vimscript and throw away  % .  \" ((n % m) + m) % m` or `((-10 % 3) + 3) % 3` returns `2`  function !  s: mod ( n , m ) \n   return   (( a : n  %  a : m )   +   a : m )  %  a : m  endfunction   I hope this saves someone some time somewhere out there. It's an hour I'll never\nget back, but happy to give back.  References   https://www.google.com/#q=-10+%25+3  http://vimdoc.sourceforge.net/htmldoc/eval.html#expr6  http://math.stackexchange.com/questions/519845/modulo-of-a-negative-number/519856  https://en.wikipedia.org/wiki/Modulo_operation  http://stackoverflow.com/questions/4467539/javascript-modulo-not-behaving",
            "title": "Solution"
        },
        {
            "location": "/blog/2017/what-the-sql-lateral/",
            "text": "What the SQL?!? Lateral Joins\n\u00b6\n\n\n\n\nToday's \"What the SQL?!?\" features the keyword \nLATERAL\n. A prerequisite to\nunderstanding lateral joins are regular joins and subqueries. I'll explain those\nbriefly to see how \nLATERAL\n can simplify a complicated SQL query.\n\n\n\n\n\nPlease note, our target database is PostgreSQL. These examples may work with\nother databases, but might need some massaging to get them to work properly.\nSearch online for the specific vendor's documentation if errors pop up.\nTry searching for \"lateral joins {{DB VENDOR NAME}}\". Not all database vendors\nsupport the keyword \nLATERAL\n.\n\n\nA Problem to Solve\n\u00b6\n\n\nWe have a table with system uptimes. The table records a start timestamp and an\nend timestamp. If the service is still running, the end timestamp is left null\nbecause it hasn't ended. We want a query to display an overview this data.\n\n\nOur final solution will return a row per day and 24 columns containing an uptime\npercentage for each hour in the day. It will look like the following.\n\n\n  cal_date  | hour_0 | hour_1 | hour_2 | hour_3 | ... | hour_21 | hour_22 | hour_23\n------------+--------+--------+--------+--------+-----+---------+---------+---------\n 2017-03-01 |      0 |   0.75 |   0.25 |      0 | ... |       0 |       0 |       0\n 2017-03-02 |      0 |      0 |      0 |      0 | ... |       1 |       1 |       1\n(2 rows)\n\n\n\n\nPlease note we'll use \n...\n abbreviate some of the results. All queries are\nschema independent and should be copy/paste-able into any \npsql\n session.\n\n\nSample Uptime Data\n\u00b6\n\n\nThe sample uptime data is derived from a virtual table built from the following query:\n\n\nSELECT\n\n  \n*\n\n\nFROM\n \n(\n\n  \nVALUES\n\n  \n(\n'2017-03-01 01:15:00-06'\n::\ntimestamp\n,\n \n'2017-03-01 02:15:00-06'\n::\ntimestamp\n),\n\n  \n(\n'2017-03-01 08:00:00-06'\n,\n \n'2017-03-01 20:00:00-06'\n),\n\n  \n(\n'2017-03-02 19:00:00-06'\n,\n \nnull\n)\n\n\n)\n \nAS\n \nt\n(\nstart_ts\n,\n \nend_ts\n)\n\n\n\n\n\nThe data looks like:\n\n\n      start_ts       |       end_ts\n---------------------+---------------------\n 2017-03-01 01:15:00 | 2017-03-01 02:15:00\n 2017-03-01 08:00:00 | 2017-03-01 20:00:00\n 2017-03-02 19:00:00 |\n(3 rows)\n\n\n\n\nWe want to plot the time against a time sliced table representing all the\neffective hours in the uptime window. We'll make use of another virtual table to\nbuild up all the time slices:\n\n\nSELECT\n\n    \nstart_ts\n,\n\n    \nstart_ts\n \n+\n \ninterval\n \n'1 hour'\n \nAS\n \nend_ts\n\n\nFROM\n \ngenerate_series\n(\n'2017-03-01'\n::\ndate\n,\n\n                     \n'2017-03-03'\n::\ntimestamp\n \n-\n \ninterval\n \n'1 hour'\n,\n\n                     \ninterval\n \n'1 hour'\n\n                    \n)\n \nAS\n \nt\n(\nstart_ts\n)\n\n\n\n\n\nThis we make use of PostgreSQL's \ngenerate_series\n\nto return all the hours between a time range. The data looks like:\n\n\n      start_ts       |       end_ts\n---------------------+---------------------\n 2017-03-01 00:00:00 | 2017-03-01 01:00:00\n 2017-03-01 01:00:00 | 2017-03-01 02:00:00\n 2017-03-01 02:00:00 | 2017-03-01 03:00:00\n -- ... many more rows ...\n 2017-03-01 03:00:00 | 2017-03-01 04:00:00\n 2017-03-02 22:00:00 | 2017-03-02 23:00:00\n 2017-03-02 23:00:00 | 2017-03-03 00:00:00\n(48 rows)\n\n\n\n\nLeft Join\n\u00b6\n\n\nWe use a left join to glue together overlapping time ranges between these two\ndata sets. We want all the data on the \nLEFT\n side in the \nFROM\n clause to return\nregardless of an uptime record existing within its time slice.\n\n\nSELECT\n\n    \n*\n\n\nFROM\n \n(\n\n    \n-- build virtual table of all hours between\n\n    \n-- a date range\n\n    \nSELECT\n\n      \nstart_ts\n,\n\n      \nstart_ts\n \n+\n \ninterval\n \n'1 hour'\n \nAS\n \nend_ts\n\n    \nFROM\n \ngenerate_series\n(\n\n           \n'2017-03-01'\n::\ndate\n,\n\n           \n'2017-03-03'\n::\ntimestamp\n \n-\n \ninterval\n \n'1 hour'\n,\n\n           \ninterval\n \n'1 hour'\n\n    \n)\n \nAS\n \nt\n(\nstart_ts\n)\n\n\n)\n \nAS\n \ncal\n\n\nLEFT\n \nJOIN\n \n(\n\n    \n-- build virtual table of uptimes\n\n    \nSELECT\n \n*\n\n    \nFROM\n \n(\n\n      \nVALUES\n\n      \n(\n'2017-03-01 01:15:00-06'\n::\ntimestamp\n,\n \n'2017-03-01 02:15:00-06'\n::\ntimestamp\n),\n\n      \n(\n'2017-03-01 08:00:00-06'\n,\n \n'2017-03-01 20:00:00-06'\n),\n\n      \n(\n'2017-03-02 19:00:00-06'\n,\n \nnull\n)\n\n    \n)\n \nAS\n \nt\n(\nstart_ts\n,\n \nend_ts\n)\n\n\n)\n \nAS\n \nuptime\n \nON\n \ncal\n.\nend_ts\n \n>\n \nuptime\n.\nstart_ts\n \nAND\n \ncal\n.\nstart_ts\n \n<=\n \ncoalesce\n(\nuptime\n.\nend_ts\n,\n \ncurrent_timestamp\n)\n\n\n\n\n\nThe result set shows we have some variety in our sample data. With 3 slices\nup time and 3 slices of downtime.\n\n\n      start_ts       |       end_ts        |      start_ts       |       end_ts\n---------------------+---------------------+---------------------+---------------------\n 2017-03-01 00:00:00 | 2017-03-01 01:00:00 |                     |\n 2017-03-01 01:00:00 | 2017-03-01 02:00:00 | 2017-03-01 01:15:00 | 2017-03-01 02:15:00\n 2017-03-01 02:00:00 | 2017-03-01 03:00:00 | 2017-03-01 01:15:00 | 2017-03-01 02:15:00\n 2017-03-01 03:00:00 | 2017-03-01 04:00:00 |                     |\n ...\n 2017-03-01 07:00:00 | 2017-03-01 08:00:00 |                     |\n 2017-03-01 08:00:00 | 2017-03-01 09:00:00 | 2017-03-01 08:00:00 | 2017-03-01 20:00:00\n ...\n 2017-03-01 20:00:00 | 2017-03-01 21:00:00 | 2017-03-01 08:00:00 | 2017-03-01 20:00:00\n 2017-03-01 21:00:00 | 2017-03-01 22:00:00 |                     |\n ...\n 2017-03-02 18:00:00 | 2017-03-02 19:00:00 |                     |\n 2017-03-02 19:00:00 | 2017-03-02 20:00:00 | 2017-03-02 19:00:00 |\n ...\n 2017-03-02 23:00:00 | 2017-03-03 00:00:00 | 2017-03-02 19:00:00 |\n(48 rows)\n\n\n\n\nIf we try without the \nLEFT\n clause, we'll only see 20 rows containing the up slices.\n\n\nTime to compute some timing\n\u00b6\n\n\nLet's add some times and sensible column names and replace the \n*\n\n\nSELECT\n\n    \n-- will use `first_ts` and `last_ts` to calculate uptime duration\n\n    \nCASE\n \nWHEN\n \nuptime\n.\nstart_ts\n \nIS\n \nNOT\n \nNULL\n \nTHEN\n\n        \ngreatest\n(\nuptime\n.\nstart_ts\n,\n \ncal\n.\nstart_ts\n)\n\n    \nEND\n                                               \nAS\n \nfirst_ts\n,\n\n    \nleast\n(\ncal\n.\nend_ts\n,\n \nuptime\n.\nend_ts\n)\n                  \nAS\n \nlast_ts\n,\n\n    \ndate_trunc\n(\n'day'\n,\n \ncal\n.\nstart_ts\n)::\ndate\n             \nAS\n \ncal_date\n,\n\n    \nextract\n(\nhour\n \nfrom\n \ncal\n.\nstart_ts\n)\n                   \nAS\n \ncal_hour\n,\n\n    \nextract\n(\nepoch\n \nfrom\n \nage\n(\ncal\n.\nend_ts\n,\n \ncal\n.\nstart_ts\n))\n \nAS\n \ncal_seconds\n\n\nFROM\n \n(\n\n    \n-- build virtual table of all hours between\n\n    \n-- a date range\n\n    \nSELECT\n\n        \nstart_ts\n,\n\n        \nstart_ts\n \n+\n \ninterval\n \n'1 hour'\n \nAS\n \nend_ts\n\n        \nFROM\n \ngenerate_series\n(\n'2017-03-01'\n::\ndate\n,\n\n                             \n'2017-03-03'\n::\ntimestamp\n \n-\n \ninterval\n \n'1 hour'\n,\n\n                             \ninterval\n \n'1 hour'\n\n        \n)\n \nAS\n \nt\n(\nstart_ts\n)\n\n    \n)\n \nAS\n \ncal\n\n\nLEFT\n \nJOIN\n \n(\n\n    \n-- build virtual table of uptimes\n\n    \nSELECT\n \n*\n\n    \nFROM\n \n(\n\n        \nVALUES\n\n        \n(\n'2017-03-01 01:15:00-06'\n::\ntimestamp\n,\n \n'2017-03-01 02:15:00-06'\n::\ntimestamp\n),\n\n        \n(\n'2017-03-01 08:00:00-06'\n,\n \n'2017-03-01 20:00:00-06'\n),\n\n        \n(\n'2017-03-02 19:00:00-06'\n,\n \nnull\n)\n\n    \n)\n \nAS\n \nt\n(\nstart_ts\n,\n \nend_ts\n)\n\n\n)\n \nAS\n \nuptime\n \nON\n \ncal\n.\nend_ts\n \n>\n \nuptime\n.\nstart_ts\n \nAND\n \ncal\n.\nstart_ts\n \n<=\n \ncoalesce\n(\nuptime\n.\nend_ts\n,\n \ncurrent_timestamp\n)\n\n\n\n\n\n      first_ts       |       last_ts       |  cal_date  | cal_hour | cal_seconds\n---------------------+---------------------+------------+----------+-------------\n                     | 2017-03-01 01:00:00 | 2017-03-01 |        0 |        3600\n 2017-03-01 01:15:00 | 2017-03-01 02:00:00 | 2017-03-01 |        1 |        3600\n 2017-03-01 02:00:00 | 2017-03-01 02:15:00 | 2017-03-01 |        2 |        3600\n                     | 2017-03-01 04:00:00 | 2017-03-01 |        3 |        3600\n                     | 2017-03-01 05:00:00 | 2017-03-01 |        4 |        3600\n                     | 2017-03-01 06:00:00 | 2017-03-01 |        5 |        3600\n                     | 2017-03-01 07:00:00 | 2017-03-01 |        6 |        3600\n                     | 2017-03-01 08:00:00 | 2017-03-01 |        7 |        3600\n 2017-03-01 08:00:00 | 2017-03-01 09:00:00 | 2017-03-01 |        8 |        3600\n ...\n 2017-03-01 20:00:00 | 2017-03-01 20:00:00 | 2017-03-01 |       20 |        3600\n                     | 2017-03-01 22:00:00 | 2017-03-01 |       21 |        3600\n ... \n                     | 2017-03-02 19:00:00 | 2017-03-02 |       18 |        3600\n 2017-03-02 19:00:00 | 2017-03-02 20:00:00 | 2017-03-02 |       19 |        3600\n ...\n 2017-03-02 23:00:00 | 2017-03-03 00:00:00 | 2017-03-02 |       23 |        3600\n(48 rows)\n\n\n\n\nSubquery, Subquery, What's the Worry?\n\u00b6\n\n\nSQL is all about nested subqueries. It's hard to escape without creating\nviews, but who has time to lookup that \nsyntax\n\n\nand\n get their \nDBA's\n permission to run the DDL?!?\n\n\nLet's add some duration times to the result set. We'll use the traditional sub\nquery for it.\n\n\nSELECT\n\n    \n-- calculate uptime seconds\n\n    \ncoalesce\n(\n\n      \nextract\n(\nepoch\n \nFROM\n \nage\n(\nlast_ts\n,\n \nfirst_ts\n)),\n\n      \n0\n\n    \n)\n \nAS\n \nup_seconds\n,\n\n    \n*\n\n\nFROM\n \n(\n\n    \nSELECT\n\n        \n-- will use `first_ts` and `last_ts` to calculate uptime duration\n\n        \nCASE\n \nWHEN\n \nuptime\n.\nstart_ts\n \nIS\n \nNOT\n \nNULL\n \nTHEN\n\n            \ngreatest\n(\nuptime\n.\nstart_ts\n,\n \ncal\n.\nstart_ts\n)\n\n        \nEND\n                                               \nAS\n \nfirst_ts\n,\n\n        \nleast\n(\ncal\n.\nend_ts\n,\n \nuptime\n.\nend_ts\n)\n                  \nAS\n \nlast_ts\n,\n\n        \ndate_trunc\n(\n'day'\n,\n \ncal\n.\nstart_ts\n)::\ndate\n             \nAS\n \ncal_date\n,\n\n        \nextract\n(\nhour\n \nfrom\n \ncal\n.\nstart_ts\n)\n                   \nAS\n \ncal_hour\n,\n\n        \nextract\n(\nepoch\n \nfrom\n \nage\n(\ncal\n.\nend_ts\n,\n \ncal\n.\nstart_ts\n))\n \nAS\n \ncal_seconds\n\n    \nFROM\n \n(\n\n        \n-- build virtual table of all hours between\n\n        \n-- a date range\n\n        \nSELECT\n\n            \nstart_ts\n,\n\n            \nstart_ts\n \n+\n \ninterval\n \n'1 hour'\n \nAS\n \nend_ts\n\n            \nFROM\n \ngenerate_series\n(\n'2017-03-01'\n::\ndate\n,\n\n                                 \n'2017-03-03'\n::\ntimestamp\n \n-\n \ninterval\n \n'1 hour'\n,\n\n                                 \ninterval\n \n'1 hour'\n\n            \n)\n \nAS\n \nt\n(\nstart_ts\n)\n\n    \n)\n \nAS\n \ncal\n\n    \nLEFT\n \nJOIN\n \n(\n\n        \n-- build virtual table of uptimes\n\n        \nSELECT\n \n*\n\n        \nFROM\n \n(\n\n            \nVALUES\n\n            \n(\n'2017-03-01 01:15:00-06'\n::\ntimestamp\n,\n \n'2017-03-01 02:15:00-06'\n::\ntimestamp\n),\n\n            \n(\n'2017-03-01 08:00:00-06'\n,\n \n'2017-03-01 20:00:00-06'\n),\n\n            \n(\n'2017-03-02 19:00:00-06'\n,\n \nnull\n)\n\n        \n)\n \nAS\n \nt\n(\nstart_ts\n,\n \nend_ts\n)\n\n    \n)\n \nAS\n \nuptime\n \nON\n \ncal\n.\nend_ts\n \n>\n \nuptime\n.\nstart_ts\n \nAND\n \ncal\n.\nstart_ts\n \n<=\n \ncoalesce\n(\nuptime\n.\nend_ts\n,\n \ncurrent_timestamp\n)\n\n\n)\n \nt1\n\n\n\n\n\n up_seconds\n------------\n          0\n       2700\n        900\n          0\n          0\n...\n       3600\n(48 rows)\n\n\n\n\nWithout the subquery we'd be getting into even more nested function calls and\nwould have to double compute values or have no visibility in the intermediate\nsteps. We could have calculated \nup_seconds\n directly in the first query which\nintroduced \nfirst_ts\n and \nlast_ts\n. That would look like this:\n\n\nSELECT\n\n    \ncoalesce\n(\n\n        \nextract\n(\nepoch\n \nFROM\n\n            \nage\n(\n\n                \nleast\n(\ncal\n.\nend_ts\n,\n \nuptime\n.\nend_ts\n),\n \n                \nCASE\n \nWHEN\n \nuptime\n.\nstart_ts\n \nIS\n \nNOT\n \nNULL\n \nTHEN\n\n                  \ngreatest\n(\nuptime\n.\nstart_ts\n,\n \ncal\n.\nstart_ts\n)\n\n                \nEND\n\n            \n)\n\n        \n),\n\n        \n0\n\n    \n)\n \nAS\n \nup_seconds\n\n\nFROM\n \n--- ...\n\n\n\n\n\nIt's not for the weak stomach, but frankly speaking, neither is the subquery...\n\n\nEnough Nesting, \nLATERAL\n join save me!\n\u00b6\n\n\nLateral joins can give us the best of both worlds: reduced subquery nesting and\ntraceable computed values. We're going to move the initial computed values like\n\nfirst_ts\n and \nlast_ts\n, move them to a virtual table then \nJOIN LATERAL\n so\nthey can get their own table alias. We'll do it again for \nup_seconds\n and use\n\nfirst_ts\n and \nlast_ts\n from its sibling table.\n\n\nSELECT\n\n    \nt2\n.\nup_seconds\n\n\nFROM\n \n(\n\n    \n-- build virtual table of all hours between\n\n    \n-- a date range\n\n    \nSELECT\n\n        \nstart_ts\n,\n\n        \nstart_ts\n \n+\n \ninterval\n \n'1 hour'\n \nAS\n \nend_ts\n\n        \nFROM\n \ngenerate_series\n(\n'2017-03-01'\n::\ndate\n,\n\n                             \n'2017-03-03'\n::\ntimestamp\n \n-\n \ninterval\n \n'1 hour'\n,\n\n                             \ninterval\n \n'1 hour'\n\n        \n)\n \nAS\n \nt\n(\nstart_ts\n)\n\n    \n)\n \nAS\n \ncal\n\n\nLEFT\n \nJOIN\n \n(\n\n    \n-- build virtual table of uptimes\n\n    \nSELECT\n \n*\n\n    \nFROM\n \n(\n\n        \nVALUES\n\n        \n(\n'2017-03-01 01:15:00-06'\n::\ntimestamp\n,\n \n'2017-03-01 02:15:00-06'\n::\ntimestamp\n),\n\n        \n(\n'2017-03-01 08:00:00-06'\n,\n \n'2017-03-01 20:00:00-06'\n),\n\n        \n(\n'2017-03-02 19:00:00-06'\n,\n \nnull\n)\n\n    \n)\n \nAS\n \nt\n(\nstart_ts\n,\n \nend_ts\n)\n\n\n)\n \nAS\n \nuptime\n \nON\n \ncal\n.\nend_ts\n \n>\n \nuptime\n.\nstart_ts\n \nAND\n \ncal\n.\nstart_ts\n \n<=\n \ncoalesce\n(\nuptime\n.\nend_ts\n,\n \ncurrent_timestamp\n)\n\n\nJOIN\n \nLATERAL\n \n(\n\n  \nSELECT\n\n      \n-- will use `first_ts` and `last_ts` to calculate uptime duration\n\n    \nCASE\n \nWHEN\n \nuptime\n.\nstart_ts\n \nIS\n \nNOT\n \nNULL\n \nTHEN\n\n        \ngreatest\n(\nuptime\n.\nstart_ts\n,\n \ncal\n.\nstart_ts\n)\n\n    \nEND\n                                               \nAS\n \nfirst_ts\n,\n\n    \nleast\n(\ncal\n.\nend_ts\n,\n \nuptime\n.\nend_ts\n)\n                  \nAS\n \nlast_ts\n,\n\n    \ndate_trunc\n(\n'day'\n,\n \ncal\n.\nstart_ts\n)::\ndate\n             \nAS\n \ncal_date\n,\n\n    \nextract\n(\nhour\n \nfrom\n \ncal\n.\nstart_ts\n)\n                   \nAS\n \ncal_hour\n,\n\n    \nextract\n(\nepoch\n \nfrom\n \nage\n(\ncal\n.\nend_ts\n,\n \ncal\n.\nstart_ts\n))\n \nAS\n \ncal_seconds\n\n\n)\n \nt1\n \nON\n \ntrue\n\n\nJOIN\n \nLATERAL\n \n(\n\n  \n-- calculate uptime seconds for the time slice\n\n  \nSELECT\n\n    \ncoalesce\n(\n\n        \nextract\n(\nepoch\n \nFROM\n \nage\n(\nlast_ts\n,\n \nfirst_ts\n)),\n\n        \n0\n\n    \n)\n \nAS\n \nup_seconds\n\n\n)\n \nt2\n \nON\n \ntrue\n\n\n\n\n\nThis gives us the same results but without the deep nesting.\n\n\n up_seconds\n------------\n          0\n       2700\n        900\n          0\n          0\n       3600\n...\n       3600\n(48 rows)\n\n\n\n\nWhat's great about this strategy is we can quickly choose which columns to see\nas we build up the query.\n\n\nSELECT\n\n  \nt2\n.\nup_seconds\n\n  \n...\n\n\n\n-- or --\n\n\n\nSELECT\n\n  \nt2\n.\n*\n,\n\n  \nt1\n.\n*\n\n\n\n\n\nLet's build up the final calculation using the same strategy:\n\n\nSELECT\n\n  \nt2\n.\n*\n,\n\n  \nt3\n.\n*\n\n\nFROM\n \n...\n\n\nJOIN\n \nLATERAL\n \n(\n\n  \n-- calculate percentage between uptime seconds and available seconds\n\n  \n-- within the time slice\n\n  \nSELECT\n\n    \nup_seconds\n \n/\n \ncal_seconds\n \nAS\n \nup_pct\n\n\n)\n \nt3\n \nON\n \ntrue\n\n\n\n\n\n up_seconds | up_pct\n------------+--------\n          0 |      0\n       2700 |   0.75\n        900 |   0.25\n          0 |      0\n...\n       3600 |      1\n(48 rows)\n\n\n\n\nPlot the Hours\n\u00b6\n\n\nNow we have all the computed data we need. Let's plot it as a cross tab (but not\nactually use \ncrosstab\n)\n\n\nWe'll need to consolidate the long list of data by \ncal_date\n and pivot the\n\ncal_hour\n as a column and \nup_pct\n as a value. In case of overlapping uptimes\nwe'll be pessimists and choose the lowest or \nmin\n uptime percentage.\n\n\nThe final query looks like:\n\n\nSELECT\n\n    \ncal_date\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n0\n \nTHEN\n \nup_pct\n  \nEND\n)\n \nAS\n \nhour_0\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n1\n \nTHEN\n \nup_pct\n  \nEND\n)\n \nAS\n \nhour_1\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n2\n \nTHEN\n \nup_pct\n  \nEND\n)\n \nAS\n \nhour_2\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n3\n \nTHEN\n \nup_pct\n  \nEND\n)\n \nAS\n \nhour_3\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n4\n \nTHEN\n \nup_pct\n  \nEND\n)\n \nAS\n \nhour_4\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n5\n \nTHEN\n \nup_pct\n  \nEND\n)\n \nAS\n \nhour_5\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n6\n \nTHEN\n \nup_pct\n  \nEND\n)\n \nAS\n \nhour_6\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n7\n \nTHEN\n \nup_pct\n  \nEND\n)\n \nAS\n \nhour_7\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n8\n \nTHEN\n \nup_pct\n  \nEND\n)\n \nAS\n \nhour_8\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n9\n \nTHEN\n \nup_pct\n  \nEND\n)\n \nAS\n \nhour_9\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n10\n \nTHEN\n \nup_pct\n \nEND\n)\n \nAS\n \nhour_10\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n11\n \nTHEN\n \nup_pct\n \nEND\n)\n \nAS\n \nhour_11\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n12\n \nTHEN\n \nup_pct\n \nEND\n)\n \nAS\n \nhour_12\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n13\n \nTHEN\n \nup_pct\n \nEND\n)\n \nAS\n \nhour_13\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n14\n \nTHEN\n \nup_pct\n \nEND\n)\n \nAS\n \nhour_14\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n15\n \nTHEN\n \nup_pct\n \nEND\n)\n \nAS\n \nhour_15\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n16\n \nTHEN\n \nup_pct\n \nEND\n)\n \nAS\n \nhour_16\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n17\n \nTHEN\n \nup_pct\n \nEND\n)\n \nAS\n \nhour_17\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n18\n \nTHEN\n \nup_pct\n \nEND\n)\n \nAS\n \nhour_18\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n19\n \nTHEN\n \nup_pct\n \nEND\n)\n \nAS\n \nhour_19\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n20\n \nTHEN\n \nup_pct\n \nEND\n)\n \nAS\n \nhour_20\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n21\n \nTHEN\n \nup_pct\n \nEND\n)\n \nAS\n \nhour_21\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n22\n \nTHEN\n \nup_pct\n \nEND\n)\n \nAS\n \nhour_22\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n23\n \nTHEN\n \nup_pct\n \nEND\n)\n \nAS\n \nhour_23\n\n\nFROM\n \n(\n\n    \n-- build virtual table of all hours between\n\n    \n-- a date range\n\n    \nSELECT\n\n        \nstart_ts\n,\n\n        \nstart_ts\n \n+\n \ninterval\n \n'1 hour'\n \nAS\n \nend_ts\n\n        \nFROM\n \ngenerate_series\n(\n'2017-03-01'\n::\ndate\n,\n\n                             \n'2017-03-03'\n::\ntimestamp\n \n-\n \ninterval\n \n'1 hour'\n,\n\n                             \ninterval\n \n'1 hour'\n\n        \n)\n \nAS\n \nt\n(\nstart_ts\n)\n\n    \n)\n \nAS\n \ncal\n\n\nLEFT\n \nJOIN\n \n(\n\n    \n-- build virtual table of uptimes\n\n    \nSELECT\n \n*\n\n    \nFROM\n \n(\n\n        \nVALUES\n\n        \n(\n'2017-03-01 01:15:00-06'\n::\ntimestamp\n,\n \n'2017-03-01 02:15:00-06'\n::\ntimestamp\n),\n\n        \n(\n'2017-03-01 08:00:00-06'\n,\n \n'2017-03-01 20:00:00-06'\n),\n\n        \n(\n'2017-03-02 19:00:00-06'\n,\n \nnull\n)\n\n    \n)\n \nAS\n \nt\n(\nstart_ts\n,\n \nend_ts\n)\n\n\n)\n \nAS\n \nuptime\n \nON\n \ncal\n.\nend_ts\n \n>\n \nuptime\n.\nstart_ts\n \nAND\n \ncal\n.\nstart_ts\n \n<=\n \ncoalesce\n(\nuptime\n.\nend_ts\n,\n \ncurrent_timestamp\n)\n\n\nJOIN\n \nLATERAL\n \n(\n\n  \nSELECT\n\n      \n-- will use `first_ts` and `last_ts` to calculate uptime duration\n\n    \nCASE\n \nWHEN\n \nuptime\n.\nstart_ts\n \nIS\n \nNOT\n \nNULL\n \nTHEN\n\n        \ngreatest\n(\nuptime\n.\nstart_ts\n,\n \ncal\n.\nstart_ts\n)\n\n    \nEND\n                                               \nAS\n \nfirst_ts\n,\n\n    \nleast\n(\ncal\n.\nend_ts\n,\n \nuptime\n.\nend_ts\n)\n                  \nAS\n \nlast_ts\n,\n\n    \ndate_trunc\n(\n'day'\n,\n \ncal\n.\nstart_ts\n)::\ndate\n             \nAS\n \ncal_date\n,\n\n    \nextract\n(\nhour\n \nfrom\n \ncal\n.\nstart_ts\n)\n                   \nAS\n \ncal_hour\n,\n\n    \nextract\n(\nepoch\n \nfrom\n \nage\n(\ncal\n.\nend_ts\n,\n \ncal\n.\nstart_ts\n))\n \nAS\n \ncal_seconds\n\n\n)\n \nt1\n \nON\n \ntrue\n\n\nJOIN\n \nLATERAL\n \n(\n\n  \nSELECT\n\n    \ncoalesce\n(\n\n        \nextract\n(\nepoch\n \nFROM\n \nage\n(\nlast_ts\n,\n \nfirst_ts\n)),\n\n        \n0\n\n    \n)\n \nAS\n \nup_seconds\n\n\n)\n \nt2\n \nON\n \ntrue\n\n\nJOIN\n \nLATERAL\n \n(\n\n  \n-- calculate percentage between uptime seconds and available seconds\n\n  \n-- within the time slice\n\n  \nSELECT\n\n  \nup_seconds\n \n/\n \ncal_seconds\n \nAS\n \nup_pct\n\n\n)\n \nt3\n \nON\n \ntrue\n\n\nGROUP\n \nBY\n \ncal_date\n\n\n\n\n\n  cal_date  | hour_0 | hour_1 | hour_2 | hour_3 | ... | hour_23\n------------+--------+--------+--------+--------+ ... +---------\n 2017-03-01 |      0 |   0.75 |   0.25 |      0 | ... |       0\n 2017-03-02 |      0 |      0 |      0 |      0 | ... |       1\n(2 rows)\n\n\n\n\nMore than CTE and Cross Join\n\u00b6\n\n\nThis example only scratches the surface of \nLATERAL\ns super powers. On the\nsurface \nLATERAL\n can do things \nCTE\n, cross join, and \nWINDOW\n can do.\nPostgreSQL describe \nLATERAL\n as:\n\n\n\n\nSubqueries appearing in FROM can be preceded by the key word LATERAL.\nThis allows them to reference columns provided by preceding FROM items.\n(Without LATERAL, each subquery is evaluated independently and so cannot\ncross-reference any other FROM item.)\n\n\n\n\nTL;DR - \nLATERAL\n allows subqueries to reference earlier tables.\n\n\nReferences\n\u00b6\n\n\n\n\nPostgres Lateral Joins",
            "title": "What the SQL?!? Lateral Joins"
        },
        {
            "location": "/blog/2017/what-the-sql-lateral/#what-the-sql-lateral-joins",
            "text": "Today's \"What the SQL?!?\" features the keyword  LATERAL . A prerequisite to\nunderstanding lateral joins are regular joins and subqueries. I'll explain those\nbriefly to see how  LATERAL  can simplify a complicated SQL query.   Please note, our target database is PostgreSQL. These examples may work with\nother databases, but might need some massaging to get them to work properly.\nSearch online for the specific vendor's documentation if errors pop up.\nTry searching for \"lateral joins {{DB VENDOR NAME}}\". Not all database vendors\nsupport the keyword  LATERAL .",
            "title": "What the SQL?!? Lateral Joins"
        },
        {
            "location": "/blog/2017/what-the-sql-lateral/#a-problem-to-solve",
            "text": "We have a table with system uptimes. The table records a start timestamp and an\nend timestamp. If the service is still running, the end timestamp is left null\nbecause it hasn't ended. We want a query to display an overview this data.  Our final solution will return a row per day and 24 columns containing an uptime\npercentage for each hour in the day. It will look like the following.    cal_date  | hour_0 | hour_1 | hour_2 | hour_3 | ... | hour_21 | hour_22 | hour_23\n------------+--------+--------+--------+--------+-----+---------+---------+---------\n 2017-03-01 |      0 |   0.75 |   0.25 |      0 | ... |       0 |       0 |       0\n 2017-03-02 |      0 |      0 |      0 |      0 | ... |       1 |       1 |       1\n(2 rows)  Please note we'll use  ...  abbreviate some of the results. All queries are\nschema independent and should be copy/paste-able into any  psql  session.",
            "title": "A Problem to Solve"
        },
        {
            "location": "/blog/2017/what-the-sql-lateral/#sample-uptime-data",
            "text": "The sample uptime data is derived from a virtual table built from the following query:  SELECT \n   *  FROM   ( \n   VALUES \n   ( '2017-03-01 01:15:00-06' :: timestamp ,   '2017-03-01 02:15:00-06' :: timestamp ), \n   ( '2017-03-01 08:00:00-06' ,   '2017-03-01 20:00:00-06' ), \n   ( '2017-03-02 19:00:00-06' ,   null )  )   AS   t ( start_ts ,   end_ts )   The data looks like:        start_ts       |       end_ts\n---------------------+---------------------\n 2017-03-01 01:15:00 | 2017-03-01 02:15:00\n 2017-03-01 08:00:00 | 2017-03-01 20:00:00\n 2017-03-02 19:00:00 |\n(3 rows)  We want to plot the time against a time sliced table representing all the\neffective hours in the uptime window. We'll make use of another virtual table to\nbuild up all the time slices:  SELECT \n     start_ts , \n     start_ts   +   interval   '1 hour'   AS   end_ts  FROM   generate_series ( '2017-03-01' :: date , \n                      '2017-03-03' :: timestamp   -   interval   '1 hour' , \n                      interval   '1 hour' \n                     )   AS   t ( start_ts )   This we make use of PostgreSQL's  generate_series \nto return all the hours between a time range. The data looks like:        start_ts       |       end_ts\n---------------------+---------------------\n 2017-03-01 00:00:00 | 2017-03-01 01:00:00\n 2017-03-01 01:00:00 | 2017-03-01 02:00:00\n 2017-03-01 02:00:00 | 2017-03-01 03:00:00\n -- ... many more rows ...\n 2017-03-01 03:00:00 | 2017-03-01 04:00:00\n 2017-03-02 22:00:00 | 2017-03-02 23:00:00\n 2017-03-02 23:00:00 | 2017-03-03 00:00:00\n(48 rows)",
            "title": "Sample Uptime Data"
        },
        {
            "location": "/blog/2017/what-the-sql-lateral/#left-join",
            "text": "We use a left join to glue together overlapping time ranges between these two\ndata sets. We want all the data on the  LEFT  side in the  FROM  clause to return\nregardless of an uptime record existing within its time slice.  SELECT \n     *  FROM   ( \n     -- build virtual table of all hours between \n     -- a date range \n     SELECT \n       start_ts , \n       start_ts   +   interval   '1 hour'   AS   end_ts \n     FROM   generate_series ( \n            '2017-03-01' :: date , \n            '2017-03-03' :: timestamp   -   interval   '1 hour' , \n            interval   '1 hour' \n     )   AS   t ( start_ts )  )   AS   cal  LEFT   JOIN   ( \n     -- build virtual table of uptimes \n     SELECT   * \n     FROM   ( \n       VALUES \n       ( '2017-03-01 01:15:00-06' :: timestamp ,   '2017-03-01 02:15:00-06' :: timestamp ), \n       ( '2017-03-01 08:00:00-06' ,   '2017-03-01 20:00:00-06' ), \n       ( '2017-03-02 19:00:00-06' ,   null ) \n     )   AS   t ( start_ts ,   end_ts )  )   AS   uptime   ON   cal . end_ts   >   uptime . start_ts   AND   cal . start_ts   <=   coalesce ( uptime . end_ts ,   current_timestamp )   The result set shows we have some variety in our sample data. With 3 slices\nup time and 3 slices of downtime.        start_ts       |       end_ts        |      start_ts       |       end_ts\n---------------------+---------------------+---------------------+---------------------\n 2017-03-01 00:00:00 | 2017-03-01 01:00:00 |                     |\n 2017-03-01 01:00:00 | 2017-03-01 02:00:00 | 2017-03-01 01:15:00 | 2017-03-01 02:15:00\n 2017-03-01 02:00:00 | 2017-03-01 03:00:00 | 2017-03-01 01:15:00 | 2017-03-01 02:15:00\n 2017-03-01 03:00:00 | 2017-03-01 04:00:00 |                     |\n ...\n 2017-03-01 07:00:00 | 2017-03-01 08:00:00 |                     |\n 2017-03-01 08:00:00 | 2017-03-01 09:00:00 | 2017-03-01 08:00:00 | 2017-03-01 20:00:00\n ...\n 2017-03-01 20:00:00 | 2017-03-01 21:00:00 | 2017-03-01 08:00:00 | 2017-03-01 20:00:00\n 2017-03-01 21:00:00 | 2017-03-01 22:00:00 |                     |\n ...\n 2017-03-02 18:00:00 | 2017-03-02 19:00:00 |                     |\n 2017-03-02 19:00:00 | 2017-03-02 20:00:00 | 2017-03-02 19:00:00 |\n ...\n 2017-03-02 23:00:00 | 2017-03-03 00:00:00 | 2017-03-02 19:00:00 |\n(48 rows)  If we try without the  LEFT  clause, we'll only see 20 rows containing the up slices.",
            "title": "Left Join"
        },
        {
            "location": "/blog/2017/what-the-sql-lateral/#time-to-compute-some-timing",
            "text": "Let's add some times and sensible column names and replace the  *  SELECT \n     -- will use `first_ts` and `last_ts` to calculate uptime duration \n     CASE   WHEN   uptime . start_ts   IS   NOT   NULL   THEN \n         greatest ( uptime . start_ts ,   cal . start_ts ) \n     END                                                 AS   first_ts , \n     least ( cal . end_ts ,   uptime . end_ts )                    AS   last_ts , \n     date_trunc ( 'day' ,   cal . start_ts ):: date               AS   cal_date , \n     extract ( hour   from   cal . start_ts )                     AS   cal_hour , \n     extract ( epoch   from   age ( cal . end_ts ,   cal . start_ts ))   AS   cal_seconds  FROM   ( \n     -- build virtual table of all hours between \n     -- a date range \n     SELECT \n         start_ts , \n         start_ts   +   interval   '1 hour'   AS   end_ts \n         FROM   generate_series ( '2017-03-01' :: date , \n                              '2017-03-03' :: timestamp   -   interval   '1 hour' , \n                              interval   '1 hour' \n         )   AS   t ( start_ts ) \n     )   AS   cal  LEFT   JOIN   ( \n     -- build virtual table of uptimes \n     SELECT   * \n     FROM   ( \n         VALUES \n         ( '2017-03-01 01:15:00-06' :: timestamp ,   '2017-03-01 02:15:00-06' :: timestamp ), \n         ( '2017-03-01 08:00:00-06' ,   '2017-03-01 20:00:00-06' ), \n         ( '2017-03-02 19:00:00-06' ,   null ) \n     )   AS   t ( start_ts ,   end_ts )  )   AS   uptime   ON   cal . end_ts   >   uptime . start_ts   AND   cal . start_ts   <=   coalesce ( uptime . end_ts ,   current_timestamp )         first_ts       |       last_ts       |  cal_date  | cal_hour | cal_seconds\n---------------------+---------------------+------------+----------+-------------\n                     | 2017-03-01 01:00:00 | 2017-03-01 |        0 |        3600\n 2017-03-01 01:15:00 | 2017-03-01 02:00:00 | 2017-03-01 |        1 |        3600\n 2017-03-01 02:00:00 | 2017-03-01 02:15:00 | 2017-03-01 |        2 |        3600\n                     | 2017-03-01 04:00:00 | 2017-03-01 |        3 |        3600\n                     | 2017-03-01 05:00:00 | 2017-03-01 |        4 |        3600\n                     | 2017-03-01 06:00:00 | 2017-03-01 |        5 |        3600\n                     | 2017-03-01 07:00:00 | 2017-03-01 |        6 |        3600\n                     | 2017-03-01 08:00:00 | 2017-03-01 |        7 |        3600\n 2017-03-01 08:00:00 | 2017-03-01 09:00:00 | 2017-03-01 |        8 |        3600\n ...\n 2017-03-01 20:00:00 | 2017-03-01 20:00:00 | 2017-03-01 |       20 |        3600\n                     | 2017-03-01 22:00:00 | 2017-03-01 |       21 |        3600\n ... \n                     | 2017-03-02 19:00:00 | 2017-03-02 |       18 |        3600\n 2017-03-02 19:00:00 | 2017-03-02 20:00:00 | 2017-03-02 |       19 |        3600\n ...\n 2017-03-02 23:00:00 | 2017-03-03 00:00:00 | 2017-03-02 |       23 |        3600\n(48 rows)",
            "title": "Time to compute some timing"
        },
        {
            "location": "/blog/2017/what-the-sql-lateral/#subquery-subquery-whats-the-worry",
            "text": "SQL is all about nested subqueries. It's hard to escape without creating\nviews, but who has time to lookup that  syntax  and  get their  DBA's  permission to run the DDL?!?  Let's add some duration times to the result set. We'll use the traditional sub\nquery for it.  SELECT \n     -- calculate uptime seconds \n     coalesce ( \n       extract ( epoch   FROM   age ( last_ts ,   first_ts )), \n       0 \n     )   AS   up_seconds , \n     *  FROM   ( \n     SELECT \n         -- will use `first_ts` and `last_ts` to calculate uptime duration \n         CASE   WHEN   uptime . start_ts   IS   NOT   NULL   THEN \n             greatest ( uptime . start_ts ,   cal . start_ts ) \n         END                                                 AS   first_ts , \n         least ( cal . end_ts ,   uptime . end_ts )                    AS   last_ts , \n         date_trunc ( 'day' ,   cal . start_ts ):: date               AS   cal_date , \n         extract ( hour   from   cal . start_ts )                     AS   cal_hour , \n         extract ( epoch   from   age ( cal . end_ts ,   cal . start_ts ))   AS   cal_seconds \n     FROM   ( \n         -- build virtual table of all hours between \n         -- a date range \n         SELECT \n             start_ts , \n             start_ts   +   interval   '1 hour'   AS   end_ts \n             FROM   generate_series ( '2017-03-01' :: date , \n                                  '2017-03-03' :: timestamp   -   interval   '1 hour' , \n                                  interval   '1 hour' \n             )   AS   t ( start_ts ) \n     )   AS   cal \n     LEFT   JOIN   ( \n         -- build virtual table of uptimes \n         SELECT   * \n         FROM   ( \n             VALUES \n             ( '2017-03-01 01:15:00-06' :: timestamp ,   '2017-03-01 02:15:00-06' :: timestamp ), \n             ( '2017-03-01 08:00:00-06' ,   '2017-03-01 20:00:00-06' ), \n             ( '2017-03-02 19:00:00-06' ,   null ) \n         )   AS   t ( start_ts ,   end_ts ) \n     )   AS   uptime   ON   cal . end_ts   >   uptime . start_ts   AND   cal . start_ts   <=   coalesce ( uptime . end_ts ,   current_timestamp )  )   t1    up_seconds\n------------\n          0\n       2700\n        900\n          0\n          0\n...\n       3600\n(48 rows)  Without the subquery we'd be getting into even more nested function calls and\nwould have to double compute values or have no visibility in the intermediate\nsteps. We could have calculated  up_seconds  directly in the first query which\nintroduced  first_ts  and  last_ts . That would look like this:  SELECT \n     coalesce ( \n         extract ( epoch   FROM \n             age ( \n                 least ( cal . end_ts ,   uptime . end_ts ),  \n                 CASE   WHEN   uptime . start_ts   IS   NOT   NULL   THEN \n                   greatest ( uptime . start_ts ,   cal . start_ts ) \n                 END \n             ) \n         ), \n         0 \n     )   AS   up_seconds  FROM   --- ...   It's not for the weak stomach, but frankly speaking, neither is the subquery...",
            "title": "Subquery, Subquery, What's the Worry?"
        },
        {
            "location": "/blog/2017/what-the-sql-lateral/#enough-nesting-lateral-join-save-me",
            "text": "Lateral joins can give us the best of both worlds: reduced subquery nesting and\ntraceable computed values. We're going to move the initial computed values like first_ts  and  last_ts , move them to a virtual table then  JOIN LATERAL  so\nthey can get their own table alias. We'll do it again for  up_seconds  and use first_ts  and  last_ts  from its sibling table.  SELECT \n     t2 . up_seconds  FROM   ( \n     -- build virtual table of all hours between \n     -- a date range \n     SELECT \n         start_ts , \n         start_ts   +   interval   '1 hour'   AS   end_ts \n         FROM   generate_series ( '2017-03-01' :: date , \n                              '2017-03-03' :: timestamp   -   interval   '1 hour' , \n                              interval   '1 hour' \n         )   AS   t ( start_ts ) \n     )   AS   cal  LEFT   JOIN   ( \n     -- build virtual table of uptimes \n     SELECT   * \n     FROM   ( \n         VALUES \n         ( '2017-03-01 01:15:00-06' :: timestamp ,   '2017-03-01 02:15:00-06' :: timestamp ), \n         ( '2017-03-01 08:00:00-06' ,   '2017-03-01 20:00:00-06' ), \n         ( '2017-03-02 19:00:00-06' ,   null ) \n     )   AS   t ( start_ts ,   end_ts )  )   AS   uptime   ON   cal . end_ts   >   uptime . start_ts   AND   cal . start_ts   <=   coalesce ( uptime . end_ts ,   current_timestamp )  JOIN   LATERAL   ( \n   SELECT \n       -- will use `first_ts` and `last_ts` to calculate uptime duration \n     CASE   WHEN   uptime . start_ts   IS   NOT   NULL   THEN \n         greatest ( uptime . start_ts ,   cal . start_ts ) \n     END                                                 AS   first_ts , \n     least ( cal . end_ts ,   uptime . end_ts )                    AS   last_ts , \n     date_trunc ( 'day' ,   cal . start_ts ):: date               AS   cal_date , \n     extract ( hour   from   cal . start_ts )                     AS   cal_hour , \n     extract ( epoch   from   age ( cal . end_ts ,   cal . start_ts ))   AS   cal_seconds  )   t1   ON   true  JOIN   LATERAL   ( \n   -- calculate uptime seconds for the time slice \n   SELECT \n     coalesce ( \n         extract ( epoch   FROM   age ( last_ts ,   first_ts )), \n         0 \n     )   AS   up_seconds  )   t2   ON   true   This gives us the same results but without the deep nesting.   up_seconds\n------------\n          0\n       2700\n        900\n          0\n          0\n       3600\n...\n       3600\n(48 rows)  What's great about this strategy is we can quickly choose which columns to see\nas we build up the query.  SELECT \n   t2 . up_seconds \n   ...  -- or --  SELECT \n   t2 . * , \n   t1 . *   Let's build up the final calculation using the same strategy:  SELECT \n   t2 . * , \n   t3 . *  FROM   ...  JOIN   LATERAL   ( \n   -- calculate percentage between uptime seconds and available seconds \n   -- within the time slice \n   SELECT \n     up_seconds   /   cal_seconds   AS   up_pct  )   t3   ON   true    up_seconds | up_pct\n------------+--------\n          0 |      0\n       2700 |   0.75\n        900 |   0.25\n          0 |      0\n...\n       3600 |      1\n(48 rows)",
            "title": "Enough Nesting, LATERAL join save me!"
        },
        {
            "location": "/blog/2017/what-the-sql-lateral/#plot-the-hours",
            "text": "Now we have all the computed data we need. Let's plot it as a cross tab (but not\nactually use  crosstab )  We'll need to consolidate the long list of data by  cal_date  and pivot the cal_hour  as a column and  up_pct  as a value. In case of overlapping uptimes\nwe'll be pessimists and choose the lowest or  min  uptime percentage.  The final query looks like:  SELECT \n     cal_date , \n     max ( CASE   WHEN   cal_hour   =   0   THEN   up_pct    END )   AS   hour_0 , \n     max ( CASE   WHEN   cal_hour   =   1   THEN   up_pct    END )   AS   hour_1 , \n     max ( CASE   WHEN   cal_hour   =   2   THEN   up_pct    END )   AS   hour_2 , \n     max ( CASE   WHEN   cal_hour   =   3   THEN   up_pct    END )   AS   hour_3 , \n     max ( CASE   WHEN   cal_hour   =   4   THEN   up_pct    END )   AS   hour_4 , \n     max ( CASE   WHEN   cal_hour   =   5   THEN   up_pct    END )   AS   hour_5 , \n     max ( CASE   WHEN   cal_hour   =   6   THEN   up_pct    END )   AS   hour_6 , \n     max ( CASE   WHEN   cal_hour   =   7   THEN   up_pct    END )   AS   hour_7 , \n     max ( CASE   WHEN   cal_hour   =   8   THEN   up_pct    END )   AS   hour_8 , \n     max ( CASE   WHEN   cal_hour   =   9   THEN   up_pct    END )   AS   hour_9 , \n     max ( CASE   WHEN   cal_hour   =   10   THEN   up_pct   END )   AS   hour_10 , \n     max ( CASE   WHEN   cal_hour   =   11   THEN   up_pct   END )   AS   hour_11 , \n     max ( CASE   WHEN   cal_hour   =   12   THEN   up_pct   END )   AS   hour_12 , \n     max ( CASE   WHEN   cal_hour   =   13   THEN   up_pct   END )   AS   hour_13 , \n     max ( CASE   WHEN   cal_hour   =   14   THEN   up_pct   END )   AS   hour_14 , \n     max ( CASE   WHEN   cal_hour   =   15   THEN   up_pct   END )   AS   hour_15 , \n     max ( CASE   WHEN   cal_hour   =   16   THEN   up_pct   END )   AS   hour_16 , \n     max ( CASE   WHEN   cal_hour   =   17   THEN   up_pct   END )   AS   hour_17 , \n     max ( CASE   WHEN   cal_hour   =   18   THEN   up_pct   END )   AS   hour_18 , \n     max ( CASE   WHEN   cal_hour   =   19   THEN   up_pct   END )   AS   hour_19 , \n     max ( CASE   WHEN   cal_hour   =   20   THEN   up_pct   END )   AS   hour_20 , \n     max ( CASE   WHEN   cal_hour   =   21   THEN   up_pct   END )   AS   hour_21 , \n     max ( CASE   WHEN   cal_hour   =   22   THEN   up_pct   END )   AS   hour_22 , \n     max ( CASE   WHEN   cal_hour   =   23   THEN   up_pct   END )   AS   hour_23  FROM   ( \n     -- build virtual table of all hours between \n     -- a date range \n     SELECT \n         start_ts , \n         start_ts   +   interval   '1 hour'   AS   end_ts \n         FROM   generate_series ( '2017-03-01' :: date , \n                              '2017-03-03' :: timestamp   -   interval   '1 hour' , \n                              interval   '1 hour' \n         )   AS   t ( start_ts ) \n     )   AS   cal  LEFT   JOIN   ( \n     -- build virtual table of uptimes \n     SELECT   * \n     FROM   ( \n         VALUES \n         ( '2017-03-01 01:15:00-06' :: timestamp ,   '2017-03-01 02:15:00-06' :: timestamp ), \n         ( '2017-03-01 08:00:00-06' ,   '2017-03-01 20:00:00-06' ), \n         ( '2017-03-02 19:00:00-06' ,   null ) \n     )   AS   t ( start_ts ,   end_ts )  )   AS   uptime   ON   cal . end_ts   >   uptime . start_ts   AND   cal . start_ts   <=   coalesce ( uptime . end_ts ,   current_timestamp )  JOIN   LATERAL   ( \n   SELECT \n       -- will use `first_ts` and `last_ts` to calculate uptime duration \n     CASE   WHEN   uptime . start_ts   IS   NOT   NULL   THEN \n         greatest ( uptime . start_ts ,   cal . start_ts ) \n     END                                                 AS   first_ts , \n     least ( cal . end_ts ,   uptime . end_ts )                    AS   last_ts , \n     date_trunc ( 'day' ,   cal . start_ts ):: date               AS   cal_date , \n     extract ( hour   from   cal . start_ts )                     AS   cal_hour , \n     extract ( epoch   from   age ( cal . end_ts ,   cal . start_ts ))   AS   cal_seconds  )   t1   ON   true  JOIN   LATERAL   ( \n   SELECT \n     coalesce ( \n         extract ( epoch   FROM   age ( last_ts ,   first_ts )), \n         0 \n     )   AS   up_seconds  )   t2   ON   true  JOIN   LATERAL   ( \n   -- calculate percentage between uptime seconds and available seconds \n   -- within the time slice \n   SELECT \n   up_seconds   /   cal_seconds   AS   up_pct  )   t3   ON   true  GROUP   BY   cal_date     cal_date  | hour_0 | hour_1 | hour_2 | hour_3 | ... | hour_23\n------------+--------+--------+--------+--------+ ... +---------\n 2017-03-01 |      0 |   0.75 |   0.25 |      0 | ... |       0\n 2017-03-02 |      0 |      0 |      0 |      0 | ... |       1\n(2 rows)",
            "title": "Plot the Hours"
        },
        {
            "location": "/blog/2017/what-the-sql-lateral/#more-than-cte-and-cross-join",
            "text": "This example only scratches the surface of  LATERAL s super powers. On the\nsurface  LATERAL  can do things  CTE , cross join, and  WINDOW  can do.\nPostgreSQL describe  LATERAL  as:   Subqueries appearing in FROM can be preceded by the key word LATERAL.\nThis allows them to reference columns provided by preceding FROM items.\n(Without LATERAL, each subquery is evaluated independently and so cannot\ncross-reference any other FROM item.)   TL;DR -  LATERAL  allows subqueries to reference earlier tables.",
            "title": "More than CTE and Cross Join"
        },
        {
            "location": "/blog/2017/what-the-sql-lateral/#references",
            "text": "Postgres Lateral Joins",
            "title": "References"
        },
        {
            "location": "/blog/2017/what-the-sql-window/",
            "text": "What the SQL?!? WINDOW\n\u00b6\n\n\n\n\nToday's \"What the SQL?!?\" features the keyword \nWINDOW\n. This clause allows\nus to elegantly select results from the previous results from the previous results\nfrom the previous results...\n\n\n\n\n\nPlease note, our target database is PostgreSQL. These examples may work with\nother databases, but might need some massaging to get them to work properly.\nSearch online for the specific vendor's documentation if errors pop up.\nTry searching for \"WINDOW queries {{DB VENDOR NAME}}\". Not all database vendors\nsupport the keyword \nWINDOW\n.\n\n\nCreate Sample Data\n\u00b6\n\n\nDROP\n \nTABLE\n \nIF\n \nEXISTS\n \nsample_moves\n;\n\n\nCREATE\n \nTABLE\n \nsample_moves\n \nAS\n\n  \nSELECT\n\n    \ncolumn1\n::\nint\n     \nAS\n \nid\n,\n\n    \ncolumn2\n::\nvarchar\n \nAS\n \nname\n,\n\n    \ncolumn3\n::\nvarchar\n \nAS\n \naddress\n,\n\n    \ncolumn4\n::\ndate\n \nAS\n \nmoved_at\n\n  \nFROM\n \n(\n\n    \nVALUES\n\n      \n(\n1\n,\n \n'Alice'\n \n,\n \n'1 Main St'\n,\n \n'2017-01-01'\n),\n\n      \n(\n2\n,\n \n'Bob'\n   \n,\n \n'2 Main St'\n,\n \n'2017-02-01'\n),\n\n      \n(\n3\n,\n \n'Cat'\n   \n,\n \n'2 Main St'\n,\n \n'2017-03-01'\n),\n\n      \n(\n4\n,\n \n'Dan Sr'\n  \n,\n \n'3 Main St'\n,\n  \n'1970-04-01'\n),\n\n      \n(\n5\n,\n \n'Dan Jr'\n  \n,\n \n'3 Main St'\n,\n  \n'2001-04-01'\n),\n\n      \n(\n6\n,\n \n'Dan 3rd'\n \n,\n \n'3 Main St'\n,\n \n'2017-04-01'\n)\n\n  \n)\n \nas\n \nt\n\n\n;\n\n\n\nCREATE\n \nINDEX\n \nON\n \nsample_moves\n(\naddress\n);\n\n\n\nSELECT\n \n*\n \nFROM\n \nsample_moves\n;\n\n\n\n\n\nResults:\n\u00b6\n\n\n\n\n\n\n\n\nid\n\n\nname\n\n\naddress\n\n\nmoved_at\n\n\n\n\n\n\n\n\n\n\n1\n\n\nAlice\n\n\n1 Main St\n\n\n2017-01-01\n\n\n\n\n\n\n2\n\n\nBob\n\n\n2 Main St\n\n\n2017-02-01\n\n\n\n\n\n\n3\n\n\nCat\n\n\n2 Main St\n\n\n2017-03-01\n\n\n\n\n\n\n4\n\n\nDan Sr\n\n\n3 Main St\n\n\n1970-04-01\n\n\n\n\n\n\n5\n\n\nDan Jr\n\n\n3 Main St\n\n\n2001-04-01\n\n\n\n\n\n\n6\n\n\nDan 3\nrd\n\n\n3 Main St\n\n\n2017-04-01\n\n\n\n\n\n\n\n\nLife Without Windows\n\u00b6\n\n\nA quick poem...\n\n\n\n\nEyes big and wide,     \n\nnothing seen inside.   \n\nFeeling around         \n\nnothing abound.        \n\nThis things wet,       \n\ntoxic I bet.           \n\nClosing my eyes,       \n\nstill can't rest.      \n\nHaving a window,       \n\nwould be best.         \n\n\n\n\nHow many people live at each address?\n\u00b6\n\n\nUsing a standard \nGROUP BY\n with \nCOUNT\n we consolidate the records and count \nhow many rows belong to each address.\n\n\n\n\nTip\n: \nCOUNT(1)\n is more efficient than \nCOUNT(*)\n.\n\n\n\n\nSELECT\n\n  \naddress\n,\n\n  \nCOUNT\n(\n1\n)\n \ntotal\n\n\nFROM\n \nsample_moves\n\n\nGROUP\n \nBY\n \naddress\n\n\nORDER\n \nBY\n \naddress\n;\n\n\n\n\n\nResults:\n\u00b6\n\n\n\n\n\n\n\n\naddress\n\n\ntotal\n\n\n\n\n\n\n\n\n\n\n1 Main St\n\n\n1\n\n\n\n\n\n\n2 Main St\n\n\n2\n\n\n\n\n\n\n3 Main St\n\n\n3\n\n\n\n\n\n\n\n\nHow many people live with each person?\n\u00b6\n\n\nEnter subquery land. Life without windows is not exciting.\n\n\nSELECT\n\n  \n*\n,\n\n  \n(\n\n    \nSELECT\n\n      \n-- everyone at the address, minus the person\n\n      \nCOUNT\n(\n1\n)\n \n-\n \n1\n\n    \nFROM\n \nsample_moves\n \nt2\n\n    \nWHERE\n \nt2\n.\naddress\n \n=\n \nt1\n.\naddress\n\n  \n)\n \nAS\n \nothers\n\n\nFROM\n \nsample_moves\n \nt1\n;\n\n\n\n\n\nResults:\n\u00b6\n\n\n\n\n\n\n\n\nid\n\n\nname\n\n\naddress\n\n\nmoved_at\n\n\nothers\n\n\n\n\n\n\n\n\n\n\n1\n\n\nAlice\n\n\n1 Main St\n\n\n2017-01-01\n\n\n0\n\n\n\n\n\n\n2\n\n\nBob\n\n\n2 Main St\n\n\n2017-02-01\n\n\n1\n\n\n\n\n\n\n3\n\n\nCat\n\n\n2 Main St\n\n\n2017-03-01\n\n\n1\n\n\n\n\n\n\n4\n\n\nDan Sr\n\n\n3 Main St\n\n\n1970-04-01\n\n\n2\n\n\n\n\n\n\n5\n\n\nDan Jr\n\n\n3 Main St\n\n\n2001-04-01\n\n\n2\n\n\n\n\n\n\n6\n\n\nDan 3\nrd\n\n\n3 Main St\n\n\n2017-04-01\n\n\n2\n\n\n\n\n\n\n\n\nJOIN\n works, too\n\u00b6\n\n\nSELECT\n\n  \nt1\n.\n*\n,\n\n  \nt2\n.\nothers\n\n\nFROM\n \nsample_moves\n \nt1\n\n\nJOIN\n \n(\n\n  \nSELECT\n\n    \naddress\n,\n\n    \nCOUNT\n(\n1\n)\n \n-\n \n1\n \nas\n \nothers\n\n  \nFROM\n \nsample_moves\n\n  \nGROUP\n \nBY\n \naddress\n\n  \nORDER\n \nBY\n \naddress\n\n\n)\n \nt2\n \nUSING\n \n(\naddress\n);\n\n\n\n\n\nAnd so does \nJOIN LATERAL\n\u00b6\n\n\nSELECT\n\n  \nt1\n.\n*\n,\n\n  \nt2\n.\nothers\n\n\nFROM\n \nsample_moves\n \nt1\n\n\nJOIN\n \nLATERAL\n \n(\n\n  \nSELECT\n\n    \naddress\n,\n\n    \nCOUNT\n(\n1\n)\n \n-\n \n1\n \nas\n \nothers\n\n  \nFROM\n \nsample_moves\n \nsub\n\n  \nWHERE\n \nsub\n.\naddress\n \n=\n \nt1\n.\naddress\n\n  \nGROUP\n \nBY\n \naddress\n\n  \nORDER\n \nBY\n \naddress\n\n\n)\n \nt2\n \nON\n \ntrue\n;\n\n\n\n\n\nThat's nice, but who moved in first?\n\u00b6\n\n\nSELECT\n\n  \n*\n,\n\n  \n(\n\n    \nSELECT\n\n      \nCOUNT\n(\n1\n)\n \n-\n \n1\n\n    \nFROM\n \nsample_moves\n \nt2\n\n    \nWHERE\n \nt2\n.\naddress\n \n=\n \nt1\n.\naddress\n\n  \n)\n \nAS\n \nothers\n,\n\n  \n(\n\n    \nSELECT\n\n      \nname\n\n    \nFROM\n \nsample_moves\n \nt3\n\n    \nWHERE\n \nt3\n.\naddress\n \n=\n \nt1\n.\naddress\n\n    \nORDER\n \nBY\n \nmoved_at\n \nASC\n\n    \nLIMIT\n \n1\n\n  \n)\n \nAS\n \nfirst_person\n\n\nFROM\n \nsample_moves\n \nt1\n;\n\n\n\n\n\nWait I thought this was about windows?!?\n\u00b6\n\n\nThe keyword \nOVER\n is the gateway drug into \nWINDOW\n functions. Using \nOVER\n\nwith parenthesis is an inline window. The \nPARTITION BY\n keywords gives similar\nfunctionality to \nGROUP BY\n and \nJOIN ... USING\n all in one power packed\nstatement. It can never reduce the number of records in a result set which is\nthe same behavior expected of a correlated subquery.\n\n\nPARTITION BY\n is treated the same as the traditional \nGROUP BY\n. The \nORDER BY\n\nalso has the same behavior as its use in a standard query.\n\n\nSELECT\n\n  \n*\n,\n\n  \n(\ncount\n(\n1\n)\n \nOVER\n \n(\nPARTITION\n \nBY\n \naddress\n))\n \n-\n \n1\n                      \nAS\n \nothers\n,\n\n  \nfirst_value\n(\nname\n)\n \nOVER\n \n(\nPARTITION\n \nBY\n \naddress\n \nORDER\n \nBY\n \nmoved_at\n)\n \nAS\n \nfirst_moved\n\n\nFROM\n \nsample_moves\n;\n\n\n\n\n\nResults\n\u00b6\n\n\n\n\n\n\n\n\nid\n\n\nname\n\n\naddress\n\n\nmoved_at\n\n\nothers\n\n\nfirst_moved\n\n\n\n\n\n\n\n\n\n\n1\n\n\nAlice\n\n\n1 Main St\n\n\n2017-01-01\n\n\n0\n\n\nAlice\n\n\n\n\n\n\n2\n\n\nBob\n\n\n2 Main St\n\n\n2017-02-01\n\n\n1\n\n\nBob\n\n\n\n\n\n\n3\n\n\nCat\n\n\n2 Main St\n\n\n2017-03-01\n\n\n1\n\n\nBob\n\n\n\n\n\n\n4\n\n\nDan Sr\n\n\n3 Main St\n\n\n1970-04-01\n\n\n2\n\n\nDan Sr\n\n\n\n\n\n\n5\n\n\nDan Jr\n\n\n3 Main St\n\n\n2001-04-01\n\n\n2\n\n\nDan Sr\n\n\n\n\n\n\n6\n\n\nDan 3\nrd\n\n\n3 Main St\n\n\n2017-04-01\n\n\n2\n\n\nDan Sr\n\n\n\n\n\n\n\n\nA picture with arrows worth a thousand words:\n\n\n\n\nThat doesn't look very DRY. Finally, a \nWINDOW\n\u00b6\n\n\nThe \nWINDOW\n keyword allows us to alias the options of the \nOVER\n clause. Namely\nthe expression \n(...)\n between and including the parenthesis.\n\n\nIn the following example we add the use of \nRANGE\n to provide additional\ndirection to the windowing clause.\n\n\nSELECT\n\n  \n*\n,\n\n  \n(\ncount\n(\n1\n)\n \nOVER\n \nw\n)\n \n-\n \n1\n \nAS\n \nothers\n,\n\n  \nfirst_value\n(\nname\n)\n \nOVER\n \nw\n \nAS\n \nfirst_moved\n,\n\n  \nlast_value\n(\nname\n)\n  \nOVER\n \nw\n \nAS\n \nlast_moved\n\n\nFROM\n \nsample_moves\n\n\nWINDOW\n \nw\n \nAS\n \n(\n\n  \nPARTITION\n \nBY\n \naddress\n \nORDER\n \nBY\n \nmoved_at\n\n  \nRANGE\n \nBETWEEN\n \nUNBOUNDED\n \nPRECEDING\n \nAND\n \nUNBOUNDED\n \nFOLLOWING\n\n\n);\n\n\n\n\n\nResults\n\u00b6\n\n\n\n\n\n\n\n\nid\n\n\nname\n\n\naddress\n\n\nmoved_at\n\n\nothers\n\n\nfirst_moved\n\n\nlast_moved\n\n\n\n\n\n\n\n\n\n\n1\n\n\nAlice\n\n\n1 Main St\n\n\n2017-01-01\n\n\n0\n\n\nAlice\n\n\nAlice\n\n\n\n\n\n\n2\n\n\nBob\n\n\n2 Main St\n\n\n2017-02-01\n\n\n0\n\n\nBob\n\n\nBob\n\n\n\n\n\n\n3\n\n\nCat\n\n\n2 Main St\n\n\n2017-03-01\n\n\n1\n\n\nBob\n\n\nCat\n\n\n\n\n\n\n4\n\n\nDan Sr\n\n\n3 Main St\n\n\n1970-04-01\n\n\n0\n\n\nDan Sr\n\n\nDan Sr\n\n\n\n\n\n\n5\n\n\nDan Jr\n\n\n3 Main St\n\n\n2001-04-01\n\n\n1\n\n\nDan Sr\n\n\nDan Jr\n\n\n\n\n\n\n6\n\n\nDan 3\nrd\n\n\n3 Main St\n\n\n2017-04-01\n\n\n2\n\n\nDan Sr\n\n\nDan 3\nrd\n\n\n\n\n\n\n\n\n-- Previous and Next Record\n\n\nSELECT\n\n  \n*\n,\n\n  \n(\ncount\n(\n1\n)\n \nOVER\n \nw\n)\n \n-\n \n1\n \nAS\n \nothers\n,\n\n  \nfirst_value\n(\nname\n)\n \nOVER\n \nw\n \nAS\n \nfirst_moved\n,\n\n  \nlast_value\n(\nname\n)\n  \nOVER\n \nw\n \nAS\n \nlast_moved\n,\n\n  \nlag\n(\nid\n)\n \nOVER\n \n(\nORDER\n \nBY\n \nid\n)\n \nAS\n \nprev_id\n,\n\n  \nlead\n(\nid\n)\n \nOVER\n \n(\nORDER\n \nBY\n \nid\n)\n \nAS\n \nnext_id\n\n\nFROM\n \nsample_moves\n\n\nWINDOW\n \nw\n \nAS\n \n(\n\n  \nPARTITION\n \nBY\n \naddress\n \n  \nORDER\n \nBY\n \nmoved_at\n\n  \nRANGE\n \nBETWEEN\n \nUNBOUNDED\n \nPRECEDING\n \nAND\n \nUNBOUNDED\n \nFOLLOWING\n\n\n)\n\n\nORDER\n \nBY\n \naddress\n;\n\n\n\n\n\nResults\n\u00b6\n\n\n\n\n\n\n\n\nid\n\n\nname\n\n\naddress\n\n\nmoved_at\n\n\nothers\n\n\nfirst_moved\n\n\nlast_moved\n\n\nprev_id\n\n\nnext_id\n\n\n\n\n\n\n\n\n\n\n1\n\n\nAlice\n\n\n1 Main St\n\n\n2017-01-01\n\n\n0\n\n\nAlice\n\n\nAlice\n\n\n\n\n2\n\n\n\n\n\n\n2\n\n\nBob\n\n\n2 Main St\n\n\n2017-02-01\n\n\n1\n\n\nBob\n\n\nCat\n\n\n1\n\n\n3\n\n\n\n\n\n\n3\n\n\nCat\n\n\n2 Main St\n\n\n2017-03-01\n\n\n1\n\n\nBob\n\n\nCat\n\n\n2\n\n\n4\n\n\n\n\n\n\n4\n\n\nDan Sr\n\n\n3 Main St\n\n\n1970-04-01\n\n\n2\n\n\nDan Sr\n\n\nDan 3\nrd\n\n\n3\n\n\n5\n\n\n\n\n\n\n5\n\n\nDan Jr\n\n\n3 Main St\n\n\n2001-04-01\n\n\n2\n\n\nDan Sr\n\n\nDan 3\nrd\n\n\n4\n\n\n6\n\n\n\n\n\n\n6\n\n\nDan 3\nrd\n\n\n3 Main St\n\n\n2017-04-01\n\n\n2\n\n\nDan Sr\n\n\nDan 3\nrd\n\n\n5\n\n\n\n\n\n\n\n\n\n\nList Window Functions\n\u00b6\n\n\nHere is a list from \nPostgres docs\n\nof all the window functions. In addition to these, \nany regular aggregate function\n can be use within a window.\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrow_number()\n\n\nnumber of the current row within its partition, counting from 1\n\n\n\n\n\n\nrank()\n\n\nrank of the current row with gaps; same as\u00a0row_number\u00a0of its first peer\n\n\n\n\n\n\ndense_rank()\n\n\nrank of the current row without gaps; this function counts peer groups\n\n\n\n\n\n\npercent_rank()\n\n\nrelative rank of the current row: (rank\u00a0- 1) / (total rows - 1)\n\n\n\n\n\n\ncume_dist()\n\n\nrelative rank of the current row: (number of rows preceding or peer with current row) / (total rows)\n\n\n\n\n\n\nntile\n\n\ninteger ranging from 1 to the argument value, dividing the partition as equally as possible\n\n\n\n\n\n\nlag()\n\n\nreturns\u00a0value\u00a0evaluated at the row that is\u00a0offset\u00a0rows before the current row within the partition; if there is no such row, instead return\u00a0default\u00a0(which must be of the same type as\u00a0value). Both\u00a0offset\u00a0and\u00a0default\u00a0are evaluated with respect to the current row. If omitted,\u00a0offset\u00a0defaults to 1 and\u00a0default\u00a0to null\n\n\n\n\n\n\nlead()\n\n\nreturns\u00a0value\u00a0evaluated at the row that is\u00a0offset\u00a0rows after the current row within the partition; if there is no such row, instead return\u00a0default\u00a0(which must be of the same type as\u00a0value). Both\u00a0offset\u00a0and\u00a0default\u00a0are evaluated with respect to the current row. If omitted,\u00a0offset\u00a0defaults to 1 and\u00a0default\u00a0to null\n\n\n\n\n\n\nfirst_value()\n\n\nreturns\u00a0value\u00a0evaluated at the row that is the first row of the window frame\n\n\n\n\n\n\nlast_value()\n\n\nreturns\u00a0value\u00a0evaluated at the row that is the last row of the window frame\n\n\n\n\n\n\nnth_value()\n\n\nreturns\u00a0value\u00a0evaluated at the row that is the\u00a0nth\u00a0row of the window frame (counting from 1); null if no such row\n\n\n\n\n\n\n\n\nReferences\n\u00b6\n\n\n\n\nPostgres Window Tutorial: \nhttps://www.postgresql.org/docs/9.3/static/tutorial-window.html\n\n\nPostgres Window Functions: \nhttps://www.postgresql.org/docs/9.3/static/functions-window.html\n\n\nPostgres Window Syntax: \nhttps://www.postgresql.org/docs/9.3/static/sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS",
            "title": "What the SQL?!? WINDOW"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#what-the-sql-window",
            "text": "Today's \"What the SQL?!?\" features the keyword  WINDOW . This clause allows\nus to elegantly select results from the previous results from the previous results\nfrom the previous results...   Please note, our target database is PostgreSQL. These examples may work with\nother databases, but might need some massaging to get them to work properly.\nSearch online for the specific vendor's documentation if errors pop up.\nTry searching for \"WINDOW queries {{DB VENDOR NAME}}\". Not all database vendors\nsupport the keyword  WINDOW .",
            "title": "What the SQL?!? WINDOW"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#create-sample-data",
            "text": "DROP   TABLE   IF   EXISTS   sample_moves ;  CREATE   TABLE   sample_moves   AS \n   SELECT \n     column1 :: int       AS   id , \n     column2 :: varchar   AS   name , \n     column3 :: varchar   AS   address , \n     column4 :: date   AS   moved_at \n   FROM   ( \n     VALUES \n       ( 1 ,   'Alice'   ,   '1 Main St' ,   '2017-01-01' ), \n       ( 2 ,   'Bob'     ,   '2 Main St' ,   '2017-02-01' ), \n       ( 3 ,   'Cat'     ,   '2 Main St' ,   '2017-03-01' ), \n       ( 4 ,   'Dan Sr'    ,   '3 Main St' ,    '1970-04-01' ), \n       ( 5 ,   'Dan Jr'    ,   '3 Main St' ,    '2001-04-01' ), \n       ( 6 ,   'Dan 3rd'   ,   '3 Main St' ,   '2017-04-01' ) \n   )   as   t  ;  CREATE   INDEX   ON   sample_moves ( address );  SELECT   *   FROM   sample_moves ;",
            "title": "Create Sample Data"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#results",
            "text": "id  name  address  moved_at      1  Alice  1 Main St  2017-01-01    2  Bob  2 Main St  2017-02-01    3  Cat  2 Main St  2017-03-01    4  Dan Sr  3 Main St  1970-04-01    5  Dan Jr  3 Main St  2001-04-01    6  Dan 3 rd  3 Main St  2017-04-01",
            "title": "Results:"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#life-without-windows",
            "text": "A quick poem...   Eyes big and wide,      \nnothing seen inside.    \nFeeling around          \nnothing abound.         \nThis things wet,        \ntoxic I bet.            \nClosing my eyes,        \nstill can't rest.       \nHaving a window,        \nwould be best.",
            "title": "Life Without Windows"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#how-many-people-live-at-each-address",
            "text": "Using a standard  GROUP BY  with  COUNT  we consolidate the records and count \nhow many rows belong to each address.   Tip :  COUNT(1)  is more efficient than  COUNT(*) .   SELECT \n   address , \n   COUNT ( 1 )   total  FROM   sample_moves  GROUP   BY   address  ORDER   BY   address ;",
            "title": "How many people live at each address?"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#results_1",
            "text": "address  total      1 Main St  1    2 Main St  2    3 Main St  3",
            "title": "Results:"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#how-many-people-live-with-each-person",
            "text": "Enter subquery land. Life without windows is not exciting.  SELECT \n   * , \n   ( \n     SELECT \n       -- everyone at the address, minus the person \n       COUNT ( 1 )   -   1 \n     FROM   sample_moves   t2 \n     WHERE   t2 . address   =   t1 . address \n   )   AS   others  FROM   sample_moves   t1 ;",
            "title": "How many people live with each person?"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#results_2",
            "text": "id  name  address  moved_at  others      1  Alice  1 Main St  2017-01-01  0    2  Bob  2 Main St  2017-02-01  1    3  Cat  2 Main St  2017-03-01  1    4  Dan Sr  3 Main St  1970-04-01  2    5  Dan Jr  3 Main St  2001-04-01  2    6  Dan 3 rd  3 Main St  2017-04-01  2",
            "title": "Results:"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#join-works-too",
            "text": "SELECT \n   t1 . * , \n   t2 . others  FROM   sample_moves   t1  JOIN   ( \n   SELECT \n     address , \n     COUNT ( 1 )   -   1   as   others \n   FROM   sample_moves \n   GROUP   BY   address \n   ORDER   BY   address  )   t2   USING   ( address );",
            "title": "JOIN works, too"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#and-so-does-join-lateral",
            "text": "SELECT \n   t1 . * , \n   t2 . others  FROM   sample_moves   t1  JOIN   LATERAL   ( \n   SELECT \n     address , \n     COUNT ( 1 )   -   1   as   others \n   FROM   sample_moves   sub \n   WHERE   sub . address   =   t1 . address \n   GROUP   BY   address \n   ORDER   BY   address  )   t2   ON   true ;",
            "title": "And so does JOIN LATERAL"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#thats-nice-but-who-moved-in-first",
            "text": "SELECT \n   * , \n   ( \n     SELECT \n       COUNT ( 1 )   -   1 \n     FROM   sample_moves   t2 \n     WHERE   t2 . address   =   t1 . address \n   )   AS   others , \n   ( \n     SELECT \n       name \n     FROM   sample_moves   t3 \n     WHERE   t3 . address   =   t1 . address \n     ORDER   BY   moved_at   ASC \n     LIMIT   1 \n   )   AS   first_person  FROM   sample_moves   t1 ;",
            "title": "That's nice, but who moved in first?"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#wait-i-thought-this-was-about-windows",
            "text": "The keyword  OVER  is the gateway drug into  WINDOW  functions. Using  OVER \nwith parenthesis is an inline window. The  PARTITION BY  keywords gives similar\nfunctionality to  GROUP BY  and  JOIN ... USING  all in one power packed\nstatement. It can never reduce the number of records in a result set which is\nthe same behavior expected of a correlated subquery.  PARTITION BY  is treated the same as the traditional  GROUP BY . The  ORDER BY \nalso has the same behavior as its use in a standard query.  SELECT \n   * , \n   ( count ( 1 )   OVER   ( PARTITION   BY   address ))   -   1                        AS   others , \n   first_value ( name )   OVER   ( PARTITION   BY   address   ORDER   BY   moved_at )   AS   first_moved  FROM   sample_moves ;",
            "title": "Wait I thought this was about windows?!?"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#results_3",
            "text": "id  name  address  moved_at  others  first_moved      1  Alice  1 Main St  2017-01-01  0  Alice    2  Bob  2 Main St  2017-02-01  1  Bob    3  Cat  2 Main St  2017-03-01  1  Bob    4  Dan Sr  3 Main St  1970-04-01  2  Dan Sr    5  Dan Jr  3 Main St  2001-04-01  2  Dan Sr    6  Dan 3 rd  3 Main St  2017-04-01  2  Dan Sr     A picture with arrows worth a thousand words:",
            "title": "Results"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#that-doesnt-look-very-dry-finally-a-window",
            "text": "The  WINDOW  keyword allows us to alias the options of the  OVER  clause. Namely\nthe expression  (...)  between and including the parenthesis.  In the following example we add the use of  RANGE  to provide additional\ndirection to the windowing clause.  SELECT \n   * , \n   ( count ( 1 )   OVER   w )   -   1   AS   others , \n   first_value ( name )   OVER   w   AS   first_moved , \n   last_value ( name )    OVER   w   AS   last_moved  FROM   sample_moves  WINDOW   w   AS   ( \n   PARTITION   BY   address   ORDER   BY   moved_at \n   RANGE   BETWEEN   UNBOUNDED   PRECEDING   AND   UNBOUNDED   FOLLOWING  );",
            "title": "That doesn't look very DRY. Finally, a WINDOW"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#results_4",
            "text": "id  name  address  moved_at  others  first_moved  last_moved      1  Alice  1 Main St  2017-01-01  0  Alice  Alice    2  Bob  2 Main St  2017-02-01  0  Bob  Bob    3  Cat  2 Main St  2017-03-01  1  Bob  Cat    4  Dan Sr  3 Main St  1970-04-01  0  Dan Sr  Dan Sr    5  Dan Jr  3 Main St  2001-04-01  1  Dan Sr  Dan Jr    6  Dan 3 rd  3 Main St  2017-04-01  2  Dan Sr  Dan 3 rd     -- Previous and Next Record  SELECT \n   * , \n   ( count ( 1 )   OVER   w )   -   1   AS   others , \n   first_value ( name )   OVER   w   AS   first_moved , \n   last_value ( name )    OVER   w   AS   last_moved , \n   lag ( id )   OVER   ( ORDER   BY   id )   AS   prev_id , \n   lead ( id )   OVER   ( ORDER   BY   id )   AS   next_id  FROM   sample_moves  WINDOW   w   AS   ( \n   PARTITION   BY   address  \n   ORDER   BY   moved_at \n   RANGE   BETWEEN   UNBOUNDED   PRECEDING   AND   UNBOUNDED   FOLLOWING  )  ORDER   BY   address ;",
            "title": "Results"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#results_5",
            "text": "id  name  address  moved_at  others  first_moved  last_moved  prev_id  next_id      1  Alice  1 Main St  2017-01-01  0  Alice  Alice   2    2  Bob  2 Main St  2017-02-01  1  Bob  Cat  1  3    3  Cat  2 Main St  2017-03-01  1  Bob  Cat  2  4    4  Dan Sr  3 Main St  1970-04-01  2  Dan Sr  Dan 3 rd  3  5    5  Dan Jr  3 Main St  2001-04-01  2  Dan Sr  Dan 3 rd  4  6    6  Dan 3 rd  3 Main St  2017-04-01  2  Dan Sr  Dan 3 rd  5",
            "title": "Results"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#list-window-functions",
            "text": "Here is a list from  Postgres docs \nof all the window functions. In addition to these,  any regular aggregate function  can be use within a window.     Function  Description      row_number()  number of the current row within its partition, counting from 1    rank()  rank of the current row with gaps; same as\u00a0row_number\u00a0of its first peer    dense_rank()  rank of the current row without gaps; this function counts peer groups    percent_rank()  relative rank of the current row: (rank\u00a0- 1) / (total rows - 1)    cume_dist()  relative rank of the current row: (number of rows preceding or peer with current row) / (total rows)    ntile  integer ranging from 1 to the argument value, dividing the partition as equally as possible    lag()  returns\u00a0value\u00a0evaluated at the row that is\u00a0offset\u00a0rows before the current row within the partition; if there is no such row, instead return\u00a0default\u00a0(which must be of the same type as\u00a0value). Both\u00a0offset\u00a0and\u00a0default\u00a0are evaluated with respect to the current row. If omitted,\u00a0offset\u00a0defaults to 1 and\u00a0default\u00a0to null    lead()  returns\u00a0value\u00a0evaluated at the row that is\u00a0offset\u00a0rows after the current row within the partition; if there is no such row, instead return\u00a0default\u00a0(which must be of the same type as\u00a0value). Both\u00a0offset\u00a0and\u00a0default\u00a0are evaluated with respect to the current row. If omitted,\u00a0offset\u00a0defaults to 1 and\u00a0default\u00a0to null    first_value()  returns\u00a0value\u00a0evaluated at the row that is the first row of the window frame    last_value()  returns\u00a0value\u00a0evaluated at the row that is the last row of the window frame    nth_value()  returns\u00a0value\u00a0evaluated at the row that is the\u00a0nth\u00a0row of the window frame (counting from 1); null if no such row",
            "title": "List Window Functions"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#references",
            "text": "Postgres Window Tutorial:  https://www.postgresql.org/docs/9.3/static/tutorial-window.html  Postgres Window Functions:  https://www.postgresql.org/docs/9.3/static/functions-window.html  Postgres Window Syntax:  https://www.postgresql.org/docs/9.3/static/sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS",
            "title": "References"
        },
        {
            "location": "/blog/2017/what-the-sql-recursive/",
            "text": "What the SQL?!? Recursive\n\u00b6\n\n\n\n\nToday's \"What the SQL?!?\" features the keyword \nRECURSIVE\n. This clause allows\nus to elegantly select results from the previous results from the previous results\nfrom the previous results...\n\n\n\n\n\nPlease note, our target database is PostgreSQL. These examples may work with\nother databases, but might need some massaging to get them to work properly.\nSearch online for the specific vendor's documentation if errors pop up.\nTry searching for \"RECURSIVE queries {{DB VENDOR NAME}}\". Not all database vendors\nsupport the keyword \nRECURSIVE\n.\n\n\nFibonacci Sequence\n\u00b6\n\n\nAccording to \nWikipedia\n:\n\n\n\n\nIn mathematics, the Fibonacci numbers are the numbers in the following integer\nsequence, called the Fibonacci sequence, and characterized by the fact that\nevery number after the first two is the sum of the two preceding ones:\n\n\n1, 1, 2, 3, 5, 8, 13, 21, 34, 55 ...\n\n\n\n\n\n\n\nSQL Solution\n\u00b6\n\n\nOur SQL solution will make use of the \nRECURSIVE\n \nCTE\n\nkeyword.\n\n\nWITH\n \nRECURSIVE\n \nt\n(\ni\n,\n \nfi\n,\n \nfib\n)\n \nAS\n \n(\n\n  \nSELECT\n\n    \n1\n,\n\n    \n0\n::\nNUMERIC\n,\n\n    \n1\n::\nNUMERIC\n\n  \nUNION\n \nALL\n\n  \nSELECT\n\n    \ni\n \n+\n \n1\n,\n\n    \nfib\n,\n\n    \nfi\n \n+\n \nfib\n\n  \nFROM\n \nt\n\n  \nWHERE\n \ni\n \n<\n \n10\n\n\n)\n\n\nSELECT\n\n  \ni\n,\n\n  \nfib\n\n\nFROM\n \nt\n\n\n\n\n\nThe Ins and Outs\n\u00b6\n\n\nHere's some inline colorful comments to explain the sections:\n\n\n\nMaybe arrows will help a little more with the flow of data:\n\n\n\nFibonacci Results\n\u00b6\n\n\nWhen you run the query, you'll get the following results:\n\n\n i  | fib\n----+-----\n  1 |   1\n  2 |   1\n  3 |   2\n  4 |   3\n  5 |   5\n  6 |   8\n  7 |  13\n  8 |  21\n  9 |  34\n 10 |  55\n\n(10 rows)\n\n\n\n\nIf you want to see the results for a high number, update \ni < 10\n to a higher\nvalue. If you go above \ni < 793\n, Postgres gives up and returns \nNan\n which means\n\nNot a number\n which means the computed value is larger than your computer can\nhandle and still treat like a number. Sorry, get a new computer or work with\nnumbers less than 166 digits long.\n\n\nA Real World Example with Hierarchical Data\n\u00b6\n\n\nFibonacci sequence is nice and all, but you have real data concerns. You're\nthinking, \"Show me the DATA!\". So here's the data...\n\n\n-- Build `sample_people` table\n\n\nCREATE\n \nTABLE\n \nsample_people\n \nAS\n\n  \nSELECT\n\n    \ncolumn1\n::\nint\n     \nAS\n \nid\n,\n\n    \ncolumn2\n::\nvarchar\n \nAS\n \nname\n,\n\n    \ncolumn3\n::\nint\n     \nAS\n \nparent_id\n\n  \nFROM\n \n(\n\n    \nVALUES\n\n      \n(\n0\n,\n \n'Root'\n \n,\n \nnull\n),\n\n      \n(\n1\n,\n \n'Alice'\n,\n \n0\n),\n\n      \n(\n2\n,\n \n'Bob'\n  \n,\n \n1\n),\n\n      \n(\n3\n,\n \n'Cat'\n  \n,\n \n1\n),\n\n      \n(\n4\n,\n \n'Dan'\n  \n,\n \n3\n),\n\n      \n(\n5\n,\n \n'Evan'\n \n,\n \n0\n),\n\n      \n(\n6\n,\n \n'Frank'\n,\n \n5\n)\n\n  \n)\n \nas\n \nt\n\n  \n;\n\n\n\nSELECT\n \n*\n \nFROM\n \nsample_people\n;\n\n\n--  id | name  | parent_id\n\n\n-- ----+-------+-----------\n\n\n--   0 | Root  |\n\n\n--   1 | Alice |         0\n\n\n--   2 | Bob   |         1\n\n\n--   3 | Cat   |         1\n\n\n--   4 | Dan   |         3\n\n\n--   5 | Evan  |         0\n\n\n--   6 | Frank |         5\n\n\n\n\n\nOur \nsample_people\n table represents a person by name and that person may have a\nparent. The parent of all the parents is \nRoot\n.\n\n\nAnd finally our recursive query to get a nice display of the hierarchy.\n\n\nWITH\n \nRECURSIVE\n \ntree\n \n-- `tree` is the table alias.\n\n                    \n-- It must be used as part of the `UNION` statement.\n\n  \nAS\n \n(\n\n  \n-- 1) Initialize table with all the top level rows.\n\n  \n--    Anything without a parent is a parent. Is that apparent?\n\n  \nSELECT\n\n    \n0\n \nAS\n \nlevel\n,\n        \n-- 2) Set the level to 0.\n\n    \nsample_people\n.\n*\n    \n-- 3) Return the initial row\n\n  \nFROM\n \nsample_people\n\n  \nWHERE\n \nparent_id\n \n=\n \n0\n  \n-- 4) Top level doesn't have a parent.\n\n  \nUNION\n \nALL\n\n  \n-- 5) Union all the parents with their children.\n\n  \nSELECT\n\n    \ntree\n.\nlevel\n \n+\n \n1\n,\n    \n-- 6) Increment the level every time we loop.\n\n    \nsample_people\n.\n*\n    \n-- 7) Return the current row - the child row. \n\n  \nFROM\n \ntree\n    \n-- 8) `tree` is populated with the previous results.\n\n               \n--    Every loop gets a new record from current result.\n\n  \nJOIN\n \nsample_people\n \nON\n \nsample_people\n.\nparent_id\n \n=\n \ntree\n.\nid\n\n\n)\n\n\nSELECT\n\n  \nrepeat\n(\n' '\n,\n \nlevel\n \n*\n \n4\n)\n \n||\n \nname\n \nAS\n \ndisplay\n\n\nFROM\n \ntree\n\n\nORDER\n \nBY\n \nlevel\n,\n \nname\n\n\n;\n\n\n\n--    display\n\n\n-- -------------\n\n\n--  Alice\n\n\n--  Evan\n\n\n--      Bob\n\n\n--      Cat\n\n\n--      Frank\n\n\n--          Dan\n\n\n-- (6 rows)\n\n\n\n\n\nBait and Switch\n\u00b6\n\n\nRECURSIVE\n is not actually recursive. It isn't a function calling itself.\nSorry, not sorry. It's much closer to a \nwhile\n loop. Here's what Postgres has to say about it:\n\n\n\n\nNote: Strictly speaking, this process is \niteration\n not recursion, but RECURSIVE\nis the terminology chosen by the SQL standards committee. [emphasis added]\n\n\n\n\nClosing\n\u00b6\n\n\nSo the next time you try to crawl a hierarchy of data, we hope \nRECURSIVE\n comes\nto mind. It's a great way to save round trips to the database and query what is\nneeded based on the data's structure. Think of all the nested subqueries we can\nsave together!\n\n\nReferences\n\u00b6\n\n\n\n\nPostgres WITH Queries: \nhttps://www.postgresql.org/docs/9.3/static/queries-with.html\n\n\nWikipedia Fibonacci number: \nhttps://en.wikipedia.org/wiki/Fibonacci_number",
            "title": "What the SQL?!? Recursive"
        },
        {
            "location": "/blog/2017/what-the-sql-recursive/#what-the-sql-recursive",
            "text": "Today's \"What the SQL?!?\" features the keyword  RECURSIVE . This clause allows\nus to elegantly select results from the previous results from the previous results\nfrom the previous results...   Please note, our target database is PostgreSQL. These examples may work with\nother databases, but might need some massaging to get them to work properly.\nSearch online for the specific vendor's documentation if errors pop up.\nTry searching for \"RECURSIVE queries {{DB VENDOR NAME}}\". Not all database vendors\nsupport the keyword  RECURSIVE .",
            "title": "What the SQL?!? Recursive"
        },
        {
            "location": "/blog/2017/what-the-sql-recursive/#fibonacci-sequence",
            "text": "According to  Wikipedia :   In mathematics, the Fibonacci numbers are the numbers in the following integer\nsequence, called the Fibonacci sequence, and characterized by the fact that\nevery number after the first two is the sum of the two preceding ones:  1, 1, 2, 3, 5, 8, 13, 21, 34, 55 ...",
            "title": "Fibonacci Sequence"
        },
        {
            "location": "/blog/2017/what-the-sql-recursive/#sql-solution",
            "text": "Our SQL solution will make use of the  RECURSIVE   CTE \nkeyword.  WITH   RECURSIVE   t ( i ,   fi ,   fib )   AS   ( \n   SELECT \n     1 , \n     0 :: NUMERIC , \n     1 :: NUMERIC \n   UNION   ALL \n   SELECT \n     i   +   1 , \n     fib , \n     fi   +   fib \n   FROM   t \n   WHERE   i   <   10  )  SELECT \n   i , \n   fib  FROM   t",
            "title": "SQL Solution"
        },
        {
            "location": "/blog/2017/what-the-sql-recursive/#the-ins-and-outs",
            "text": "Here's some inline colorful comments to explain the sections:  Maybe arrows will help a little more with the flow of data:",
            "title": "The Ins and Outs"
        },
        {
            "location": "/blog/2017/what-the-sql-recursive/#fibonacci-results",
            "text": "When you run the query, you'll get the following results:   i  | fib\n----+-----\n  1 |   1\n  2 |   1\n  3 |   2\n  4 |   3\n  5 |   5\n  6 |   8\n  7 |  13\n  8 |  21\n  9 |  34\n 10 |  55\n\n(10 rows)  If you want to see the results for a high number, update  i < 10  to a higher\nvalue. If you go above  i < 793 , Postgres gives up and returns  Nan  which means Not a number  which means the computed value is larger than your computer can\nhandle and still treat like a number. Sorry, get a new computer or work with\nnumbers less than 166 digits long.",
            "title": "Fibonacci Results"
        },
        {
            "location": "/blog/2017/what-the-sql-recursive/#a-real-world-example-with-hierarchical-data",
            "text": "Fibonacci sequence is nice and all, but you have real data concerns. You're\nthinking, \"Show me the DATA!\". So here's the data...  -- Build `sample_people` table  CREATE   TABLE   sample_people   AS \n   SELECT \n     column1 :: int       AS   id , \n     column2 :: varchar   AS   name , \n     column3 :: int       AS   parent_id \n   FROM   ( \n     VALUES \n       ( 0 ,   'Root'   ,   null ), \n       ( 1 ,   'Alice' ,   0 ), \n       ( 2 ,   'Bob'    ,   1 ), \n       ( 3 ,   'Cat'    ,   1 ), \n       ( 4 ,   'Dan'    ,   3 ), \n       ( 5 ,   'Evan'   ,   0 ), \n       ( 6 ,   'Frank' ,   5 ) \n   )   as   t \n   ;  SELECT   *   FROM   sample_people ;  --  id | name  | parent_id  -- ----+-------+-----------  --   0 | Root  |  --   1 | Alice |         0  --   2 | Bob   |         1  --   3 | Cat   |         1  --   4 | Dan   |         3  --   5 | Evan  |         0  --   6 | Frank |         5   Our  sample_people  table represents a person by name and that person may have a\nparent. The parent of all the parents is  Root .  And finally our recursive query to get a nice display of the hierarchy.  WITH   RECURSIVE   tree   -- `tree` is the table alias. \n                     -- It must be used as part of the `UNION` statement. \n   AS   ( \n   -- 1) Initialize table with all the top level rows. \n   --    Anything without a parent is a parent. Is that apparent? \n   SELECT \n     0   AS   level ,          -- 2) Set the level to 0. \n     sample_people . *      -- 3) Return the initial row \n   FROM   sample_people \n   WHERE   parent_id   =   0    -- 4) Top level doesn't have a parent. \n   UNION   ALL \n   -- 5) Union all the parents with their children. \n   SELECT \n     tree . level   +   1 ,      -- 6) Increment the level every time we loop. \n     sample_people . *      -- 7) Return the current row - the child row.  \n   FROM   tree      -- 8) `tree` is populated with the previous results. \n                --    Every loop gets a new record from current result. \n   JOIN   sample_people   ON   sample_people . parent_id   =   tree . id  )  SELECT \n   repeat ( ' ' ,   level   *   4 )   ||   name   AS   display  FROM   tree  ORDER   BY   level ,   name  ;  --    display  -- -------------  --  Alice  --  Evan  --      Bob  --      Cat  --      Frank  --          Dan  -- (6 rows)",
            "title": "A Real World Example with Hierarchical Data"
        },
        {
            "location": "/blog/2017/what-the-sql-recursive/#bait-and-switch",
            "text": "RECURSIVE  is not actually recursive. It isn't a function calling itself.\nSorry, not sorry. It's much closer to a  while  loop. Here's what Postgres has to say about it:   Note: Strictly speaking, this process is  iteration  not recursion, but RECURSIVE\nis the terminology chosen by the SQL standards committee. [emphasis added]",
            "title": "Bait and Switch"
        },
        {
            "location": "/blog/2017/what-the-sql-recursive/#closing",
            "text": "So the next time you try to crawl a hierarchy of data, we hope  RECURSIVE  comes\nto mind. It's a great way to save round trips to the database and query what is\nneeded based on the data's structure. Think of all the nested subqueries we can\nsave together!",
            "title": "Closing"
        },
        {
            "location": "/blog/2017/what-the-sql-recursive/#references",
            "text": "Postgres WITH Queries:  https://www.postgresql.org/docs/9.3/static/queries-with.html  Wikipedia Fibonacci number:  https://en.wikipedia.org/wiki/Fibonacci_number",
            "title": "References"
        },
        {
            "location": "/blog/2018/move-to-mkdocs/",
            "text": "I've upgraded to \nMkDocs\n from \nOctopress\n. The \nOctopress\n installation I've been using was from 2014 (4 years old) and was missing features for search, long form writing, multi-part posts, and books.\n\n\n\n\nhttp://www.mkdocs.org/\n\n\nMkDocs is a \nfast\n, \nsimple\n and \ndownright gorgeous\n static site\ngenerator that's geared towards building project documentation. Documentation\nsource files are written in Markdown, and configured with a single YAML\nconfiguration file.\n\n\n\n\nFeatures\n\u00b6\n\n\nTo see all the features of \nMkDocs\n and \nmkdocs-material\n jump to their respective sites.\n\n\nHere's the features really care about:\n\n\n\n\n\n\nTransition\n\u00b6\n\n\nThe migration process wasn't as easy as I'd hoped. I wanted all the old posts to move over, but there wasn't an easy path for my content prior to 2014. That's because some of those posts are in pure html and \nMkDocs\n only wants to deal in Markdown. I tried \nPandoc\n, but that created Markdown which isn't compatible with \nMkDocs\n. It'll take some time before all that old stuff gets through. Fortunately, because it's \nso\n old, most of the material isn't relevant anymore and gets very few hits.\n\n\nMkDocs\n doesn't build the site hierarchy automatically like \nOctopress\n. \nOctopress\n stores all article in a flat directory with file names prefixed with a date. \nMkDocs\n uses the file name as part of the URL, so I needed to rename the \nOctopress\n files and put them in a directory structure to match the URL format I had in the original site.\n\n\nOctopress Posts Directory\n:\n\n\u251c\u2500\u2500 source\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 _posts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 2016-05-28-negative-modulo.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 2016-07-11-photography-lightening-talk.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 2016-07-26-ansi-codes-with-character.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 2017-02-07-how-to-get-better-at-anything.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 2017-03-08-what-the-sql-lateral.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 2017-03-15-what-the-sql-recursive.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 2017-03-22-what-the-sql-window.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 2017-04-10-vim-send-text.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 2017-04-13-base16-shell.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 2017-06-01-gnu-screen.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 2017-06-12-fzf-dictionary.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 2018-03-04-getting-rusty-with-vim.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 2018-03-12-stream-stats-in-rust.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 2018-03-22-blog-setup.markdown\n\n\n\nMkDocs Docs Directory\n:\n\n\u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 blog\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 2016\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 negative-modulo.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 yank-without-jank.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 2017\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 base16-shell.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 fzf-dictionary.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 gnu-screen.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 how-to-get-better-at-anything.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-send-text.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 what-the-sql-lateral.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 what-the-sql-recursive.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 what-the-sql-window.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 2018\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 blog-setup.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 getting-rusty-with-vim.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 move-to-mkdocs.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 stream-stats-in-rust.markdown\n\n\n\nAfter getting the files to the correct directory, the site hierarchy needs to be configured in \nmkdocs.yml\n. That file contains much more than the page structure. You'll need to read more about it from their \ndocumentation\n.\n\n\nmkdocs.yml\n:\n\n# .. stuff before this section ..\n\n\npages\n:\n\n  \n-\n \nHome\n:\n \nindex.md\n\n  \n-\n \nProjects\n:\n \nprojects.md\n\n  \n-\n \n'2018'\n:\n\n    \n-\n \n'Move\n \nto\n \nMkDocs'\n:\n \nblog/2018/move-to-mkdocs.markdown\n\n    \n-\n \n'A\n \nRustic\n \nJourney\n \nThrough\n \nStream\n \nStats'\n:\n \nblog/2018/stream-stats-in-rust.markdown\n\n    \n-\n \n'Getting\n \nRusty\n \nwith\n \nVim'\n:\n \nblog/2018/getting-rusty-with-vim.markdown\n\n    \n-\n \n'Dev\n \nBlog\n \nTools\n \n::\n \nA\n \nQuick\n \nTour\n \nof\n \nMy\n \nSetup'\n:\n \nblog/2018/blog-setup.markdown\n\n  \n-\n \n'2017'\n:\n\n    \n-\n \n'Base16\n \nShell'\n:\n \nblog/2017/base16-shell.markdown\n\n    \n-\n \n'How\n \nto\n \nGet\n \nBetter\n \nAt\n \nAnything'\n:\n \nblog/2017/how-to-get-better-at-anything.markdown\n\n    \n-\n \n'FZF\n \n+\n \nWordNet\n \n=\n \nDictionary'\n:\n \nblog/2017/fzf-dictionary.markdown\n\n    \n-\n \n'GNU\n \nScreen'\n:\n \nblog/2017/gnu-screen.markdown\n\n    \n-\n \n'What\n \nthe\n \nSQL?!?\n \nLateral\n \nJoins'\n:\n \nblog/2017/what-the-sql-lateral.markdown\n\n    \n-\n \n'What\n \nthe\n \nSQL?!?\n \nWINDOW'\n:\n \nblog/2017/what-the-sql-window.markdown\n\n    \n-\n \n'What\n \nthe\n \nSQL?!?\n \nRecursive'\n:\n \nblog/2017/what-the-sql-recursive.markdown\n\n    \n-\n \n'Vim\n \nSend\n \nText'\n:\n \nblog/2017/vim-send-text.markdown\n\n\n# .. more stuff ..\n\n\n\n\nOnce \nmkdocs.yml\n is configured we can run:\n\n\n# start a web server to preview the site\n\nmkdocs server\n\n\n# or generate the site files for deployment\n\nmkdocs build\n\n\n# or deploy to GitHub Pages\n\nmkdocs gh-deploy\n\n\n\n\nConclusion\n\u00b6\n\n\nHere's a breakdown of the pros and cons that I've experienced so far:\n\n\nPros\n\u00b6\n\n\n\n\nFull site search without using external service (Google, Angola, etc.)\n\n\nSite hierarchy.\n\n\nAutomatic table of contents on all pages.\n\n\nVarious code blocks and annotations.\n\n\nLess magic.\n\n\n\n\nCons\n\u00b6\n\n\n\n\nOlder posts don't translate well, because they have to be in Markdown format.\n\n\nMkDocs\n is a Python project, a language I'm not familiar with, yet.\n\n\nLess magic.\n\n\n\n\nHopefully this the catalyst to more content. Stay tuned!\n\n\nQuestions? Comments? Trolls?!? Let me know! \nTweet",
            "title": "Move to MkDocs"
        },
        {
            "location": "/blog/2018/move-to-mkdocs/#features",
            "text": "To see all the features of  MkDocs  and  mkdocs-material  jump to their respective sites.  Here's the features really care about:",
            "title": "Features"
        },
        {
            "location": "/blog/2018/move-to-mkdocs/#transition",
            "text": "The migration process wasn't as easy as I'd hoped. I wanted all the old posts to move over, but there wasn't an easy path for my content prior to 2014. That's because some of those posts are in pure html and  MkDocs  only wants to deal in Markdown. I tried  Pandoc , but that created Markdown which isn't compatible with  MkDocs . It'll take some time before all that old stuff gets through. Fortunately, because it's  so  old, most of the material isn't relevant anymore and gets very few hits.  MkDocs  doesn't build the site hierarchy automatically like  Octopress .  Octopress  stores all article in a flat directory with file names prefixed with a date.  MkDocs  uses the file name as part of the URL, so I needed to rename the  Octopress  files and put them in a directory structure to match the URL format I had in the original site.  Octopress Posts Directory : \u251c\u2500\u2500 source\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 _posts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 2016-05-28-negative-modulo.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 2016-07-11-photography-lightening-talk.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 2016-07-26-ansi-codes-with-character.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 2017-02-07-how-to-get-better-at-anything.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 2017-03-08-what-the-sql-lateral.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 2017-03-15-what-the-sql-recursive.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 2017-03-22-what-the-sql-window.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 2017-04-10-vim-send-text.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 2017-04-13-base16-shell.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 2017-06-01-gnu-screen.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 2017-06-12-fzf-dictionary.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 2018-03-04-getting-rusty-with-vim.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 2018-03-12-stream-stats-in-rust.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 2018-03-22-blog-setup.markdown  MkDocs Docs Directory : \u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 blog\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 2016\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 negative-modulo.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 yank-without-jank.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 2017\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 base16-shell.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 fzf-dictionary.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 gnu-screen.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 how-to-get-better-at-anything.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-send-text.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 what-the-sql-lateral.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 what-the-sql-recursive.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 what-the-sql-window.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 2018\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 blog-setup.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 getting-rusty-with-vim.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 move-to-mkdocs.markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 stream-stats-in-rust.markdown  After getting the files to the correct directory, the site hierarchy needs to be configured in  mkdocs.yml . That file contains much more than the page structure. You'll need to read more about it from their  documentation .  mkdocs.yml : # .. stuff before this section ..  pages : \n   -   Home :   index.md \n   -   Projects :   projects.md \n   -   '2018' : \n     -   'Move   to   MkDocs' :   blog/2018/move-to-mkdocs.markdown \n     -   'A   Rustic   Journey   Through   Stream   Stats' :   blog/2018/stream-stats-in-rust.markdown \n     -   'Getting   Rusty   with   Vim' :   blog/2018/getting-rusty-with-vim.markdown \n     -   'Dev   Blog   Tools   ::   A   Quick   Tour   of   My   Setup' :   blog/2018/blog-setup.markdown \n   -   '2017' : \n     -   'Base16   Shell' :   blog/2017/base16-shell.markdown \n     -   'How   to   Get   Better   At   Anything' :   blog/2017/how-to-get-better-at-anything.markdown \n     -   'FZF   +   WordNet   =   Dictionary' :   blog/2017/fzf-dictionary.markdown \n     -   'GNU   Screen' :   blog/2017/gnu-screen.markdown \n     -   'What   the   SQL?!?   Lateral   Joins' :   blog/2017/what-the-sql-lateral.markdown \n     -   'What   the   SQL?!?   WINDOW' :   blog/2017/what-the-sql-window.markdown \n     -   'What   the   SQL?!?   Recursive' :   blog/2017/what-the-sql-recursive.markdown \n     -   'Vim   Send   Text' :   blog/2017/vim-send-text.markdown  # .. more stuff ..   Once  mkdocs.yml  is configured we can run:  # start a web server to preview the site \nmkdocs server # or generate the site files for deployment \nmkdocs build # or deploy to GitHub Pages \nmkdocs gh-deploy",
            "title": "Transition"
        },
        {
            "location": "/blog/2018/move-to-mkdocs/#conclusion",
            "text": "Here's a breakdown of the pros and cons that I've experienced so far:",
            "title": "Conclusion"
        },
        {
            "location": "/blog/2018/move-to-mkdocs/#pros",
            "text": "Full site search without using external service (Google, Angola, etc.)  Site hierarchy.  Automatic table of contents on all pages.  Various code blocks and annotations.  Less magic.",
            "title": "Pros"
        },
        {
            "location": "/blog/2018/move-to-mkdocs/#cons",
            "text": "Older posts don't translate well, because they have to be in Markdown format.  MkDocs  is a Python project, a language I'm not familiar with, yet.  Less magic.   Hopefully this the catalyst to more content. Stay tuned!  Questions? Comments? Trolls?!? Let me know!  Tweet",
            "title": "Cons"
        },
        {
            "location": "/blog/2018/stream-stats-in-rust/",
            "text": "A Rustic Journey Through Stream Stats\n\u00b6\n\n\n\n\nAfter playing \nGuessing Game\n from the \nRust Book\n a few times, it was time to make something a little more substantial. We're going to create \nstream_stats\n, a CLI program which prints throughput statistics from \nstdin\n while redirecting through \nstdout\n. Think \ntee\n + \nwc -l\n + \nwatch\n all at the same time.\n\n\nTL;DR\n - \ncargo install stream_stats\n\n\n\n\n\nHere is a quick demo of the program:\n\n\n\n\nToday, I we'll build this program up in 6 steps smallish steps. The minimum requirement of this program was the live feedback as seen in the demo \nand\n minimal impact on the overall performance.\n\n\nStep 1 - Reproducing \ncat\n Inefficiently\n\u00b6\n\n\nFirst step is to replicate \ncat\n. We'll do it as demonstrated by Rust's own \ndocumentation\n.\n\n\nuse\n \nstd\n::\nio\n;\n\n\n\nfn\n \nmain\n()\n \n{\n\n\n    \nlet\n \nmut\n \nbuffer\n \n=\n \nString\n::\nnew\n();\n\n\n    \nwhile\n \nio\n::\nstdin\n().\nread_line\n(\n&\nmut\n \nbuffer\n).\nunwrap\n()\n \n>\n \n0\n \n{\n\n\n        \nprint\n!\n(\n\"{}\"\n,\n \nbuffer\n);\n\n\n        \nbuffer\n.\nclear\n();\n\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nI'm using \nunwrap\n to keep our program short and sweet.\n\n\n\n\nSave the code as \nstream_stats.rs\n and build it using \nrustc -O stream_stats.rs\n. This will\ncompile the program into \nstream_stats\n. We can now run the program with\n\n./stream_stats < stream_stats.rs\n or \ncat stream_stats.rs | stream_stats\n. This should output the source code we just wrote.\n\n\nThe program is sufficient for small streams, but will perform horribly on large files.\n\n\nStep 2 - Reproducing \ncat\n Efficiently with Buffering\n\u00b6\n\n\n\n\nIt can be excessively inefficient to work directly with a Read instance. For example, every call to read on TcpStream results in a system call. A BufReader performs large, infrequent reads on the underlying Read and maintains an in-memory buffer of the results.\n\n\n-- \nhttps://doc.rust-lang.org/std/io/struct.BufReader.html\n\n\n\n\nLets add some buffer use to increase performance and get it near the speed of \ncat\n. Replace the contents of \nstream_stats.rs\n with the following, recompile, and run the program.\n\n\nuse\n \nstd\n::\nio\n::\n{\nself\n,\n \nBufRead\n,\n \nBufReader\n,\n \nBufWriter\n,\n \nWrite\n};\n\n\n\nstatic\n \nREAD_BUF_SIZE\n: \nusize\n \n=\n \n1024\n \n*\n \n1024\n;\n\n\n\nfn\n \nmain\n()\n \n{\n\n\n    \nlet\n \nmut\n \nreader\n \n=\n \nBufReader\n::\nwith_capacity\n(\nREAD_BUF_SIZE\n,\n \nio\n::\nstdin\n());\n\n\n    \nlet\n \nmut\n \nwriter\n \n=\n \nBufWriter\n::\nnew\n(\nio\n::\nstdout\n());\n\n\n    \nlet\n \nmut\n \nbuffer\n \n=\n \nvec\n!\n[];\n\n\n\n    \nwhile\n \nreader\n.\nread_until\n(\nb'\\n'\n,\n \n&\nmut\n \nbuffer\n).\nunwrap\n()\n \n>\n \n0\n \n{\n\n\n        \nwriter\n.\nwrite\n(\n&\nbuffer\n).\nunwrap\n();\n\n\n        \nbuffer\n.\nclear\n();\n\n\n    \n}\n\n\n    \nwriter\n.\nflush\n().\nunwrap\n();\n\n\n}\n\n\n\n\n\nThe exact difference is \nviewable on Github\n.\nHere's a one-liner which to help with the build/run cycle:\n\n\nrustc -O ./stream_stats.rs \n&&\n ./stream_stats < stream_stats.rs\n\n\n\n\nFor a few extra lines, we get a lot of performance. There are ways to get even more\nperformance, but it won't be worth the code complexity at this time.\n\n\nStep 3 - Count the Lines\n\u00b6\n\n\nWe're ready to start counting lines. We'll introduce a \nstruct\n to hold a start\ntime and line count.\n\n\nuse\n \nstd\n::\nio\n::\n{\nself\n,\n \nBufRead\n,\n \nBufReader\n,\n \nBufWriter\n,\n \nWrite\n};\n\n\nuse\n \nstd\n::\ntime\n::\nInstant\n;\n\n\n\nstatic\n \nREAD_BUF_SIZE\n: \nusize\n \n=\n \n1024\n \n*\n \n1024\n;\n\n\n\nstruct\n \nStats\n \n{\n\n\n    \nstarted\n: \nInstant\n,\n\n\n    \nlines\n: \nusize\n,\n\n\n}\n\n\n\nfn\n \nmain\n()\n \n{\n\n\n    \nlet\n \nmut\n \nreader\n \n=\n \nBufReader\n::\nwith_capacity\n(\nREAD_BUF_SIZE\n,\n \nio\n::\nstdin\n());\n\n\n    \nlet\n \nmut\n \nwriter\n \n=\n \nBufWriter\n::\nnew\n(\nio\n::\nstdout\n());\n\n\n    \nlet\n \nmut\n \nbuffer\n \n=\n \nvec\n!\n[];\n\n\n\n    \nlet\n \nmut\n \nstats\n \n=\n \nStats\n \n{\n\n\n        \nstarted\n: \nInstant\n::\nnow\n(),\n\n\n        \nlines\n: \n0\n,\n\n\n    \n};\n\n\n\n    \nwhile\n \nreader\n.\nread_until\n(\nb'\\n'\n,\n \n&\nmut\n \nbuffer\n).\nunwrap\n()\n \n>\n \n0\n \n{\n\n\n        \nwriter\n.\nwrite\n(\n&\nbuffer\n).\nunwrap\n();\n\n\n        \nstats\n.\nlines\n \n+=\n \n1\n;\n\n\n        \nbuffer\n.\nclear\n();\n\n\n    \n}\n\n\n    \nwriter\n.\nflush\n().\nunwrap\n();\n\n\n    \neprintln\n!\n(\n\"lines: {}, {:?}\"\n,\n \nstats\n.\nlines\n,\n \nstats\n.\nstarted\n.\nelapsed\n());\n\n\n}\n\n\n\n\n\nAgain the exact difference is \nviewable on Github\n.\n\n\nStep 4 - Write to \n/dev/tty\n\u00b6\n\n\nUsing \neprintln!\n is easy, but bad practice for non-error output. The next step is moving the output to \n/dev/tty\n. As a reminder, we're also not using \nprintln!\n because we're reserving it for the original content piped from \nstdin\n.\n\n\nuse\n \nstd\n::\nfs\n::\n{\nFile\n,\n \nOpenOptions\n};\n\n\nuse\n \nstd\n::\nio\n::\n{\nself\n,\n \nBufRead\n,\n \nBufReader\n,\n \nBufWriter\n,\n \nWrite\n};\n\n\nuse\n \nstd\n::\ntime\n::\nInstant\n;\n\n\n\nstatic\n \nREAD_BUF_SIZE\n: \nusize\n \n=\n \n1024\n \n*\n \n1024\n;\n\n\n\nstruct\n \nStats\n \n{\n\n\n    \nstarted\n: \nInstant\n,\n\n\n    \nlines\n: \nusize\n,\n\n\n    \ntty\n: \nFile\n,\n\n\n}\n\n\n\nimpl\n \nStats\n \n{\n\n\n    \nfn\n \nnew\n(\ntty\n: \n&\nstr\n)\n \n-> \nStats\n \n{\n\n\n        \nStats\n \n{\n\n\n            \nstarted\n: \nInstant\n::\nnow\n(),\n\n\n            \nlines\n: \n0\n,\n\n\n            \ntty\n: \nOpenOptions\n::\nnew\n()\n\n\n                \n.\nwrite\n(\ntrue\n)\n\n\n                \n.\nappend\n(\ntrue\n)\n\n\n                \n.\nopen\n(\ntty\n)\n\n\n                \n.\nexpect\n(\n\"Cannot open tty for writing!\"\n),\n\n\n        \n}\n\n\n    \n}\n\n\n}\n\n\n\nfn\n \nmain\n()\n \n{\n\n\n    \nlet\n \nmut\n \nreader\n \n=\n \nBufReader\n::\nwith_capacity\n(\nREAD_BUF_SIZE\n,\n \nio\n::\nstdin\n());\n\n\n    \nlet\n \nmut\n \nwriter\n \n=\n \nBufWriter\n::\nnew\n(\nio\n::\nstdout\n());\n\n\n    \nlet\n \nmut\n \nbuffer\n \n=\n \nvec\n!\n[];\n\n\n    \nlet\n \nmut\n \nstats\n \n=\n \nStats\n::\nnew\n(\n\"/dev/tty\"\n);\n\n\n\n    \nwhile\n \nreader\n.\nread_until\n(\nb'\\n'\n,\n \n&\nmut\n \nbuffer\n).\nunwrap\n()\n \n>\n \n0\n \n{\n\n\n        \nwriter\n.\nwrite\n(\n&\nbuffer\n).\nunwrap\n();\n\n\n        \nstats\n.\nlines\n \n+=\n \n1\n;\n\n\n        \nbuffer\n.\nclear\n();\n\n\n    \n}\n\n\n    \nwriter\n.\nflush\n().\nunwrap\n();\n\n\n    \nwriteln\n!\n(\n\n\n        \nstats\n.\ntty\n,\n\n\n        \n\"lines: {}, {:?}\"\n,\n\n\n        \nstats\n.\nlines\n,\n\n\n        \nstats\n.\nstarted\n.\nelapsed\n()\n\n\n    \n).\nexpect\n(\n\"Could not write to tty!\"\n);\n\n\n}\n\n\n\n\n\nExact difference is \nviewable on Github\n.\n\n\nStep 5 - Beautify Stats Output\n\u00b6\n\n\nThe display logic is going to get a little more complex. We want to move the string formatting code to a \nfmt::Display\n trait. We'll also add the kilobytes to the displayed stats.\n\n\nuse\n \nstd\n::\nfmt\n;\n\n\nuse\n \nstd\n::\nfs\n::\n{\nFile\n,\n \nOpenOptions\n};\n\n\nuse\n \nstd\n::\nio\n::\n{\nself\n,\n \nBufRead\n,\n \nBufReader\n,\n \nBufWriter\n,\n \nWrite\n};\n\n\nuse\n \nstd\n::\ntime\n::\nInstant\n;\n\n\n\nstatic\n \nREAD_BUF_SIZE\n: \nusize\n \n=\n \n1024\n \n*\n \n1024\n;\n\n\nstatic\n \nCLEAR_LINE\n: \n&\nstr\n \n=\n \n\"\n\\x1B\n[1G\n\\x1B\n[2K\"\n;\n\n\n\nstruct\n \nStats\n \n{\n\n\n    \nstarted\n: \nInstant\n,\n\n\n    \nlines\n: \nusize\n,\n\n\n    \nbytes\n: \nusize\n,\n\n\n    \ntty\n: \nFile\n,\n\n\n}\n\n\n\nimpl\n \nStats\n \n{\n\n\n    \nfn\n \nnew\n(\ntty\n: \n&\nstr\n)\n \n-> \nStats\n \n{\n\n\n        \nStats\n \n{\n\n\n            \nstarted\n: \nInstant\n::\nnow\n(),\n\n\n            \nlines\n: \n0\n,\n\n\n            \nbytes\n: \n0\n,\n\n\n            \ntty\n: \nOpenOptions\n::\nnew\n()\n\n\n                \n.\nwrite\n(\ntrue\n)\n\n\n                \n.\nappend\n(\ntrue\n)\n\n\n                \n.\nopen\n(\ntty\n)\n\n\n                \n.\nexpect\n(\n\"Cannot open tty for writing!\"\n),\n\n\n        \n}\n\n\n    \n}\n\n\n}\n\n\n\nimpl\n \nfmt\n::\nDisplay\n \nfor\n \nStats\n \n{\n\n\n    \nfn\n \nfmt\n(\n&\nself\n,\n \nf\n: \n&\nmut\n \nfmt\n::\nFormatter\n)\n \n-> \nfmt\n::\nResult\n \n{\n\n\n\n        \nlet\n \nelapsed\n \n=\n \nself\n.\nstarted\n.\nelapsed\n();\n\n\n        \nlet\n \nseconds\n: \nf64\n \n=\n \nelapsed\n.\nas_secs\n()\n \nas\n \nf64\n \n+\n \nelapsed\n.\nsubsec_nanos\n()\n \nas\n \nf64\n \n*\n \n1e-9\n;\n\n\n        \nif\n \nseconds\n \n==\n \n0.0\n \n{\n\n\n            \nreturn\n \nwrite\n!\n(\nf\n,\n \n\"\"\n);\n\n\n        \n}\n\n\n        \nlet\n \nkb\n \n=\n \nself\n.\nbytes\n \nas\n \nf64\n \n/\n \n1024\n \nas\n \nf64\n;\n\n\n        \nlet\n \nkb_per_sec\n \n=\n \nkb\n \n/\n \nseconds\n;\n\n\n        \nlet\n \nlines_per_sec\n \n=\n \nself\n.\nlines\n \nas\n \nf64\n \n/\n \nseconds\n;\n\n\n        \nwrite\n!\n(\n\n\n            \nf\n,\n\n\n            \n\"{}{:.1} sec | {:.0} kb [ {:.1}/s ] | {} lines [ {:.0}/s ]\"\n,\n\n\n            \nCLEAR_LINE\n,\n\n\n            \nseconds\n,\n\n\n            \nkb\n,\n\n\n            \nkb_per_sec\n,\n\n\n            \nself\n.\nlines\n,\n\n\n            \nlines_per_sec\n\n\n        \n)\n\n\n    \n}\n\n\n}\n\n\n\nfn\n \nmain\n()\n \n{\n\n\n    \nlet\n \nmut\n \nreader\n \n=\n \nBufReader\n::\nwith_capacity\n(\nREAD_BUF_SIZE\n,\n \nio\n::\nstdin\n());\n\n\n    \nlet\n \nmut\n \nwriter\n \n=\n \nBufWriter\n::\nnew\n(\nio\n::\nstdout\n());\n\n\n    \nlet\n \nmut\n \nbuffer\n \n=\n \nvec\n!\n[];\n\n\n    \nlet\n \nmut\n \nstats\n \n=\n \nStats\n::\nnew\n(\n\"/dev/tty\"\n);\n\n\n\n    \nwhile\n \nreader\n.\nread_until\n(\nb'\\n'\n,\n \n&\nmut\n \nbuffer\n).\nunwrap\n()\n \n>\n \n0\n \n{\n\n\n        \nwriter\n.\nwrite\n(\n&\nbuffer\n).\nunwrap\n();\n\n\n        \nstats\n.\nlines\n \n+=\n \n1\n;\n\n\n        \nstats\n.\nbytes\n \n+=\n \n&\nbuffer\n.\nlen\n();\n\n\n        \nbuffer\n.\nclear\n();\n\n\n    \n}\n\n\n    \nwriter\n.\nflush\n().\nunwrap\n();\n\n\n    \nwriteln\n!\n(\n&\nstats\n.\ntty\n,\n \n\"{}\"\n,\n \n&\nstats\n).\nexpect\n(\n\"Could not write to tty!\"\n);\n\n\n}\n\n\n\n\n\nExact difference is \nviewable on Github\n.\n\n\nStep 6 - Display the stats 10 times per second\n\u00b6\n\n\nWe're finally at the most useful part of the program. Viewing the stats while\nthe stream is still going.\n\n\nFor this task, we introduce a thread which loops forever sleeping a little and\nwaking to output the stats. Because of the thread, we need to use \nArc\n to\nsafely tell Rust another thread is going to have a pointer to the stats object.\n\n\nTo be honest, I don't fully understand why I need to use \nAtomicUsize\n. I tried\nto keep the \nusize\n variables would get errors regarding mutability. If someone\nout there can remove the \nAtomicUsize\n without introducing \nunsafe\n please let\nme know!\n\n\nHere's the final code listing:\n\n\nuse\n \nstd\n::\nfmt\n;\n\n\nuse\n \nstd\n::\nfs\n::\n{\nFile\n,\n \nOpenOptions\n};\n\n\nuse\n \nstd\n::\nio\n::\n{\nself\n,\n \nBufRead\n,\n \nBufReader\n,\n \nBufWriter\n,\n \nWrite\n};\n\n\nuse\n \nstd\n::\nsync\n::\nArc\n;\n\n\nuse\n \nstd\n::\nsync\n::\natomic\n::\n{\nAtomicUsize\n,\n \nOrdering\n};\n\n\nuse\n \nstd\n::\nthread\n::\n{\nself\n,\n \nsleep\n};\n\n\nuse\n \nstd\n::\ntime\n::\n{\nDuration\n,\n \nInstant\n};\n\n\n\nstatic\n \nREAD_BUF_SIZE\n: \nusize\n \n=\n \n1024\n \n*\n \n1024\n;\n\n\nstatic\n \nCLEAR_LINE\n: \n&\nstr\n \n=\n \n\"\n\\x1B\n[1G\n\\x1B\n[2K\"\n;\n\n\nstatic\n \nUPDATE_INTERVAL_MS\n: \nu64\n \n=\n \n100\n;\n\n\n\nstruct\n \nStats\n \n{\n\n\n    \nstarted\n: \nInstant\n,\n\n\n    \nlines\n: \nAtomicUsize\n,\n\n\n    \nbytes\n: \nAtomicUsize\n,\n\n\n    \ntty\n: \nFile\n,\n\n\n}\n\n\n\nimpl\n \nStats\n \n{\n\n\n    \nfn\n \nnew\n(\ntty\n: \n&\nstr\n)\n \n-> \nStats\n \n{\n\n\n        \nStats\n \n{\n\n\n            \nstarted\n: \nInstant\n::\nnow\n(),\n\n\n            \nlines\n: \nAtomicUsize\n::\nnew\n(\n0\n),\n\n\n            \nbytes\n: \nAtomicUsize\n::\nnew\n(\n0\n),\n\n\n            \ntty\n: \nOpenOptions\n::\nnew\n()\n\n\n                \n.\nwrite\n(\ntrue\n)\n\n\n                \n.\nappend\n(\ntrue\n)\n\n\n                \n.\nopen\n(\ntty\n)\n\n\n                \n.\nexpect\n(\n\"Cannot open tty for writing!\"\n),\n\n\n        \n}\n\n\n    \n}\n\n\n\n    \nfn\n \nadd\n(\n&\nself\n,\n \nbuffer\n: \n&\nVec\n<\nu8\n>\n)\n \n{\n\n\n        \nself\n.\nlines\n.\nfetch_add\n(\n1\n,\n \nOrdering\n::\nRelaxed\n);\n\n\n        \nself\n.\nbytes\n.\nfetch_add\n(\nbuffer\n.\nlen\n(),\n \nOrdering\n::\nRelaxed\n);\n\n\n    \n}\n\n\n}\n\n\n\nimpl\n \nfmt\n::\nDisplay\n \nfor\n \nStats\n \n{\n\n\n    \nfn\n \nfmt\n(\n&\nself\n,\n \nf\n: \n&\nmut\n \nfmt\n::\nFormatter\n)\n \n-> \nfmt\n::\nResult\n \n{\n\n\n\n        \nlet\n \nelapsed\n \n=\n \nself\n.\nstarted\n.\nelapsed\n();\n\n\n        \nlet\n \nseconds\n: \nf64\n \n=\n \nelapsed\n.\nas_secs\n()\n \nas\n \nf64\n \n+\n \nelapsed\n.\nsubsec_nanos\n()\n \nas\n \nf64\n \n*\n \n1e-9\n;\n\n\n        \nif\n \nseconds\n \n==\n \n0.0\n \n{\n\n\n            \nreturn\n \nwrite\n!\n(\nf\n,\n \n\"\"\n);\n\n\n        \n}\n\n\n        \nlet\n \nbytes\n \n=\n \nself\n.\nbytes\n.\nload\n(\nOrdering\n::\nRelaxed\n)\n \nas\n \nf64\n;\n\n\n        \nlet\n \nlines\n \n=\n \nself\n.\nlines\n.\nload\n(\nOrdering\n::\nRelaxed\n)\n \nas\n \nf64\n;\n\n\n        \nlet\n \nkb\n \n=\n \nbytes\n \n/\n \n1024\n \nas\n \nf64\n;\n\n\n        \nlet\n \nkb_per_sec\n \n=\n \nkb\n \n/\n \nseconds\n;\n\n\n        \nlet\n \nlines_per_sec\n \n=\n \nlines\n \n/\n \nseconds\n;\n\n\n        \nwrite\n!\n(\n\n\n            \nf\n,\n\n\n            \n\"{}{:.1} sec | {:.0} kb [ {:.1}/s ] | {:.0} lines [ {:.0}/s ]\"\n,\n\n\n            \nCLEAR_LINE\n,\n\n\n            \nseconds\n,\n\n\n            \nkb\n,\n\n\n            \nkb_per_sec\n,\n\n\n            \nlines\n,\n\n\n            \nlines_per_sec\n\n\n        \n)\n\n\n    \n}\n\n\n}\n\n\n\nfn\n \nmain\n()\n \n{\n\n\n    \nlet\n \nmut\n \nreader\n \n=\n \nBufReader\n::\nwith_capacity\n(\nREAD_BUF_SIZE\n,\n \nio\n::\nstdin\n());\n\n\n    \nlet\n \nmut\n \nwriter\n \n=\n \nBufWriter\n::\nnew\n(\nio\n::\nstdout\n());\n\n\n    \nlet\n \nmut\n \nbuffer\n \n=\n \nvec\n!\n[];\n\n\n    \nlet\n \nstats\n \n=\n \nArc\n::\nnew\n(\nStats\n::\nnew\n(\n\"/dev/tty\"\n));\n\n\n\n    \nlet\n \nstats_clone\n \n=\n \nstats\n.\nclone\n();\n\n\n    \nthread\n::\nspawn\n(\nmove\n \n||\n \nloop\n \n{\n\n\n        \nsleep\n(\nDuration\n::\nfrom_millis\n(\nUPDATE_INTERVAL_MS\n));\n\n\n        \nwrite\n!\n(\n&\nstats_clone\n.\ntty\n,\n \n\"{}\"\n,\n \n&\nstats_clone\n).\nexpect\n(\n\"Could not write to tty!\"\n);\n\n\n    \n});\n\n\n\n    \nwhile\n \nreader\n.\nread_until\n(\nb'\\n'\n,\n \n&\nmut\n \nbuffer\n).\nunwrap\n()\n \n>\n \n0\n \n{\n\n\n        \nwriter\n.\nwrite\n(\n&\nbuffer\n).\nunwrap\n();\n\n\n        \nstats\n.\nadd\n(\n&\nbuffer\n);\n\n\n        \nbuffer\n.\nclear\n();\n\n\n    \n}\n\n\n    \nwriter\n.\nflush\n().\nunwrap\n();\n\n\n    \nwriteln\n!\n(\n&\nstats\n.\ntty\n,\n \n\"{}\"\n,\n \n&\nstats\n).\nexpect\n(\n\"Could not write to tty!\"\n);\n\n\n}\n\n\n\n\n\nExact difference is \nviewable on Github\n.\n\n\nClosing Thoughts\n\u00b6\n\n\nI personally learned a lot assembling these steps and wish I did this \nbefore\n\npublishing the \ncargo\n \ncrate\n of the same name.\n\n\nAny suggestions, comments, and corrections welcome on this post or the final crate are welcome.\n\nhttps://github.com/ddrscott/stream_stats\n\n\nThanks for learning with me!",
            "title": "A Rustic Journey Through Stream Stats"
        },
        {
            "location": "/blog/2018/stream-stats-in-rust/#a-rustic-journey-through-stream-stats",
            "text": "After playing  Guessing Game  from the  Rust Book  a few times, it was time to make something a little more substantial. We're going to create  stream_stats , a CLI program which prints throughput statistics from  stdin  while redirecting through  stdout . Think  tee  +  wc -l  +  watch  all at the same time.  TL;DR  -  cargo install stream_stats   Here is a quick demo of the program:   Today, I we'll build this program up in 6 steps smallish steps. The minimum requirement of this program was the live feedback as seen in the demo  and  minimal impact on the overall performance.",
            "title": "A Rustic Journey Through Stream Stats"
        },
        {
            "location": "/blog/2018/stream-stats-in-rust/#step-1-reproducing-cat-inefficiently",
            "text": "First step is to replicate  cat . We'll do it as demonstrated by Rust's own  documentation .  use   std :: io ;  fn   main ()   {       let   mut   buffer   =   String :: new ();       while   io :: stdin (). read_line ( & mut   buffer ). unwrap ()   >   0   {           print ! ( \"{}\" ,   buffer );           buffer . clear ();       }  }    I'm using  unwrap  to keep our program short and sweet.   Save the code as  stream_stats.rs  and build it using  rustc -O stream_stats.rs . This will\ncompile the program into  stream_stats . We can now run the program with ./stream_stats < stream_stats.rs  or  cat stream_stats.rs | stream_stats . This should output the source code we just wrote.  The program is sufficient for small streams, but will perform horribly on large files.",
            "title": "Step 1 - Reproducing cat Inefficiently"
        },
        {
            "location": "/blog/2018/stream-stats-in-rust/#step-2-reproducing-cat-efficiently-with-buffering",
            "text": "It can be excessively inefficient to work directly with a Read instance. For example, every call to read on TcpStream results in a system call. A BufReader performs large, infrequent reads on the underlying Read and maintains an in-memory buffer of the results.  --  https://doc.rust-lang.org/std/io/struct.BufReader.html   Lets add some buffer use to increase performance and get it near the speed of  cat . Replace the contents of  stream_stats.rs  with the following, recompile, and run the program.  use   std :: io :: { self ,   BufRead ,   BufReader ,   BufWriter ,   Write };  static   READ_BUF_SIZE :  usize   =   1024   *   1024 ;  fn   main ()   {       let   mut   reader   =   BufReader :: with_capacity ( READ_BUF_SIZE ,   io :: stdin ());       let   mut   writer   =   BufWriter :: new ( io :: stdout ());       let   mut   buffer   =   vec ! [];       while   reader . read_until ( b'\\n' ,   & mut   buffer ). unwrap ()   >   0   {           writer . write ( & buffer ). unwrap ();           buffer . clear ();       }       writer . flush (). unwrap ();  }   The exact difference is  viewable on Github .\nHere's a one-liner which to help with the build/run cycle:  rustc -O ./stream_stats.rs  &&  ./stream_stats < stream_stats.rs  For a few extra lines, we get a lot of performance. There are ways to get even more\nperformance, but it won't be worth the code complexity at this time.",
            "title": "Step 2 - Reproducing cat Efficiently with Buffering"
        },
        {
            "location": "/blog/2018/stream-stats-in-rust/#step-3-count-the-lines",
            "text": "We're ready to start counting lines. We'll introduce a  struct  to hold a start\ntime and line count.  use   std :: io :: { self ,   BufRead ,   BufReader ,   BufWriter ,   Write };  use   std :: time :: Instant ;  static   READ_BUF_SIZE :  usize   =   1024   *   1024 ;  struct   Stats   {       started :  Instant ,       lines :  usize ,  }  fn   main ()   {       let   mut   reader   =   BufReader :: with_capacity ( READ_BUF_SIZE ,   io :: stdin ());       let   mut   writer   =   BufWriter :: new ( io :: stdout ());       let   mut   buffer   =   vec ! [];       let   mut   stats   =   Stats   {           started :  Instant :: now (),           lines :  0 ,       };       while   reader . read_until ( b'\\n' ,   & mut   buffer ). unwrap ()   >   0   {           writer . write ( & buffer ). unwrap ();           stats . lines   +=   1 ;           buffer . clear ();       }       writer . flush (). unwrap ();       eprintln ! ( \"lines: {}, {:?}\" ,   stats . lines ,   stats . started . elapsed ());  }   Again the exact difference is  viewable on Github .",
            "title": "Step 3 - Count the Lines"
        },
        {
            "location": "/blog/2018/stream-stats-in-rust/#step-4-write-to-devtty",
            "text": "Using  eprintln!  is easy, but bad practice for non-error output. The next step is moving the output to  /dev/tty . As a reminder, we're also not using  println!  because we're reserving it for the original content piped from  stdin .  use   std :: fs :: { File ,   OpenOptions };  use   std :: io :: { self ,   BufRead ,   BufReader ,   BufWriter ,   Write };  use   std :: time :: Instant ;  static   READ_BUF_SIZE :  usize   =   1024   *   1024 ;  struct   Stats   {       started :  Instant ,       lines :  usize ,       tty :  File ,  }  impl   Stats   {       fn   new ( tty :  & str )   ->  Stats   {           Stats   {               started :  Instant :: now (),               lines :  0 ,               tty :  OpenOptions :: new ()                   . write ( true )                   . append ( true )                   . open ( tty )                   . expect ( \"Cannot open tty for writing!\" ),           }       }  }  fn   main ()   {       let   mut   reader   =   BufReader :: with_capacity ( READ_BUF_SIZE ,   io :: stdin ());       let   mut   writer   =   BufWriter :: new ( io :: stdout ());       let   mut   buffer   =   vec ! [];       let   mut   stats   =   Stats :: new ( \"/dev/tty\" );       while   reader . read_until ( b'\\n' ,   & mut   buffer ). unwrap ()   >   0   {           writer . write ( & buffer ). unwrap ();           stats . lines   +=   1 ;           buffer . clear ();       }       writer . flush (). unwrap ();       writeln ! (           stats . tty ,           \"lines: {}, {:?}\" ,           stats . lines ,           stats . started . elapsed ()       ). expect ( \"Could not write to tty!\" );  }   Exact difference is  viewable on Github .",
            "title": "Step 4 - Write to /dev/tty"
        },
        {
            "location": "/blog/2018/stream-stats-in-rust/#step-5-beautify-stats-output",
            "text": "The display logic is going to get a little more complex. We want to move the string formatting code to a  fmt::Display  trait. We'll also add the kilobytes to the displayed stats.  use   std :: fmt ;  use   std :: fs :: { File ,   OpenOptions };  use   std :: io :: { self ,   BufRead ,   BufReader ,   BufWriter ,   Write };  use   std :: time :: Instant ;  static   READ_BUF_SIZE :  usize   =   1024   *   1024 ;  static   CLEAR_LINE :  & str   =   \" \\x1B [1G \\x1B [2K\" ;  struct   Stats   {       started :  Instant ,       lines :  usize ,       bytes :  usize ,       tty :  File ,  }  impl   Stats   {       fn   new ( tty :  & str )   ->  Stats   {           Stats   {               started :  Instant :: now (),               lines :  0 ,               bytes :  0 ,               tty :  OpenOptions :: new ()                   . write ( true )                   . append ( true )                   . open ( tty )                   . expect ( \"Cannot open tty for writing!\" ),           }       }  }  impl   fmt :: Display   for   Stats   {       fn   fmt ( & self ,   f :  & mut   fmt :: Formatter )   ->  fmt :: Result   {           let   elapsed   =   self . started . elapsed ();           let   seconds :  f64   =   elapsed . as_secs ()   as   f64   +   elapsed . subsec_nanos ()   as   f64   *   1e-9 ;           if   seconds   ==   0.0   {               return   write ! ( f ,   \"\" );           }           let   kb   =   self . bytes   as   f64   /   1024   as   f64 ;           let   kb_per_sec   =   kb   /   seconds ;           let   lines_per_sec   =   self . lines   as   f64   /   seconds ;           write ! (               f ,               \"{}{:.1} sec | {:.0} kb [ {:.1}/s ] | {} lines [ {:.0}/s ]\" ,               CLEAR_LINE ,               seconds ,               kb ,               kb_per_sec ,               self . lines ,               lines_per_sec           )       }  }  fn   main ()   {       let   mut   reader   =   BufReader :: with_capacity ( READ_BUF_SIZE ,   io :: stdin ());       let   mut   writer   =   BufWriter :: new ( io :: stdout ());       let   mut   buffer   =   vec ! [];       let   mut   stats   =   Stats :: new ( \"/dev/tty\" );       while   reader . read_until ( b'\\n' ,   & mut   buffer ). unwrap ()   >   0   {           writer . write ( & buffer ). unwrap ();           stats . lines   +=   1 ;           stats . bytes   +=   & buffer . len ();           buffer . clear ();       }       writer . flush (). unwrap ();       writeln ! ( & stats . tty ,   \"{}\" ,   & stats ). expect ( \"Could not write to tty!\" );  }   Exact difference is  viewable on Github .",
            "title": "Step 5 - Beautify Stats Output"
        },
        {
            "location": "/blog/2018/stream-stats-in-rust/#step-6-display-the-stats-10-times-per-second",
            "text": "We're finally at the most useful part of the program. Viewing the stats while\nthe stream is still going.  For this task, we introduce a thread which loops forever sleeping a little and\nwaking to output the stats. Because of the thread, we need to use  Arc  to\nsafely tell Rust another thread is going to have a pointer to the stats object.  To be honest, I don't fully understand why I need to use  AtomicUsize . I tried\nto keep the  usize  variables would get errors regarding mutability. If someone\nout there can remove the  AtomicUsize  without introducing  unsafe  please let\nme know!  Here's the final code listing:  use   std :: fmt ;  use   std :: fs :: { File ,   OpenOptions };  use   std :: io :: { self ,   BufRead ,   BufReader ,   BufWriter ,   Write };  use   std :: sync :: Arc ;  use   std :: sync :: atomic :: { AtomicUsize ,   Ordering };  use   std :: thread :: { self ,   sleep };  use   std :: time :: { Duration ,   Instant };  static   READ_BUF_SIZE :  usize   =   1024   *   1024 ;  static   CLEAR_LINE :  & str   =   \" \\x1B [1G \\x1B [2K\" ;  static   UPDATE_INTERVAL_MS :  u64   =   100 ;  struct   Stats   {       started :  Instant ,       lines :  AtomicUsize ,       bytes :  AtomicUsize ,       tty :  File ,  }  impl   Stats   {       fn   new ( tty :  & str )   ->  Stats   {           Stats   {               started :  Instant :: now (),               lines :  AtomicUsize :: new ( 0 ),               bytes :  AtomicUsize :: new ( 0 ),               tty :  OpenOptions :: new ()                   . write ( true )                   . append ( true )                   . open ( tty )                   . expect ( \"Cannot open tty for writing!\" ),           }       }       fn   add ( & self ,   buffer :  & Vec < u8 > )   {           self . lines . fetch_add ( 1 ,   Ordering :: Relaxed );           self . bytes . fetch_add ( buffer . len (),   Ordering :: Relaxed );       }  }  impl   fmt :: Display   for   Stats   {       fn   fmt ( & self ,   f :  & mut   fmt :: Formatter )   ->  fmt :: Result   {           let   elapsed   =   self . started . elapsed ();           let   seconds :  f64   =   elapsed . as_secs ()   as   f64   +   elapsed . subsec_nanos ()   as   f64   *   1e-9 ;           if   seconds   ==   0.0   {               return   write ! ( f ,   \"\" );           }           let   bytes   =   self . bytes . load ( Ordering :: Relaxed )   as   f64 ;           let   lines   =   self . lines . load ( Ordering :: Relaxed )   as   f64 ;           let   kb   =   bytes   /   1024   as   f64 ;           let   kb_per_sec   =   kb   /   seconds ;           let   lines_per_sec   =   lines   /   seconds ;           write ! (               f ,               \"{}{:.1} sec | {:.0} kb [ {:.1}/s ] | {:.0} lines [ {:.0}/s ]\" ,               CLEAR_LINE ,               seconds ,               kb ,               kb_per_sec ,               lines ,               lines_per_sec           )       }  }  fn   main ()   {       let   mut   reader   =   BufReader :: with_capacity ( READ_BUF_SIZE ,   io :: stdin ());       let   mut   writer   =   BufWriter :: new ( io :: stdout ());       let   mut   buffer   =   vec ! [];       let   stats   =   Arc :: new ( Stats :: new ( \"/dev/tty\" ));       let   stats_clone   =   stats . clone ();       thread :: spawn ( move   ||   loop   {           sleep ( Duration :: from_millis ( UPDATE_INTERVAL_MS ));           write ! ( & stats_clone . tty ,   \"{}\" ,   & stats_clone ). expect ( \"Could not write to tty!\" );       });       while   reader . read_until ( b'\\n' ,   & mut   buffer ). unwrap ()   >   0   {           writer . write ( & buffer ). unwrap ();           stats . add ( & buffer );           buffer . clear ();       }       writer . flush (). unwrap ();       writeln ! ( & stats . tty ,   \"{}\" ,   & stats ). expect ( \"Could not write to tty!\" );  }   Exact difference is  viewable on Github .",
            "title": "Step 6 - Display the stats 10 times per second"
        },
        {
            "location": "/blog/2018/stream-stats-in-rust/#closing-thoughts",
            "text": "I personally learned a lot assembling these steps and wish I did this  before \npublishing the  cargo   crate  of the same name.  Any suggestions, comments, and corrections welcome on this post or the final crate are welcome. https://github.com/ddrscott/stream_stats  Thanks for learning with me!",
            "title": "Closing Thoughts"
        },
        {
            "location": "/blog/2018/getting-rusty-with-vim/",
            "text": "Getting Rusty with Vim\n\u00b6\n\n\n\n\nAfter dabbing in Go and Crystal, I figured I'd give Rust a try. Of course I\nused Vim along the way. Here are some notes I compiled after my first session.\n\n\n\n\n\nVim Setup\n\u00b6\n\n\nThere are 2 excellent Vim plugins which play nice with Rust. First is\n\nhttps://github.com/rust-lang/rust.vim\n which provides:\n\n\n\n\n... Rust file detection, syntax highlighting, formatting, Syntastic integration, and more.\n\n\n\n\nIt has nearly 1k stars, one of which is from me, and it's triple the stars of\n\nrust-mode\n for Emacs.\n\n\nThe second plugin is \nhttps://github.com/racer-rust/vim-racer\n which provides omni-complete and jump to definition. Both features are good enough that I don't need to use ctags. I've in fact overridden several default Vim mappings with \nvim-racer\n implementations:\n\n\nau\n \nFileType\n rust nmap \n<\nsilent\n>\n \n<\nC\n-\n]\n>\n \n<\nPlug\n>(\nrust\n-\ndef\n)\n\n\nau\n \nFileType\n rust nmap \n<\nsilent\n>\n \n<\nC\n-\nw\n><\nC\n-\n]\n>\n \n<\nPlug\n>(\nrust\n-\ndef\n-\nvertical\n)\n\n\nau\n \nFileType\n rust nmap \n<\nsilent\n>\n \n<\nC\n-\nw\n>\n} \n<\nPlug\n>(\nrust\n-\ndef\n-\nsplit\n)\n\n\nau\n \nFileType\n rust nmap \n<\nsilent\n>\n \n<\nC\n-\nk\n>\n \n<\nPlug\n>(\nrust\n-\ndoc\n)\n\n\n\n\n\nRust Experience\n\u00b6\n\n\nThe featured image is an implementation of a number guessing game. The game is\nfrom the Rust Tutorial Guide at\n\nhttps://doc.rust-lang.org/book/first-edition/guessing-game.html\n. I followed the\nguide sentence by sentence, line by line, and everything worked without\nadditional troubleshooting sessions. Good Job @rustlang! \n\n\nI massaged the code a little more to fool around and came up with the code in\nthe featured screen shot. The source is available in this \ngist\n. It's not the most exciting code I've\never written, but possibly the most painless of the new languages I've tried.\n\n\nWhen I came across some confusing language decisions. I posted a tweet about it:\n\n\nRust has clever tuple indexing, but square brackets would have been fine. What's wrong with `tuple[0]`? \n#rustlang\n \npic.twitter.com/E0VY70zxuV\n\u2014 Scott Pierce (@_ddrscott_) \nMarch 3, 2018\n\n\n\n\n\n@rustlang responded quickly with insightful information. They're totally getting\nthe Raving Fan Award this weekend!\n\n\nConclusion\n\u00b6\n\n\nRust is worth pursing with or without Vim. The feedback from the compiler\nand runtime errors is clear. The\n\nracer-rust\n completion utility gives\nall IDE super powers. And finally, I hear it's a pretty good language, too.  \nhttps://www.rust-lang.org",
            "title": "Getting Rusty with Vim"
        },
        {
            "location": "/blog/2018/getting-rusty-with-vim/#getting-rusty-with-vim",
            "text": "After dabbing in Go and Crystal, I figured I'd give Rust a try. Of course I\nused Vim along the way. Here are some notes I compiled after my first session.",
            "title": "Getting Rusty with Vim"
        },
        {
            "location": "/blog/2018/getting-rusty-with-vim/#vim-setup",
            "text": "There are 2 excellent Vim plugins which play nice with Rust. First is https://github.com/rust-lang/rust.vim  which provides:   ... Rust file detection, syntax highlighting, formatting, Syntastic integration, and more.   It has nearly 1k stars, one of which is from me, and it's triple the stars of rust-mode  for Emacs.  The second plugin is  https://github.com/racer-rust/vim-racer  which provides omni-complete and jump to definition. Both features are good enough that I don't need to use ctags. I've in fact overridden several default Vim mappings with  vim-racer  implementations:  au   FileType  rust nmap  < silent >   < C - ] >   < Plug >( rust - def )  au   FileType  rust nmap  < silent >   < C - w >< C - ] >   < Plug >( rust - def - vertical )  au   FileType  rust nmap  < silent >   < C - w > }  < Plug >( rust - def - split )  au   FileType  rust nmap  < silent >   < C - k >   < Plug >( rust - doc )",
            "title": "Vim Setup"
        },
        {
            "location": "/blog/2018/getting-rusty-with-vim/#rust-experience",
            "text": "The featured image is an implementation of a number guessing game. The game is\nfrom the Rust Tutorial Guide at https://doc.rust-lang.org/book/first-edition/guessing-game.html . I followed the\nguide sentence by sentence, line by line, and everything worked without\nadditional troubleshooting sessions. Good Job @rustlang!   I massaged the code a little more to fool around and came up with the code in\nthe featured screen shot. The source is available in this  gist . It's not the most exciting code I've\never written, but possibly the most painless of the new languages I've tried.  When I came across some confusing language decisions. I posted a tweet about it:  Rust has clever tuple indexing, but square brackets would have been fine. What's wrong with `tuple[0]`?  #rustlang   pic.twitter.com/E0VY70zxuV \u2014 Scott Pierce (@_ddrscott_)  March 3, 2018   @rustlang responded quickly with insightful information. They're totally getting\nthe Raving Fan Award this weekend!",
            "title": "Rust Experience"
        },
        {
            "location": "/blog/2018/getting-rusty-with-vim/#conclusion",
            "text": "Rust is worth pursing with or without Vim. The feedback from the compiler\nand runtime errors is clear. The racer-rust  completion utility gives\nall IDE super powers. And finally, I hear it's a pretty good language, too.   https://www.rust-lang.org",
            "title": "Conclusion"
        },
        {
            "location": "/blog/2018/blog-setup/",
            "text": "Dev Blog Tools :: A Quick Tour of My Setup\n\u00b6\n\n\n\n\nI've been asked to share about my blogging setup a few times, so in the spirit of keeping things \nDRY\n, it's time to make a post about it.\n\n\nTL;DR\n -- Mac, iTerm, NeoVim, LICEcap, Octopress, Base16, Input Font, Skitch, OBS\n\n\n\n\n\n\n\nWARNING\n This is an atypical post. I normally prefer to go over a single feature, but this time I'm going to under explain a lot of features. Here's a short list of typical posts in case chaos is not your thing:\n\n\n\n\nhttps://ddrscott.github.io/blog/2017/vim-send-text/\n\n\nhttps://ddrscott.github.io/blog/2017/what-the-sql-lateral/\n\n\nhttps://ddrscott.github.io/blog/2016/negative-modulo/\n\n\n\n\n\n\nComputer\n\u00b6\n\n\nI do all my writing and coding on a MacBook Pro Retina 15 inch. It's pretty maxed out, but I don't think it needs to be that way. The only stats I really care about are the size and the clarity of the screen.\n\n\n\n\nTerminal\n\u00b6\n\n\nI like to live in a terminal. I choose \niTerm2\n for it's split panes and independent font size per pane. At times I wish it was as fast as the native Terminal.app, but it doesn't support splits. I've been told many times that \ntmux\n supports splits, too, but I can't change the text size independently between splits. I'd also rather use \nGNU screen\n anyway.\n\n\n\n\nOld timers like old things\u2122\n\n\n\n\nEditor\n\u00b6\n\n\nNeoVim\n is always loaded in one of my terminal panes. It's the most efficient editor for me. I switched away from Vim 7 because it couldn't do background jobs. Prior to Vim I used \nRubyMine\n and \nIntelliJ\n which were great for code completion and navigating projects, but felt heavy for notes, free form writing, and editing system files. I'll save the rest of the Vim sermon for another post.\n\n\nWhen composing posts, I use \nvim-markdown\n to get syntax highlighting, folding, TOC, and other goodies.\n\n\nMy entire NeoVim config can be found in its \nGithub repository\n. I don't recommend folks using it outright, but borrow parts if it and slowly integrate it into their own setup. One size doesn't fit all. It barely fits me!\n\n\nColors\n\u00b6\n\n\nI lived in \nSolarized Dark\n for many years. It is so common place in development shops it became the \nnew green screen\n of the 70's and 80's. So when folks see yellow and green highlights against an off-black chalkboard beaming from my terminal, there's pause and self reflection. They wonder how they were nestled into a monotonous monoculture. They ponder when they traded emotional delight for ocular comfort. They realize depression encroached silently on them like mold in a damp attic. But I digress\u2026\n\n\nHere's how Base16 describes itself:\n\n\n\n\nAn architecture for building themes based on carefully chosen syntax highlighting using a base of sixteen colours. Base16 provides a set of guidelines detailing how to style syntax and how to code a builder for compiling base16 schemes and templates.\n\n\n-- \nhttps://github.com/chriskempson/base16\n\n\n\n\n\n\nbase16-ocean\n is the color scheme I use. It's scheme #74, type \nj\n or \nk\n to change the theme). The scheme is perfectly in sync between shell and Vim due to \nbase16-shell\n and \nbase16-vim\n. I wrote a \nlonger post about using Base16 while back\n.\n\n\nFont\n\u00b6\n\n\nI've been using the same code font for as long as I can remember: Input Mono Condensed.\n\n\n\n\n\n\nInput is a flexible system of fonts designed specifically for code by David Jonathan Ross. It offers both monospaced and proportional fonts, all with a large range of widths, weights, and styles for richer code formatting.\n\n\n-- Font Bureau\n\n\n\n\nI enjoy the fancy 'a' and 'g' characters along with easy to distinguish 'l', '1', and 'I'.(Helvetica can't do it justice.) It also has several different character width options so I can squeeze more code into one eye shot.\n\n\n\n\nSpeaking of shots\u2026\n\n\nScreenshots\n\u00b6\n\n\nI have a few ways of taking screenshots and it's mainly the Mac way:\n\n\n\n\nTo snap a small portion of the screen, I use \n\u21e7+\u2318+4\n, then select region to snap.\n\n\nTo snap a window with the shadow, I use \n\u21e7+\u2318+4\n, then \nspace\n and select a window.\n\n\n\n\nApple's support page\n has the gruesome details on both.\n\n\nWhen I want to annotate a screenshot, I use \nEvernote's Skitch App\n. The featured image was created using a combination of OSX screenshot and then editing in \nSkitch\n.\n\n\n\n\nAnimated Gifs and Videos\n\u00b6\n\n\nFor short demos, I like to use \nLICEcap\n to record an animated Gif. I wouldn't use Gifs for anything longer than a few seconds since it doesn't support video playback controls without extra magic.\n\n\nHere's an example \nLICEcap\n Gif:\n\n\n\n\nAnd here's a video of how I produced it:\n\n\n\nFor full screen video record, I use \nOBS Studio\n. (You might have noticed me stopping the recording at the end of the video. Should have used a hotkey.) It produces small file sizes and has a lot of features including webcam overlays, filters, transforms, etc. It deserves a whole book of its own.\n\n\n\n\nNote to Self\n\n\n\n\nwrite book about OBS Studio\n\n\nretire\n\n\n\n\n\n\nBlog Generator\n\u00b6\n\n\nI use \nOctopress\n to generate the static HTML pages you're reading now. I haven't updated it since 2014 (\nSHA 71e4d40b\n) and I'm terrified to do so. The setup Just Works\u2122. I write in \nMarkdown\n and it does the rest.\n\n\nThe source code for this exact post is \nhere\n.\n\n\nThat being said, I'm strongly considering switching to \nMkdocs\n to have more structure and better search capabilities built-in.\n\n\nClosing\n\u00b6\n\n\nYou made it to the end! I hope at least one of these will benefit your daily computing life.\n\n\nQuestions? Comments? Trolls?!? Let me know! \nTweet\n\n\nHacker News\n\n\nLinks\n\n\n\n\niTerm2 -- \nhttps://www.iterm2.com/\n\n\nTmux -- \nhttps://github.com/tmux/tmux/wiki\n\n\nGNU Screen -- \nhttps://www.gnu.org/software/screen/\n\n\nRubyMine -- \nhttps://www.jetbrains.com/ruby/\n\n\nIntelliJ -- \nhttps://www.jetbrains.com/idea/\n\n\nVim -- \nhttps://www.vim.org\n\n\nNeoVim -- \nhttps://neovim.io/\n\n\nvim-markdown -- \nhttps://github.com/plasticboy/vim-markdown\n\n\nMy NeoVim Config -- \nhttps://github.com/ddrscott/config-nvim\n\n\nbase16-shell -- \nhttps://github.com/chriskempson/base16-shell\n\n\nbase16-vim -- \nhttps://github.com/chriskempson/base16-vim\n\n\nbase16-ocean -- \nhttp://chriskempson.com/projects/base16/\n\n\nInput Font -- \nhttp://input.fontbureau.com/\n\n\nSkitch -- \nhttps://evernote.com/products/skitch\n\n\nLICEcap -- \nhttps://www.cockos.com/licecap/\n\n\nOBS Studio -- \nhttps://obsproject.com/\n\n\nOctopress -- \nhttp://octopress.org/\n\n\nMkdocs -- \nhttp://www.mkdocs.org/\n\n\n\n\nEdits\n\n\n\n\nadded Hacker News link",
            "title": "Dev Blog Tools :: A Quick Tour of My Setup"
        },
        {
            "location": "/blog/2018/blog-setup/#dev-blog-tools-a-quick-tour-of-my-setup",
            "text": "I've been asked to share about my blogging setup a few times, so in the spirit of keeping things  DRY , it's time to make a post about it.  TL;DR  -- Mac, iTerm, NeoVim, LICEcap, Octopress, Base16, Input Font, Skitch, OBS    WARNING  This is an atypical post. I normally prefer to go over a single feature, but this time I'm going to under explain a lot of features. Here's a short list of typical posts in case chaos is not your thing:   https://ddrscott.github.io/blog/2017/vim-send-text/  https://ddrscott.github.io/blog/2017/what-the-sql-lateral/  https://ddrscott.github.io/blog/2016/negative-modulo/",
            "title": "Dev Blog Tools :: A Quick Tour of My Setup"
        },
        {
            "location": "/blog/2018/blog-setup/#computer",
            "text": "I do all my writing and coding on a MacBook Pro Retina 15 inch. It's pretty maxed out, but I don't think it needs to be that way. The only stats I really care about are the size and the clarity of the screen.",
            "title": "Computer"
        },
        {
            "location": "/blog/2018/blog-setup/#terminal",
            "text": "I like to live in a terminal. I choose  iTerm2  for it's split panes and independent font size per pane. At times I wish it was as fast as the native Terminal.app, but it doesn't support splits. I've been told many times that  tmux  supports splits, too, but I can't change the text size independently between splits. I'd also rather use  GNU screen  anyway.   Old timers like old things\u2122",
            "title": "Terminal"
        },
        {
            "location": "/blog/2018/blog-setup/#editor",
            "text": "NeoVim  is always loaded in one of my terminal panes. It's the most efficient editor for me. I switched away from Vim 7 because it couldn't do background jobs. Prior to Vim I used  RubyMine  and  IntelliJ  which were great for code completion and navigating projects, but felt heavy for notes, free form writing, and editing system files. I'll save the rest of the Vim sermon for another post.  When composing posts, I use  vim-markdown  to get syntax highlighting, folding, TOC, and other goodies.  My entire NeoVim config can be found in its  Github repository . I don't recommend folks using it outright, but borrow parts if it and slowly integrate it into their own setup. One size doesn't fit all. It barely fits me!",
            "title": "Editor"
        },
        {
            "location": "/blog/2018/blog-setup/#colors",
            "text": "I lived in  Solarized Dark  for many years. It is so common place in development shops it became the  new green screen  of the 70's and 80's. So when folks see yellow and green highlights against an off-black chalkboard beaming from my terminal, there's pause and self reflection. They wonder how they were nestled into a monotonous monoculture. They ponder when they traded emotional delight for ocular comfort. They realize depression encroached silently on them like mold in a damp attic. But I digress\u2026  Here's how Base16 describes itself:   An architecture for building themes based on carefully chosen syntax highlighting using a base of sixteen colours. Base16 provides a set of guidelines detailing how to style syntax and how to code a builder for compiling base16 schemes and templates.  --  https://github.com/chriskempson/base16    base16-ocean  is the color scheme I use. It's scheme #74, type  j  or  k  to change the theme). The scheme is perfectly in sync between shell and Vim due to  base16-shell  and  base16-vim . I wrote a  longer post about using Base16 while back .",
            "title": "Colors"
        },
        {
            "location": "/blog/2018/blog-setup/#font",
            "text": "I've been using the same code font for as long as I can remember: Input Mono Condensed.    Input is a flexible system of fonts designed specifically for code by David Jonathan Ross. It offers both monospaced and proportional fonts, all with a large range of widths, weights, and styles for richer code formatting.  -- Font Bureau   I enjoy the fancy 'a' and 'g' characters along with easy to distinguish 'l', '1', and 'I'.(Helvetica can't do it justice.) It also has several different character width options so I can squeeze more code into one eye shot.   Speaking of shots\u2026",
            "title": "Font"
        },
        {
            "location": "/blog/2018/blog-setup/#screenshots",
            "text": "I have a few ways of taking screenshots and it's mainly the Mac way:   To snap a small portion of the screen, I use  \u21e7+\u2318+4 , then select region to snap.  To snap a window with the shadow, I use  \u21e7+\u2318+4 , then  space  and select a window.   Apple's support page  has the gruesome details on both.  When I want to annotate a screenshot, I use  Evernote's Skitch App . The featured image was created using a combination of OSX screenshot and then editing in  Skitch .",
            "title": "Screenshots"
        },
        {
            "location": "/blog/2018/blog-setup/#animated-gifs-and-videos",
            "text": "For short demos, I like to use  LICEcap  to record an animated Gif. I wouldn't use Gifs for anything longer than a few seconds since it doesn't support video playback controls without extra magic.  Here's an example  LICEcap  Gif:   And here's a video of how I produced it:  For full screen video record, I use  OBS Studio . (You might have noticed me stopping the recording at the end of the video. Should have used a hotkey.) It produces small file sizes and has a lot of features including webcam overlays, filters, transforms, etc. It deserves a whole book of its own.   Note to Self   write book about OBS Studio  retire",
            "title": "Animated Gifs and Videos"
        },
        {
            "location": "/blog/2018/blog-setup/#blog-generator",
            "text": "I use  Octopress  to generate the static HTML pages you're reading now. I haven't updated it since 2014 ( SHA 71e4d40b ) and I'm terrified to do so. The setup Just Works\u2122. I write in  Markdown  and it does the rest.  The source code for this exact post is  here .  That being said, I'm strongly considering switching to  Mkdocs  to have more structure and better search capabilities built-in.",
            "title": "Blog Generator"
        },
        {
            "location": "/blog/2018/blog-setup/#closing",
            "text": "You made it to the end! I hope at least one of these will benefit your daily computing life.  Questions? Comments? Trolls?!? Let me know!  Tweet  Hacker News  Links   iTerm2 --  https://www.iterm2.com/  Tmux --  https://github.com/tmux/tmux/wiki  GNU Screen --  https://www.gnu.org/software/screen/  RubyMine --  https://www.jetbrains.com/ruby/  IntelliJ --  https://www.jetbrains.com/idea/  Vim --  https://www.vim.org  NeoVim --  https://neovim.io/  vim-markdown --  https://github.com/plasticboy/vim-markdown  My NeoVim Config --  https://github.com/ddrscott/config-nvim  base16-shell --  https://github.com/chriskempson/base16-shell  base16-vim --  https://github.com/chriskempson/base16-vim  base16-ocean --  http://chriskempson.com/projects/base16/  Input Font --  http://input.fontbureau.com/  Skitch --  https://evernote.com/products/skitch  LICEcap --  https://www.cockos.com/licecap/  OBS Studio --  https://obsproject.com/  Octopress --  http://octopress.org/  Mkdocs --  http://www.mkdocs.org/   Edits   added Hacker News link",
            "title": "Closing"
        },
        {
            "location": "/blog/2017/base16-shell/",
            "text": "Base16 Shell\n\u00b6\n\n\n\n\nAfter many years using the excellent Solarized color scheme, it has\nstarted to feel stale. Sometimes I think the dark blueish tint brings\ndown my mood. Other times, I wonder what life could be like if I stared at more\ncheerful colors. Thus starts my farewell from Solarized, and hello to\nBase16.\n\n\n\n\n\nFrom Base16's \nGithub README\n:\n\n\n\n\nBase16 provides carefully chosen syntax highlighting and a default set of\nsixteen colors suitable for a wide range of applications. Base16 is not a\nsingle theme but a set of guidelines with numerous implementations.\n\n\n\n\nWhich means after integrating into Base16 once, I'll have access to an\nunlimited supply of themes in the future!\n\n\nInstallation\n\u00b6\n\n\nBase16 has perfect iTerm and shell integration. Once the repo was installed\nlocally, I called \nbase16_ocean\n and was greeted by brand new palette. No iTerm\ntweaking, no downloading this other thing and importing stuff into iTerm. It was\nliterally 2 steps performed in shell and then pick a theme.\n\n\nHere's what you do. (FYI. This is pretty much copy/paste from their repo)\n\n\n# 1. clone the repo to `~/.config/base16-shell`\n\ngit clone https://github.com/chriskempson/base16-shell.git ~/.config/base16-shell\n\n\n# 2. update ~/.bashrc or ~/.zshrc\n\ncat >> ~/.zshrc \n<<'SH'\n\n\nBASE16_SH\nELL\n=\n$HOME\n/.config/base16-shell/\n\n[\n -n \n\"\n$PS1\n\"\n \n]\n \n&&\n \n[\n -s \n$BASE16_SHELL\n/profile_helper.sh \n]\n \n&&\n \neval\n \n\"\n$(\n$BASE16_SHELL\n/profile_helper.sh\n)\n\"\n\nSH\n\n\n\n\nAfter you're done with those steps, start a new terminal session or source the\nfile, and start choosing a theme. Try \nbase16_ocean\n to see what I'm seeing. Try\n\nbase16_<tab>\n to see what other options you have available. To preview what\nthey look like before making a choice go to their website:\n\nhttps://chriskempson.github.io/base16/\n.\n\n\nVim Integration\n\u00b6\n\n\nInstall plugin from \nhttps://github.com/chriskempson/base16-vim\n.\n\n\nAdd the following to your \n.vimrc\n:\n\n\nif\n filereadable\n(\nexpand\n(\n\"~/.vimrc_background\"\n))\n\n  \nlet\n base16colorspace\n=\n256\n\n  source \n~\n/.vimrc_background\n\nendif\n\n\n\n\n\nbase16-shell\n commands create the \n~/.vimrc_background\n file every time a\n\nbase16_*\n alias is used. This allows Vim to always stay synchronized with\nshell which is AWESOME!\n\n\nConclusion\n\u00b6\n\n\nAfter cycling through everyone of the user created themes, I've settled on\n\nbase16_ocean\n as my new home. I may get tired of it, I may not, but either way\nI'm just a shell command away from changing. Indecision has never been so easy.",
            "title": "Base16 Shell"
        },
        {
            "location": "/blog/2017/base16-shell/#base16-shell",
            "text": "After many years using the excellent Solarized color scheme, it has\nstarted to feel stale. Sometimes I think the dark blueish tint brings\ndown my mood. Other times, I wonder what life could be like if I stared at more\ncheerful colors. Thus starts my farewell from Solarized, and hello to\nBase16.   From Base16's  Github README :   Base16 provides carefully chosen syntax highlighting and a default set of\nsixteen colors suitable for a wide range of applications. Base16 is not a\nsingle theme but a set of guidelines with numerous implementations.   Which means after integrating into Base16 once, I'll have access to an\nunlimited supply of themes in the future!",
            "title": "Base16 Shell"
        },
        {
            "location": "/blog/2017/base16-shell/#installation",
            "text": "Base16 has perfect iTerm and shell integration. Once the repo was installed\nlocally, I called  base16_ocean  and was greeted by brand new palette. No iTerm\ntweaking, no downloading this other thing and importing stuff into iTerm. It was\nliterally 2 steps performed in shell and then pick a theme.  Here's what you do. (FYI. This is pretty much copy/paste from their repo)  # 1. clone the repo to `~/.config/base16-shell` \ngit clone https://github.com/chriskempson/base16-shell.git ~/.config/base16-shell # 2. update ~/.bashrc or ~/.zshrc \ncat >> ~/.zshrc  <<'SH'  BASE16_SH ELL = $HOME /.config/base16-shell/ [  -n  \" $PS1 \"   ]   &&   [  -s  $BASE16_SHELL /profile_helper.sh  ]   &&   eval   \" $( $BASE16_SHELL /profile_helper.sh ) \" \nSH  After you're done with those steps, start a new terminal session or source the\nfile, and start choosing a theme. Try  base16_ocean  to see what I'm seeing. Try base16_<tab>  to see what other options you have available. To preview what\nthey look like before making a choice go to their website: https://chriskempson.github.io/base16/ .",
            "title": "Installation"
        },
        {
            "location": "/blog/2017/base16-shell/#vim-integration",
            "text": "Install plugin from  https://github.com/chriskempson/base16-vim .  Add the following to your  .vimrc :  if  filereadable ( expand ( \"~/.vimrc_background\" )) \n   let  base16colorspace = 256 \n  source  ~ /.vimrc_background endif   base16-shell  commands create the  ~/.vimrc_background  file every time a base16_*  alias is used. This allows Vim to always stay synchronized with\nshell which is AWESOME!",
            "title": "Vim Integration"
        },
        {
            "location": "/blog/2017/base16-shell/#conclusion",
            "text": "After cycling through everyone of the user created themes, I've settled on base16_ocean  as my new home. I may get tired of it, I may not, but either way\nI'm just a shell command away from changing. Indecision has never been so easy.",
            "title": "Conclusion"
        },
        {
            "location": "/blog/2017/how-to-get-better-at-anything/",
            "text": "How to Get Better At Anything\n\u00b6\n\n\n\n\n\n\nRTFM\n\u00b6\n\n\n\n\n\n\nWTFM, Write The Flip'n Manual\n\n\nDo a lightning talk about it :)\n\n\n\n\nMake it Fun\n\u00b6\n\n\n\n\n\n\nGamification\n\n\nTrophy anyone?\n\n\nIf it can't be made fun, make it fun.\n\n\n\n\nPractice\n\u00b6\n\n\n\n\n\n\nSlowly with intent\n\n\nPressure cycles: none, some, actual, intolerable.\n\n\nThe practice of practice deserves its own talk.\n\n\n\n\nBetter not good\n\u00b6\n\n\n\n\n\n\nGood is the killer of better.\n\n\nPeople tend to stop because good is unreachable.\n\n\nPeople tend to stop after they're good enough.\n\n\nIf we aim to get better, we'll eventually be better than good.\n\n\nProgressive goals. OMG! I forgot goal setting!\n\n\n\n\nLearn, don't Memorize\n\u00b6\n\n\n\n\n\n\nLearning is understanding\n\n\nUnderstanding is connecting the new thing to an old thing.\n\n\nComputers memorize. You're not a computer.\n\n\n\n\nLearn with others\n\u00b6\n\n\n\n\n\n\nWith the Internet you're never alone and always alone.\n\n\nActually talk with people!\n\n\n\n\nCheat\n\u00b6\n\n\n\n\n\n\nIf you're not cheating, you're not trying.\n\n\nReverse engineer the cheat, don't actually cheat!\n\n\n\n\nHow I got better at Vim\n\u00b6\n\n\n\n\nRTFM\n - \n:help\n\n\nWTFM\n - Blogging, figure out other people's problems :/\n\n\nPractice\n - Wrote stuff that wasn't needed immediately, my own notes.\n\n\nDon't Memorize\n - Vim has grammar like English. Oooh... Reconnection!\n\n\nLearn with Others\n - We have vim users, teach them (but don't let them know you're only one step ahead)\n\n\nCheat\n - Look at other's Vimscript to figure out that cool thing they did.\n\n\n\n\nWhat do you want to get better at next?!?\n\u00b6\n\n\n\n\nlightning talks?\n\n\nShuffling cards? (@devin)\n\n\nSQL?\n\n\nDrawing?\n\n\nPiano?",
            "title": "How to Get Better At Anything"
        },
        {
            "location": "/blog/2017/how-to-get-better-at-anything/#how-to-get-better-at-anything",
            "text": "",
            "title": "How to Get Better At Anything"
        },
        {
            "location": "/blog/2017/how-to-get-better-at-anything/#rtfm",
            "text": "WTFM, Write The Flip'n Manual  Do a lightning talk about it :)",
            "title": "RTFM"
        },
        {
            "location": "/blog/2017/how-to-get-better-at-anything/#make-it-fun",
            "text": "Gamification  Trophy anyone?  If it can't be made fun, make it fun.",
            "title": "Make it Fun"
        },
        {
            "location": "/blog/2017/how-to-get-better-at-anything/#practice",
            "text": "Slowly with intent  Pressure cycles: none, some, actual, intolerable.  The practice of practice deserves its own talk.",
            "title": "Practice"
        },
        {
            "location": "/blog/2017/how-to-get-better-at-anything/#better-not-good",
            "text": "Good is the killer of better.  People tend to stop because good is unreachable.  People tend to stop after they're good enough.  If we aim to get better, we'll eventually be better than good.  Progressive goals. OMG! I forgot goal setting!",
            "title": "Better not good"
        },
        {
            "location": "/blog/2017/how-to-get-better-at-anything/#learn-dont-memorize",
            "text": "Learning is understanding  Understanding is connecting the new thing to an old thing.  Computers memorize. You're not a computer.",
            "title": "Learn, don't Memorize"
        },
        {
            "location": "/blog/2017/how-to-get-better-at-anything/#learn-with-others",
            "text": "With the Internet you're never alone and always alone.  Actually talk with people!",
            "title": "Learn with others"
        },
        {
            "location": "/blog/2017/how-to-get-better-at-anything/#cheat",
            "text": "If you're not cheating, you're not trying.  Reverse engineer the cheat, don't actually cheat!",
            "title": "Cheat"
        },
        {
            "location": "/blog/2017/how-to-get-better-at-anything/#how-i-got-better-at-vim",
            "text": "RTFM  -  :help  WTFM  - Blogging, figure out other people's problems :/  Practice  - Wrote stuff that wasn't needed immediately, my own notes.  Don't Memorize  - Vim has grammar like English. Oooh... Reconnection!  Learn with Others  - We have vim users, teach them (but don't let them know you're only one step ahead)  Cheat  - Look at other's Vimscript to figure out that cool thing they did.",
            "title": "How I got better at Vim"
        },
        {
            "location": "/blog/2017/how-to-get-better-at-anything/#what-do-you-want-to-get-better-at-next",
            "text": "lightning talks?  Shuffling cards? (@devin)  SQL?  Drawing?  Piano?",
            "title": "What do you want to get better at next?!?"
        },
        {
            "location": "/blog/2017/fzf-dictionary/",
            "text": "FZF + WordNet = Dictionary\n\u00b6\n\n\n\n\nFZF + WordNet = Dictionary\n. FZF is a fuzzy finding command line tool. WordNet\nis a dictionary structured for developers. When married together, we can get\na snappy dictionary to help us find just the right word for any occasion.\n\n\n\n\n\nInstall Required Program\n\u00b6\n\n\nBefore making our new shell function, lets install the required programs.\n\n\n\n\nhttps://github.com/junegunn/fzf\n\n\nhttp://wordnetweb.princeton.edu/perl/webwn\n\n\n\n\nThese directions are for Max OSX with \nhomebrew\n installed. If you're on\na different system, read the docs from the sites above to get the programs for\nyour operating system.\n\n\nbrew install fzf\nbrew cask install xquartz\nbrew install wordnet\n\n\n\n\nFZF\n\u00b6\n\n\nFZF stands for Fuzzy Finder. It is a program which enables the user to filter\na set of lines from standard in and feed those line back to standard out.\nA basic example is: \nfind . | fzf\n. This presents a list of all files in the\ncurrent working directory and prompts the user for input. As you type letters, the\nlist will narrow, keeping only the items matching the search criteria. After\nselecting an entry from the list the line or lines chosen is printed to standard\nout. It provides a nifty argument \n--preview\n which can execute a program and\ndisplay its output as an aside in the terminal. We'll write more about FZF in the\nfuture.\n\n\nWordNet\n\u00b6\n\n\n\n\nWordNet is a large lexical database of English. Nouns, verbs, adjectives and\nadverbs are grouped into sets of cognitive synonyms (synsets), each expressing\na distinct concept. Synsets are interlinked by means of conceptual-semantic\nand lexical relations. The resulting network of meaningfully related words and\nconcepts can be navigated with the browser. WordNet is also freely and\npublicly available for download. WordNet's structure makes it a useful tool\nfor computational linguistics and natural language processing.\n\n\nWordNet superficially resembles a thesaurus, in that it groups words together\nbased on their meanings. However, there are some important distinctions.\nFirst, WordNet interlinks not just word forms\u2014strings of letters\u2014but specific\nsenses of words. As a result, words that are found in close proximity to one\nanother in the network are semantically disambiguated. Second, WordNet labels\nthe semantic relations among words, whereas the groupings of words in\na thesaurus does not follow any explicit pattern other than meaning\nsimilarity.\n\n\n\n\nUsing WordNet we can find information similar to what is in a dictionary and\nthesaurus combined.\n\n\nExample output of looking up \nhappy\n is:\n\n% wn happy -over\n\nOverview of adj happy\n\nThe adj happy has 4 senses (first 2 from tagged texts)\n\n1. (37) happy -- (enjoying or showing or marked by joy or pleasure; \"a happy smile\"; \"spent many happy days on the beach\"; \"a happy marriage\")\n2. (2) felicitous, happy -- (marked by good fortune; \"a felicitous life\"; \"a happy outcome\")\n3. glad, happy -- (eagerly disposed to act or to be of service; \"glad to help\")\n4. happy, well-chosen -- (well expressed and to the point; \"a happy turn of phrase\"; \"a few well-chosen words\")\n\n\n\nxquartz\n is needed since the WordNet package also works in GUI mode. The GUI\napp has a useful interface and could be more intuitive to use if you don't mind\nclicking around. The GUI app can be started with \nwnb\n, but we're not here for\nGUI stuff. Let's move on to making our terminal script.\n\n\nShell Script\n\u00b6\n\n\nThe following 3 functions can be used individually and are helpful all on their\nown. Add these directly into your shell profile or in a separate file and source\nit from the profile.\n\n\nfold\n is normally a built in command. By default it adds newlines when text\noverflows the terminal, but it doesn't do it in an easy to read fashion. The\ndefault behavior can break in the middle of a word and assumes a terminal width\nof 80 columns. Our \nfold\n function breaks at spaces and passes the whole\nterminal width to it when no other arguments are provided.\n\n\n# Default `fold` to screen width and break at spaces\n\n\nfunction\n fold \n{\n\n  \nif\n \n[\n \n$#\n -eq \n0\n \n]\n;\n \nthen\n\n    /usr/bin/fold -w \n$COLUMNS\n -s\n  \nelse\n\n    /usr/bin/fold \n$*\n\n  \nfi\n\n\n}\n\n\n\n\n\nspell\n is the FZF portion of our script. This fuzzy matches the built in Mac\ndictionary with a preview window containing the WordNet overview of the selected\nword.\n\n\n# Use `fzf` against system dictionary\n\n\nfunction\n spell \n{\n\n  cat /usr/share/dict/words \n|\n fzf --preview \n'wn {} -over | fold'\n --preview-window\n=\nup:60%\n\n}\n\n\n\n\n\nThe \ndic\n script uses \nspell\n to help find a word then outputs WordNet's\ndefinition.\n\n\n# Lookup definition of word using `wn $1 -over`.\n\n\n# If $1 is not provided, we'll use the `spell` command to pick a word.\n\n\n#\n\n\n# Requires:\n\n\n#   brew install wordnet\n\n\n#   brew install fzf\n\n\nfunction\n dic \n{\n\n  \nif\n \n[\n \n$#\n -eq \n0\n \n]\n;\n \nthen\n\n    wn \n`\nspell\n`\n -over \n|\n fold\n  \nelse\n\n    wn \n$1\n -over \n|\n fold\n  \nfi\n\n\n}\n\n\n\n\n\nHere's another demo of the \ndic\n function:\n\n\n\nConclusion\n\u00b6\n\n\nGluing programs together with \nfzf --preview\n is fun. Let us know what other\nrecipes you come up with in the comments below.",
            "title": "FZF + WordNet = Dictionary"
        },
        {
            "location": "/blog/2017/fzf-dictionary/#fzf-wordnet-dictionary",
            "text": "FZF + WordNet = Dictionary . FZF is a fuzzy finding command line tool. WordNet\nis a dictionary structured for developers. When married together, we can get\na snappy dictionary to help us find just the right word for any occasion.",
            "title": "FZF + WordNet = Dictionary"
        },
        {
            "location": "/blog/2017/fzf-dictionary/#install-required-program",
            "text": "Before making our new shell function, lets install the required programs.   https://github.com/junegunn/fzf  http://wordnetweb.princeton.edu/perl/webwn   These directions are for Max OSX with  homebrew  installed. If you're on\na different system, read the docs from the sites above to get the programs for\nyour operating system.  brew install fzf\nbrew cask install xquartz\nbrew install wordnet",
            "title": "Install Required Program"
        },
        {
            "location": "/blog/2017/fzf-dictionary/#fzf",
            "text": "FZF stands for Fuzzy Finder. It is a program which enables the user to filter\na set of lines from standard in and feed those line back to standard out.\nA basic example is:  find . | fzf . This presents a list of all files in the\ncurrent working directory and prompts the user for input. As you type letters, the\nlist will narrow, keeping only the items matching the search criteria. After\nselecting an entry from the list the line or lines chosen is printed to standard\nout. It provides a nifty argument  --preview  which can execute a program and\ndisplay its output as an aside in the terminal. We'll write more about FZF in the\nfuture.",
            "title": "FZF"
        },
        {
            "location": "/blog/2017/fzf-dictionary/#wordnet",
            "text": "WordNet is a large lexical database of English. Nouns, verbs, adjectives and\nadverbs are grouped into sets of cognitive synonyms (synsets), each expressing\na distinct concept. Synsets are interlinked by means of conceptual-semantic\nand lexical relations. The resulting network of meaningfully related words and\nconcepts can be navigated with the browser. WordNet is also freely and\npublicly available for download. WordNet's structure makes it a useful tool\nfor computational linguistics and natural language processing.  WordNet superficially resembles a thesaurus, in that it groups words together\nbased on their meanings. However, there are some important distinctions.\nFirst, WordNet interlinks not just word forms\u2014strings of letters\u2014but specific\nsenses of words. As a result, words that are found in close proximity to one\nanother in the network are semantically disambiguated. Second, WordNet labels\nthe semantic relations among words, whereas the groupings of words in\na thesaurus does not follow any explicit pattern other than meaning\nsimilarity.   Using WordNet we can find information similar to what is in a dictionary and\nthesaurus combined.  Example output of looking up  happy  is: % wn happy -over\n\nOverview of adj happy\n\nThe adj happy has 4 senses (first 2 from tagged texts)\n\n1. (37) happy -- (enjoying or showing or marked by joy or pleasure; \"a happy smile\"; \"spent many happy days on the beach\"; \"a happy marriage\")\n2. (2) felicitous, happy -- (marked by good fortune; \"a felicitous life\"; \"a happy outcome\")\n3. glad, happy -- (eagerly disposed to act or to be of service; \"glad to help\")\n4. happy, well-chosen -- (well expressed and to the point; \"a happy turn of phrase\"; \"a few well-chosen words\")  xquartz  is needed since the WordNet package also works in GUI mode. The GUI\napp has a useful interface and could be more intuitive to use if you don't mind\nclicking around. The GUI app can be started with  wnb , but we're not here for\nGUI stuff. Let's move on to making our terminal script.",
            "title": "WordNet"
        },
        {
            "location": "/blog/2017/fzf-dictionary/#shell-script",
            "text": "The following 3 functions can be used individually and are helpful all on their\nown. Add these directly into your shell profile or in a separate file and source\nit from the profile.  fold  is normally a built in command. By default it adds newlines when text\noverflows the terminal, but it doesn't do it in an easy to read fashion. The\ndefault behavior can break in the middle of a word and assumes a terminal width\nof 80 columns. Our  fold  function breaks at spaces and passes the whole\nterminal width to it when no other arguments are provided.  # Default `fold` to screen width and break at spaces  function  fold  { \n   if   [   $#  -eq  0   ] ;   then \n    /usr/bin/fold -w  $COLUMNS  -s\n   else \n    /usr/bin/fold  $* \n   fi  }   spell  is the FZF portion of our script. This fuzzy matches the built in Mac\ndictionary with a preview window containing the WordNet overview of the selected\nword.  # Use `fzf` against system dictionary  function  spell  { \n  cat /usr/share/dict/words  |  fzf --preview  'wn {} -over | fold'  --preview-window = up:60% }   The  dic  script uses  spell  to help find a word then outputs WordNet's\ndefinition.  # Lookup definition of word using `wn $1 -over`.  # If $1 is not provided, we'll use the `spell` command to pick a word.  #  # Requires:  #   brew install wordnet  #   brew install fzf  function  dic  { \n   if   [   $#  -eq  0   ] ;   then \n    wn  ` spell `  -over  |  fold\n   else \n    wn  $1  -over  |  fold\n   fi  }   Here's another demo of the  dic  function:",
            "title": "Shell Script"
        },
        {
            "location": "/blog/2017/fzf-dictionary/#conclusion",
            "text": "Gluing programs together with  fzf --preview  is fun. Let us know what other\nrecipes you come up with in the comments below.",
            "title": "Conclusion"
        },
        {
            "location": "/blog/2017/gnu-screen/",
            "text": "GNU Screen\n\u00b6\n\n\n\n\n\n\nScreen is a full-screen window manager that multiplexes a physical terminal\nbetween several processes, typically interactive shells.\n\n\n\n\nTL;DR - Screen keeps your ssh sessions alive on a host.\n\n\n\n\n\nInstallation\n\u00b6\n\n\nMost servers have \nscreen\n installed already. If they don't it can be installed\nvia \napt-get install screen\n, \nyum install screen\n, \nbrew install screen\n. Sorry\nWindows, try Remote Desktop.\n\n\nStartup\n\u00b6\n\n\nGet a terminal on a remote host (or local) then run \nscreen\n\n\nscreen\n\n\n\n\nIf you're not brave, try \nman screen\n to read more about.\n\n\nOnce \nscreen\n has started, you'll want to remember \n<C-a>?\n. That is how you get\nthe screen options menu. It's typed literal hold \nCTRL\n and press \na\n. To quit\nthe \nscreen\n app, type \nexit\n. To keep \nscreen\n running, type \n<C-a>d\n to detach\nfrom the program. To reattach to that session try \nscreen -x\n.\n\n\nOptions\n\u00b6\n\n\nThere are tons of options and they're best found by reading the \nman\n page or\nGoogling \ngnu screen shortcuts\n. Here's some of my favorites.\n\n\nStartup Flags\n\u00b6\n\n\n\n\nscreen -DDR\n. Force others of the current session and reattach yourself.\n\n\nscreen -x\n. Reattach yourself, but allow others to stay in. This is\n    cooperative mode. Good for pairing and much faster than GUI screen sharing.\n\n\n\n\nControl Keys\n\u00b6\n\n\n\n\n<C-a><C-c>\n. Create a \"tab\" to have multiple sessions.\n\n\n<C-a><C-a>\n. Toggle to previous session.\n\n\n<C-a><Space>\n. Switch next session.\n\n\n<C-a>a\n. Send a literal \n<C-a>\n back to shell.\n\n\n\n\nConfig File and Pretty Colors\n\u00b6\n\n\nIt's easy to get lost in screen without a status line. So creating this file in\nyour home directory will help.\n\n\n~/.screenrc\n\n\nhardstatus alwayslastline\nhardstatus string '%{= kG}[ %{G}%H %{g}][%= %{= kw}%?%-Lw%?%{r}(%{W}%n*%f%t%?(%u)%?%{r})%{w}%?%+Lw%?%?%= %{g}][%{B} %m-%d %{W}%c %{g}]'\n\n\n\nThis should give you a pretty statusline at the bottom of your terminal.\nHere's what it looks like: \n\n\n\nTMUX\n\u00b6\n\n\nA strong competitor to \nscreen\n is \ntmux\n. It has a more modern code base and is\nactively maintained. The reason I personally don't use it is out of habit and\nit's not installed everywhere. \nscreen\n just works for my work flow.\n\n\nReferences\n\u00b6\n\n\n\n\nhttps://www.gnu.org/software/screen/\n\n\nhttp://www.pixelbeat.org/lkdb/screen.html\n\n\nhttp://aperiodic.net/screen/quick_reference",
            "title": "GNU Screen"
        },
        {
            "location": "/blog/2017/gnu-screen/#gnu-screen",
            "text": "Screen is a full-screen window manager that multiplexes a physical terminal\nbetween several processes, typically interactive shells.   TL;DR - Screen keeps your ssh sessions alive on a host.",
            "title": "GNU Screen"
        },
        {
            "location": "/blog/2017/gnu-screen/#installation",
            "text": "Most servers have  screen  installed already. If they don't it can be installed\nvia  apt-get install screen ,  yum install screen ,  brew install screen . Sorry\nWindows, try Remote Desktop.",
            "title": "Installation"
        },
        {
            "location": "/blog/2017/gnu-screen/#startup",
            "text": "Get a terminal on a remote host (or local) then run  screen  screen  If you're not brave, try  man screen  to read more about.  Once  screen  has started, you'll want to remember  <C-a>? . That is how you get\nthe screen options menu. It's typed literal hold  CTRL  and press  a . To quit\nthe  screen  app, type  exit . To keep  screen  running, type  <C-a>d  to detach\nfrom the program. To reattach to that session try  screen -x .",
            "title": "Startup"
        },
        {
            "location": "/blog/2017/gnu-screen/#options",
            "text": "There are tons of options and they're best found by reading the  man  page or\nGoogling  gnu screen shortcuts . Here's some of my favorites.",
            "title": "Options"
        },
        {
            "location": "/blog/2017/gnu-screen/#startup-flags",
            "text": "screen -DDR . Force others of the current session and reattach yourself.  screen -x . Reattach yourself, but allow others to stay in. This is\n    cooperative mode. Good for pairing and much faster than GUI screen sharing.",
            "title": "Startup Flags"
        },
        {
            "location": "/blog/2017/gnu-screen/#control-keys",
            "text": "<C-a><C-c> . Create a \"tab\" to have multiple sessions.  <C-a><C-a> . Toggle to previous session.  <C-a><Space> . Switch next session.  <C-a>a . Send a literal  <C-a>  back to shell.",
            "title": "Control Keys"
        },
        {
            "location": "/blog/2017/gnu-screen/#config-file-and-pretty-colors",
            "text": "It's easy to get lost in screen without a status line. So creating this file in\nyour home directory will help.  ~/.screenrc  hardstatus alwayslastline\nhardstatus string '%{= kG}[ %{G}%H %{g}][%= %{= kw}%?%-Lw%?%{r}(%{W}%n*%f%t%?(%u)%?%{r})%{w}%?%+Lw%?%?%= %{g}][%{B} %m-%d %{W}%c %{g}]'  This should give you a pretty statusline at the bottom of your terminal.\nHere's what it looks like:",
            "title": "Config File and Pretty Colors"
        },
        {
            "location": "/blog/2017/gnu-screen/#tmux",
            "text": "A strong competitor to  screen  is  tmux . It has a more modern code base and is\nactively maintained. The reason I personally don't use it is out of habit and\nit's not installed everywhere.  screen  just works for my work flow.",
            "title": "TMUX"
        },
        {
            "location": "/blog/2017/gnu-screen/#references",
            "text": "https://www.gnu.org/software/screen/  http://www.pixelbeat.org/lkdb/screen.html  http://aperiodic.net/screen/quick_reference",
            "title": "References"
        },
        {
            "location": "/blog/2017/what-the-sql-lateral/",
            "text": "What the SQL?!? Lateral Joins\n\u00b6\n\n\n\n\nToday's \"What the SQL?!?\" features the keyword \nLATERAL\n. A prerequisite to\nunderstanding lateral joins are regular joins and subqueries. I'll explain those\nbriefly to see how \nLATERAL\n can simplify a complicated SQL query.\n\n\n\n\n\nPlease note, our target database is PostgreSQL. These examples may work with\nother databases, but might need some massaging to get them to work properly.\nSearch online for the specific vendor's documentation if errors pop up.\nTry searching for \"lateral joins {{DB VENDOR NAME}}\". Not all database vendors\nsupport the keyword \nLATERAL\n.\n\n\nA Problem to Solve\n\u00b6\n\n\nWe have a table with system uptimes. The table records a start timestamp and an\nend timestamp. If the service is still running, the end timestamp is left null\nbecause it hasn't ended. We want a query to display an overview this data.\n\n\nOur final solution will return a row per day and 24 columns containing an uptime\npercentage for each hour in the day. It will look like the following.\n\n\n  cal_date  | hour_0 | hour_1 | hour_2 | hour_3 | ... | hour_21 | hour_22 | hour_23\n------------+--------+--------+--------+--------+-----+---------+---------+---------\n 2017-03-01 |      0 |   0.75 |   0.25 |      0 | ... |       0 |       0 |       0\n 2017-03-02 |      0 |      0 |      0 |      0 | ... |       1 |       1 |       1\n(2 rows)\n\n\n\n\nPlease note we'll use \n...\n abbreviate some of the results. All queries are\nschema independent and should be copy/paste-able into any \npsql\n session.\n\n\nSample Uptime Data\n\u00b6\n\n\nThe sample uptime data is derived from a virtual table built from the following query:\n\n\nSELECT\n\n  \n*\n\n\nFROM\n \n(\n\n  \nVALUES\n\n  \n(\n'2017-03-01 01:15:00-06'\n::\ntimestamp\n,\n \n'2017-03-01 02:15:00-06'\n::\ntimestamp\n),\n\n  \n(\n'2017-03-01 08:00:00-06'\n,\n \n'2017-03-01 20:00:00-06'\n),\n\n  \n(\n'2017-03-02 19:00:00-06'\n,\n \nnull\n)\n\n\n)\n \nAS\n \nt\n(\nstart_ts\n,\n \nend_ts\n)\n\n\n\n\n\nThe data looks like:\n\n\n      start_ts       |       end_ts\n---------------------+---------------------\n 2017-03-01 01:15:00 | 2017-03-01 02:15:00\n 2017-03-01 08:00:00 | 2017-03-01 20:00:00\n 2017-03-02 19:00:00 |\n(3 rows)\n\n\n\n\nWe want to plot the time against a time sliced table representing all the\neffective hours in the uptime window. We'll make use of another virtual table to\nbuild up all the time slices:\n\n\nSELECT\n\n    \nstart_ts\n,\n\n    \nstart_ts\n \n+\n \ninterval\n \n'1 hour'\n \nAS\n \nend_ts\n\n\nFROM\n \ngenerate_series\n(\n'2017-03-01'\n::\ndate\n,\n\n                     \n'2017-03-03'\n::\ntimestamp\n \n-\n \ninterval\n \n'1 hour'\n,\n\n                     \ninterval\n \n'1 hour'\n\n                    \n)\n \nAS\n \nt\n(\nstart_ts\n)\n\n\n\n\n\nThis we make use of PostgreSQL's \ngenerate_series\n\nto return all the hours between a time range. The data looks like:\n\n\n      start_ts       |       end_ts\n---------------------+---------------------\n 2017-03-01 00:00:00 | 2017-03-01 01:00:00\n 2017-03-01 01:00:00 | 2017-03-01 02:00:00\n 2017-03-01 02:00:00 | 2017-03-01 03:00:00\n -- ... many more rows ...\n 2017-03-01 03:00:00 | 2017-03-01 04:00:00\n 2017-03-02 22:00:00 | 2017-03-02 23:00:00\n 2017-03-02 23:00:00 | 2017-03-03 00:00:00\n(48 rows)\n\n\n\n\nLeft Join\n\u00b6\n\n\nWe use a left join to glue together overlapping time ranges between these two\ndata sets. We want all the data on the \nLEFT\n side in the \nFROM\n clause to return\nregardless of an uptime record existing within its time slice.\n\n\nSELECT\n\n    \n*\n\n\nFROM\n \n(\n\n    \n-- build virtual table of all hours between\n\n    \n-- a date range\n\n    \nSELECT\n\n      \nstart_ts\n,\n\n      \nstart_ts\n \n+\n \ninterval\n \n'1 hour'\n \nAS\n \nend_ts\n\n    \nFROM\n \ngenerate_series\n(\n\n           \n'2017-03-01'\n::\ndate\n,\n\n           \n'2017-03-03'\n::\ntimestamp\n \n-\n \ninterval\n \n'1 hour'\n,\n\n           \ninterval\n \n'1 hour'\n\n    \n)\n \nAS\n \nt\n(\nstart_ts\n)\n\n\n)\n \nAS\n \ncal\n\n\nLEFT\n \nJOIN\n \n(\n\n    \n-- build virtual table of uptimes\n\n    \nSELECT\n \n*\n\n    \nFROM\n \n(\n\n      \nVALUES\n\n      \n(\n'2017-03-01 01:15:00-06'\n::\ntimestamp\n,\n \n'2017-03-01 02:15:00-06'\n::\ntimestamp\n),\n\n      \n(\n'2017-03-01 08:00:00-06'\n,\n \n'2017-03-01 20:00:00-06'\n),\n\n      \n(\n'2017-03-02 19:00:00-06'\n,\n \nnull\n)\n\n    \n)\n \nAS\n \nt\n(\nstart_ts\n,\n \nend_ts\n)\n\n\n)\n \nAS\n \nuptime\n \nON\n \ncal\n.\nend_ts\n \n>\n \nuptime\n.\nstart_ts\n \nAND\n \ncal\n.\nstart_ts\n \n<=\n \ncoalesce\n(\nuptime\n.\nend_ts\n,\n \ncurrent_timestamp\n)\n\n\n\n\n\nThe result set shows we have some variety in our sample data. With 3 slices\nup time and 3 slices of downtime.\n\n\n      start_ts       |       end_ts        |      start_ts       |       end_ts\n---------------------+---------------------+---------------------+---------------------\n 2017-03-01 00:00:00 | 2017-03-01 01:00:00 |                     |\n 2017-03-01 01:00:00 | 2017-03-01 02:00:00 | 2017-03-01 01:15:00 | 2017-03-01 02:15:00\n 2017-03-01 02:00:00 | 2017-03-01 03:00:00 | 2017-03-01 01:15:00 | 2017-03-01 02:15:00\n 2017-03-01 03:00:00 | 2017-03-01 04:00:00 |                     |\n ...\n 2017-03-01 07:00:00 | 2017-03-01 08:00:00 |                     |\n 2017-03-01 08:00:00 | 2017-03-01 09:00:00 | 2017-03-01 08:00:00 | 2017-03-01 20:00:00\n ...\n 2017-03-01 20:00:00 | 2017-03-01 21:00:00 | 2017-03-01 08:00:00 | 2017-03-01 20:00:00\n 2017-03-01 21:00:00 | 2017-03-01 22:00:00 |                     |\n ...\n 2017-03-02 18:00:00 | 2017-03-02 19:00:00 |                     |\n 2017-03-02 19:00:00 | 2017-03-02 20:00:00 | 2017-03-02 19:00:00 |\n ...\n 2017-03-02 23:00:00 | 2017-03-03 00:00:00 | 2017-03-02 19:00:00 |\n(48 rows)\n\n\n\n\nIf we try without the \nLEFT\n clause, we'll only see 20 rows containing the up slices.\n\n\nTime to compute some timing\n\u00b6\n\n\nLet's add some times and sensible column names and replace the \n*\n\n\nSELECT\n\n    \n-- will use `first_ts` and `last_ts` to calculate uptime duration\n\n    \nCASE\n \nWHEN\n \nuptime\n.\nstart_ts\n \nIS\n \nNOT\n \nNULL\n \nTHEN\n\n        \ngreatest\n(\nuptime\n.\nstart_ts\n,\n \ncal\n.\nstart_ts\n)\n\n    \nEND\n                                               \nAS\n \nfirst_ts\n,\n\n    \nleast\n(\ncal\n.\nend_ts\n,\n \nuptime\n.\nend_ts\n)\n                  \nAS\n \nlast_ts\n,\n\n    \ndate_trunc\n(\n'day'\n,\n \ncal\n.\nstart_ts\n)::\ndate\n             \nAS\n \ncal_date\n,\n\n    \nextract\n(\nhour\n \nfrom\n \ncal\n.\nstart_ts\n)\n                   \nAS\n \ncal_hour\n,\n\n    \nextract\n(\nepoch\n \nfrom\n \nage\n(\ncal\n.\nend_ts\n,\n \ncal\n.\nstart_ts\n))\n \nAS\n \ncal_seconds\n\n\nFROM\n \n(\n\n    \n-- build virtual table of all hours between\n\n    \n-- a date range\n\n    \nSELECT\n\n        \nstart_ts\n,\n\n        \nstart_ts\n \n+\n \ninterval\n \n'1 hour'\n \nAS\n \nend_ts\n\n        \nFROM\n \ngenerate_series\n(\n'2017-03-01'\n::\ndate\n,\n\n                             \n'2017-03-03'\n::\ntimestamp\n \n-\n \ninterval\n \n'1 hour'\n,\n\n                             \ninterval\n \n'1 hour'\n\n        \n)\n \nAS\n \nt\n(\nstart_ts\n)\n\n    \n)\n \nAS\n \ncal\n\n\nLEFT\n \nJOIN\n \n(\n\n    \n-- build virtual table of uptimes\n\n    \nSELECT\n \n*\n\n    \nFROM\n \n(\n\n        \nVALUES\n\n        \n(\n'2017-03-01 01:15:00-06'\n::\ntimestamp\n,\n \n'2017-03-01 02:15:00-06'\n::\ntimestamp\n),\n\n        \n(\n'2017-03-01 08:00:00-06'\n,\n \n'2017-03-01 20:00:00-06'\n),\n\n        \n(\n'2017-03-02 19:00:00-06'\n,\n \nnull\n)\n\n    \n)\n \nAS\n \nt\n(\nstart_ts\n,\n \nend_ts\n)\n\n\n)\n \nAS\n \nuptime\n \nON\n \ncal\n.\nend_ts\n \n>\n \nuptime\n.\nstart_ts\n \nAND\n \ncal\n.\nstart_ts\n \n<=\n \ncoalesce\n(\nuptime\n.\nend_ts\n,\n \ncurrent_timestamp\n)\n\n\n\n\n\n      first_ts       |       last_ts       |  cal_date  | cal_hour | cal_seconds\n---------------------+---------------------+------------+----------+-------------\n                     | 2017-03-01 01:00:00 | 2017-03-01 |        0 |        3600\n 2017-03-01 01:15:00 | 2017-03-01 02:00:00 | 2017-03-01 |        1 |        3600\n 2017-03-01 02:00:00 | 2017-03-01 02:15:00 | 2017-03-01 |        2 |        3600\n                     | 2017-03-01 04:00:00 | 2017-03-01 |        3 |        3600\n                     | 2017-03-01 05:00:00 | 2017-03-01 |        4 |        3600\n                     | 2017-03-01 06:00:00 | 2017-03-01 |        5 |        3600\n                     | 2017-03-01 07:00:00 | 2017-03-01 |        6 |        3600\n                     | 2017-03-01 08:00:00 | 2017-03-01 |        7 |        3600\n 2017-03-01 08:00:00 | 2017-03-01 09:00:00 | 2017-03-01 |        8 |        3600\n ...\n 2017-03-01 20:00:00 | 2017-03-01 20:00:00 | 2017-03-01 |       20 |        3600\n                     | 2017-03-01 22:00:00 | 2017-03-01 |       21 |        3600\n ... \n                     | 2017-03-02 19:00:00 | 2017-03-02 |       18 |        3600\n 2017-03-02 19:00:00 | 2017-03-02 20:00:00 | 2017-03-02 |       19 |        3600\n ...\n 2017-03-02 23:00:00 | 2017-03-03 00:00:00 | 2017-03-02 |       23 |        3600\n(48 rows)\n\n\n\n\nSubquery, Subquery, What's the Worry?\n\u00b6\n\n\nSQL is all about nested subqueries. It's hard to escape without creating\nviews, but who has time to lookup that \nsyntax\n\n\nand\n get their \nDBA's\n permission to run the DDL?!?\n\n\nLet's add some duration times to the result set. We'll use the traditional sub\nquery for it.\n\n\nSELECT\n\n    \n-- calculate uptime seconds\n\n    \ncoalesce\n(\n\n      \nextract\n(\nepoch\n \nFROM\n \nage\n(\nlast_ts\n,\n \nfirst_ts\n)),\n\n      \n0\n\n    \n)\n \nAS\n \nup_seconds\n,\n\n    \n*\n\n\nFROM\n \n(\n\n    \nSELECT\n\n        \n-- will use `first_ts` and `last_ts` to calculate uptime duration\n\n        \nCASE\n \nWHEN\n \nuptime\n.\nstart_ts\n \nIS\n \nNOT\n \nNULL\n \nTHEN\n\n            \ngreatest\n(\nuptime\n.\nstart_ts\n,\n \ncal\n.\nstart_ts\n)\n\n        \nEND\n                                               \nAS\n \nfirst_ts\n,\n\n        \nleast\n(\ncal\n.\nend_ts\n,\n \nuptime\n.\nend_ts\n)\n                  \nAS\n \nlast_ts\n,\n\n        \ndate_trunc\n(\n'day'\n,\n \ncal\n.\nstart_ts\n)::\ndate\n             \nAS\n \ncal_date\n,\n\n        \nextract\n(\nhour\n \nfrom\n \ncal\n.\nstart_ts\n)\n                   \nAS\n \ncal_hour\n,\n\n        \nextract\n(\nepoch\n \nfrom\n \nage\n(\ncal\n.\nend_ts\n,\n \ncal\n.\nstart_ts\n))\n \nAS\n \ncal_seconds\n\n    \nFROM\n \n(\n\n        \n-- build virtual table of all hours between\n\n        \n-- a date range\n\n        \nSELECT\n\n            \nstart_ts\n,\n\n            \nstart_ts\n \n+\n \ninterval\n \n'1 hour'\n \nAS\n \nend_ts\n\n            \nFROM\n \ngenerate_series\n(\n'2017-03-01'\n::\ndate\n,\n\n                                 \n'2017-03-03'\n::\ntimestamp\n \n-\n \ninterval\n \n'1 hour'\n,\n\n                                 \ninterval\n \n'1 hour'\n\n            \n)\n \nAS\n \nt\n(\nstart_ts\n)\n\n    \n)\n \nAS\n \ncal\n\n    \nLEFT\n \nJOIN\n \n(\n\n        \n-- build virtual table of uptimes\n\n        \nSELECT\n \n*\n\n        \nFROM\n \n(\n\n            \nVALUES\n\n            \n(\n'2017-03-01 01:15:00-06'\n::\ntimestamp\n,\n \n'2017-03-01 02:15:00-06'\n::\ntimestamp\n),\n\n            \n(\n'2017-03-01 08:00:00-06'\n,\n \n'2017-03-01 20:00:00-06'\n),\n\n            \n(\n'2017-03-02 19:00:00-06'\n,\n \nnull\n)\n\n        \n)\n \nAS\n \nt\n(\nstart_ts\n,\n \nend_ts\n)\n\n    \n)\n \nAS\n \nuptime\n \nON\n \ncal\n.\nend_ts\n \n>\n \nuptime\n.\nstart_ts\n \nAND\n \ncal\n.\nstart_ts\n \n<=\n \ncoalesce\n(\nuptime\n.\nend_ts\n,\n \ncurrent_timestamp\n)\n\n\n)\n \nt1\n\n\n\n\n\n up_seconds\n------------\n          0\n       2700\n        900\n          0\n          0\n...\n       3600\n(48 rows)\n\n\n\n\nWithout the subquery we'd be getting into even more nested function calls and\nwould have to double compute values or have no visibility in the intermediate\nsteps. We could have calculated \nup_seconds\n directly in the first query which\nintroduced \nfirst_ts\n and \nlast_ts\n. That would look like this:\n\n\nSELECT\n\n    \ncoalesce\n(\n\n        \nextract\n(\nepoch\n \nFROM\n\n            \nage\n(\n\n                \nleast\n(\ncal\n.\nend_ts\n,\n \nuptime\n.\nend_ts\n),\n \n                \nCASE\n \nWHEN\n \nuptime\n.\nstart_ts\n \nIS\n \nNOT\n \nNULL\n \nTHEN\n\n                  \ngreatest\n(\nuptime\n.\nstart_ts\n,\n \ncal\n.\nstart_ts\n)\n\n                \nEND\n\n            \n)\n\n        \n),\n\n        \n0\n\n    \n)\n \nAS\n \nup_seconds\n\n\nFROM\n \n--- ...\n\n\n\n\n\nIt's not for the weak stomach, but frankly speaking, neither is the subquery...\n\n\nEnough Nesting, \nLATERAL\n join save me!\n\u00b6\n\n\nLateral joins can give us the best of both worlds: reduced subquery nesting and\ntraceable computed values. We're going to move the initial computed values like\n\nfirst_ts\n and \nlast_ts\n, move them to a virtual table then \nJOIN LATERAL\n so\nthey can get their own table alias. We'll do it again for \nup_seconds\n and use\n\nfirst_ts\n and \nlast_ts\n from its sibling table.\n\n\nSELECT\n\n    \nt2\n.\nup_seconds\n\n\nFROM\n \n(\n\n    \n-- build virtual table of all hours between\n\n    \n-- a date range\n\n    \nSELECT\n\n        \nstart_ts\n,\n\n        \nstart_ts\n \n+\n \ninterval\n \n'1 hour'\n \nAS\n \nend_ts\n\n        \nFROM\n \ngenerate_series\n(\n'2017-03-01'\n::\ndate\n,\n\n                             \n'2017-03-03'\n::\ntimestamp\n \n-\n \ninterval\n \n'1 hour'\n,\n\n                             \ninterval\n \n'1 hour'\n\n        \n)\n \nAS\n \nt\n(\nstart_ts\n)\n\n    \n)\n \nAS\n \ncal\n\n\nLEFT\n \nJOIN\n \n(\n\n    \n-- build virtual table of uptimes\n\n    \nSELECT\n \n*\n\n    \nFROM\n \n(\n\n        \nVALUES\n\n        \n(\n'2017-03-01 01:15:00-06'\n::\ntimestamp\n,\n \n'2017-03-01 02:15:00-06'\n::\ntimestamp\n),\n\n        \n(\n'2017-03-01 08:00:00-06'\n,\n \n'2017-03-01 20:00:00-06'\n),\n\n        \n(\n'2017-03-02 19:00:00-06'\n,\n \nnull\n)\n\n    \n)\n \nAS\n \nt\n(\nstart_ts\n,\n \nend_ts\n)\n\n\n)\n \nAS\n \nuptime\n \nON\n \ncal\n.\nend_ts\n \n>\n \nuptime\n.\nstart_ts\n \nAND\n \ncal\n.\nstart_ts\n \n<=\n \ncoalesce\n(\nuptime\n.\nend_ts\n,\n \ncurrent_timestamp\n)\n\n\nJOIN\n \nLATERAL\n \n(\n\n  \nSELECT\n\n      \n-- will use `first_ts` and `last_ts` to calculate uptime duration\n\n    \nCASE\n \nWHEN\n \nuptime\n.\nstart_ts\n \nIS\n \nNOT\n \nNULL\n \nTHEN\n\n        \ngreatest\n(\nuptime\n.\nstart_ts\n,\n \ncal\n.\nstart_ts\n)\n\n    \nEND\n                                               \nAS\n \nfirst_ts\n,\n\n    \nleast\n(\ncal\n.\nend_ts\n,\n \nuptime\n.\nend_ts\n)\n                  \nAS\n \nlast_ts\n,\n\n    \ndate_trunc\n(\n'day'\n,\n \ncal\n.\nstart_ts\n)::\ndate\n             \nAS\n \ncal_date\n,\n\n    \nextract\n(\nhour\n \nfrom\n \ncal\n.\nstart_ts\n)\n                   \nAS\n \ncal_hour\n,\n\n    \nextract\n(\nepoch\n \nfrom\n \nage\n(\ncal\n.\nend_ts\n,\n \ncal\n.\nstart_ts\n))\n \nAS\n \ncal_seconds\n\n\n)\n \nt1\n \nON\n \ntrue\n\n\nJOIN\n \nLATERAL\n \n(\n\n  \n-- calculate uptime seconds for the time slice\n\n  \nSELECT\n\n    \ncoalesce\n(\n\n        \nextract\n(\nepoch\n \nFROM\n \nage\n(\nlast_ts\n,\n \nfirst_ts\n)),\n\n        \n0\n\n    \n)\n \nAS\n \nup_seconds\n\n\n)\n \nt2\n \nON\n \ntrue\n\n\n\n\n\nThis gives us the same results but without the deep nesting.\n\n\n up_seconds\n------------\n          0\n       2700\n        900\n          0\n          0\n       3600\n...\n       3600\n(48 rows)\n\n\n\n\nWhat's great about this strategy is we can quickly choose which columns to see\nas we build up the query.\n\n\nSELECT\n\n  \nt2\n.\nup_seconds\n\n  \n...\n\n\n\n-- or --\n\n\n\nSELECT\n\n  \nt2\n.\n*\n,\n\n  \nt1\n.\n*\n\n\n\n\n\nLet's build up the final calculation using the same strategy:\n\n\nSELECT\n\n  \nt2\n.\n*\n,\n\n  \nt3\n.\n*\n\n\nFROM\n \n...\n\n\nJOIN\n \nLATERAL\n \n(\n\n  \n-- calculate percentage between uptime seconds and available seconds\n\n  \n-- within the time slice\n\n  \nSELECT\n\n    \nup_seconds\n \n/\n \ncal_seconds\n \nAS\n \nup_pct\n\n\n)\n \nt3\n \nON\n \ntrue\n\n\n\n\n\n up_seconds | up_pct\n------------+--------\n          0 |      0\n       2700 |   0.75\n        900 |   0.25\n          0 |      0\n...\n       3600 |      1\n(48 rows)\n\n\n\n\nPlot the Hours\n\u00b6\n\n\nNow we have all the computed data we need. Let's plot it as a cross tab (but not\nactually use \ncrosstab\n)\n\n\nWe'll need to consolidate the long list of data by \ncal_date\n and pivot the\n\ncal_hour\n as a column and \nup_pct\n as a value. In case of overlapping uptimes\nwe'll be pessimists and choose the lowest or \nmin\n uptime percentage.\n\n\nThe final query looks like:\n\n\nSELECT\n\n    \ncal_date\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n0\n \nTHEN\n \nup_pct\n  \nEND\n)\n \nAS\n \nhour_0\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n1\n \nTHEN\n \nup_pct\n  \nEND\n)\n \nAS\n \nhour_1\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n2\n \nTHEN\n \nup_pct\n  \nEND\n)\n \nAS\n \nhour_2\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n3\n \nTHEN\n \nup_pct\n  \nEND\n)\n \nAS\n \nhour_3\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n4\n \nTHEN\n \nup_pct\n  \nEND\n)\n \nAS\n \nhour_4\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n5\n \nTHEN\n \nup_pct\n  \nEND\n)\n \nAS\n \nhour_5\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n6\n \nTHEN\n \nup_pct\n  \nEND\n)\n \nAS\n \nhour_6\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n7\n \nTHEN\n \nup_pct\n  \nEND\n)\n \nAS\n \nhour_7\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n8\n \nTHEN\n \nup_pct\n  \nEND\n)\n \nAS\n \nhour_8\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n9\n \nTHEN\n \nup_pct\n  \nEND\n)\n \nAS\n \nhour_9\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n10\n \nTHEN\n \nup_pct\n \nEND\n)\n \nAS\n \nhour_10\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n11\n \nTHEN\n \nup_pct\n \nEND\n)\n \nAS\n \nhour_11\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n12\n \nTHEN\n \nup_pct\n \nEND\n)\n \nAS\n \nhour_12\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n13\n \nTHEN\n \nup_pct\n \nEND\n)\n \nAS\n \nhour_13\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n14\n \nTHEN\n \nup_pct\n \nEND\n)\n \nAS\n \nhour_14\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n15\n \nTHEN\n \nup_pct\n \nEND\n)\n \nAS\n \nhour_15\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n16\n \nTHEN\n \nup_pct\n \nEND\n)\n \nAS\n \nhour_16\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n17\n \nTHEN\n \nup_pct\n \nEND\n)\n \nAS\n \nhour_17\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n18\n \nTHEN\n \nup_pct\n \nEND\n)\n \nAS\n \nhour_18\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n19\n \nTHEN\n \nup_pct\n \nEND\n)\n \nAS\n \nhour_19\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n20\n \nTHEN\n \nup_pct\n \nEND\n)\n \nAS\n \nhour_20\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n21\n \nTHEN\n \nup_pct\n \nEND\n)\n \nAS\n \nhour_21\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n22\n \nTHEN\n \nup_pct\n \nEND\n)\n \nAS\n \nhour_22\n,\n\n    \nmax\n(\nCASE\n \nWHEN\n \ncal_hour\n \n=\n \n23\n \nTHEN\n \nup_pct\n \nEND\n)\n \nAS\n \nhour_23\n\n\nFROM\n \n(\n\n    \n-- build virtual table of all hours between\n\n    \n-- a date range\n\n    \nSELECT\n\n        \nstart_ts\n,\n\n        \nstart_ts\n \n+\n \ninterval\n \n'1 hour'\n \nAS\n \nend_ts\n\n        \nFROM\n \ngenerate_series\n(\n'2017-03-01'\n::\ndate\n,\n\n                             \n'2017-03-03'\n::\ntimestamp\n \n-\n \ninterval\n \n'1 hour'\n,\n\n                             \ninterval\n \n'1 hour'\n\n        \n)\n \nAS\n \nt\n(\nstart_ts\n)\n\n    \n)\n \nAS\n \ncal\n\n\nLEFT\n \nJOIN\n \n(\n\n    \n-- build virtual table of uptimes\n\n    \nSELECT\n \n*\n\n    \nFROM\n \n(\n\n        \nVALUES\n\n        \n(\n'2017-03-01 01:15:00-06'\n::\ntimestamp\n,\n \n'2017-03-01 02:15:00-06'\n::\ntimestamp\n),\n\n        \n(\n'2017-03-01 08:00:00-06'\n,\n \n'2017-03-01 20:00:00-06'\n),\n\n        \n(\n'2017-03-02 19:00:00-06'\n,\n \nnull\n)\n\n    \n)\n \nAS\n \nt\n(\nstart_ts\n,\n \nend_ts\n)\n\n\n)\n \nAS\n \nuptime\n \nON\n \ncal\n.\nend_ts\n \n>\n \nuptime\n.\nstart_ts\n \nAND\n \ncal\n.\nstart_ts\n \n<=\n \ncoalesce\n(\nuptime\n.\nend_ts\n,\n \ncurrent_timestamp\n)\n\n\nJOIN\n \nLATERAL\n \n(\n\n  \nSELECT\n\n      \n-- will use `first_ts` and `last_ts` to calculate uptime duration\n\n    \nCASE\n \nWHEN\n \nuptime\n.\nstart_ts\n \nIS\n \nNOT\n \nNULL\n \nTHEN\n\n        \ngreatest\n(\nuptime\n.\nstart_ts\n,\n \ncal\n.\nstart_ts\n)\n\n    \nEND\n                                               \nAS\n \nfirst_ts\n,\n\n    \nleast\n(\ncal\n.\nend_ts\n,\n \nuptime\n.\nend_ts\n)\n                  \nAS\n \nlast_ts\n,\n\n    \ndate_trunc\n(\n'day'\n,\n \ncal\n.\nstart_ts\n)::\ndate\n             \nAS\n \ncal_date\n,\n\n    \nextract\n(\nhour\n \nfrom\n \ncal\n.\nstart_ts\n)\n                   \nAS\n \ncal_hour\n,\n\n    \nextract\n(\nepoch\n \nfrom\n \nage\n(\ncal\n.\nend_ts\n,\n \ncal\n.\nstart_ts\n))\n \nAS\n \ncal_seconds\n\n\n)\n \nt1\n \nON\n \ntrue\n\n\nJOIN\n \nLATERAL\n \n(\n\n  \nSELECT\n\n    \ncoalesce\n(\n\n        \nextract\n(\nepoch\n \nFROM\n \nage\n(\nlast_ts\n,\n \nfirst_ts\n)),\n\n        \n0\n\n    \n)\n \nAS\n \nup_seconds\n\n\n)\n \nt2\n \nON\n \ntrue\n\n\nJOIN\n \nLATERAL\n \n(\n\n  \n-- calculate percentage between uptime seconds and available seconds\n\n  \n-- within the time slice\n\n  \nSELECT\n\n  \nup_seconds\n \n/\n \ncal_seconds\n \nAS\n \nup_pct\n\n\n)\n \nt3\n \nON\n \ntrue\n\n\nGROUP\n \nBY\n \ncal_date\n\n\n\n\n\n  cal_date  | hour_0 | hour_1 | hour_2 | hour_3 | ... | hour_23\n------------+--------+--------+--------+--------+ ... +---------\n 2017-03-01 |      0 |   0.75 |   0.25 |      0 | ... |       0\n 2017-03-02 |      0 |      0 |      0 |      0 | ... |       1\n(2 rows)\n\n\n\n\nMore than CTE and Cross Join\n\u00b6\n\n\nThis example only scratches the surface of \nLATERAL\ns super powers. On the\nsurface \nLATERAL\n can do things \nCTE\n, cross join, and \nWINDOW\n can do.\nPostgreSQL describe \nLATERAL\n as:\n\n\n\n\nSubqueries appearing in FROM can be preceded by the key word LATERAL.\nThis allows them to reference columns provided by preceding FROM items.\n(Without LATERAL, each subquery is evaluated independently and so cannot\ncross-reference any other FROM item.)\n\n\n\n\nTL;DR - \nLATERAL\n allows subqueries to reference earlier tables.\n\n\nReferences\n\u00b6\n\n\n\n\nPostgres Lateral Joins",
            "title": "What the SQL?!? Lateral Joins"
        },
        {
            "location": "/blog/2017/what-the-sql-lateral/#what-the-sql-lateral-joins",
            "text": "Today's \"What the SQL?!?\" features the keyword  LATERAL . A prerequisite to\nunderstanding lateral joins are regular joins and subqueries. I'll explain those\nbriefly to see how  LATERAL  can simplify a complicated SQL query.   Please note, our target database is PostgreSQL. These examples may work with\nother databases, but might need some massaging to get them to work properly.\nSearch online for the specific vendor's documentation if errors pop up.\nTry searching for \"lateral joins {{DB VENDOR NAME}}\". Not all database vendors\nsupport the keyword  LATERAL .",
            "title": "What the SQL?!? Lateral Joins"
        },
        {
            "location": "/blog/2017/what-the-sql-lateral/#a-problem-to-solve",
            "text": "We have a table with system uptimes. The table records a start timestamp and an\nend timestamp. If the service is still running, the end timestamp is left null\nbecause it hasn't ended. We want a query to display an overview this data.  Our final solution will return a row per day and 24 columns containing an uptime\npercentage for each hour in the day. It will look like the following.    cal_date  | hour_0 | hour_1 | hour_2 | hour_3 | ... | hour_21 | hour_22 | hour_23\n------------+--------+--------+--------+--------+-----+---------+---------+---------\n 2017-03-01 |      0 |   0.75 |   0.25 |      0 | ... |       0 |       0 |       0\n 2017-03-02 |      0 |      0 |      0 |      0 | ... |       1 |       1 |       1\n(2 rows)  Please note we'll use  ...  abbreviate some of the results. All queries are\nschema independent and should be copy/paste-able into any  psql  session.",
            "title": "A Problem to Solve"
        },
        {
            "location": "/blog/2017/what-the-sql-lateral/#sample-uptime-data",
            "text": "The sample uptime data is derived from a virtual table built from the following query:  SELECT \n   *  FROM   ( \n   VALUES \n   ( '2017-03-01 01:15:00-06' :: timestamp ,   '2017-03-01 02:15:00-06' :: timestamp ), \n   ( '2017-03-01 08:00:00-06' ,   '2017-03-01 20:00:00-06' ), \n   ( '2017-03-02 19:00:00-06' ,   null )  )   AS   t ( start_ts ,   end_ts )   The data looks like:        start_ts       |       end_ts\n---------------------+---------------------\n 2017-03-01 01:15:00 | 2017-03-01 02:15:00\n 2017-03-01 08:00:00 | 2017-03-01 20:00:00\n 2017-03-02 19:00:00 |\n(3 rows)  We want to plot the time against a time sliced table representing all the\neffective hours in the uptime window. We'll make use of another virtual table to\nbuild up all the time slices:  SELECT \n     start_ts , \n     start_ts   +   interval   '1 hour'   AS   end_ts  FROM   generate_series ( '2017-03-01' :: date , \n                      '2017-03-03' :: timestamp   -   interval   '1 hour' , \n                      interval   '1 hour' \n                     )   AS   t ( start_ts )   This we make use of PostgreSQL's  generate_series \nto return all the hours between a time range. The data looks like:        start_ts       |       end_ts\n---------------------+---------------------\n 2017-03-01 00:00:00 | 2017-03-01 01:00:00\n 2017-03-01 01:00:00 | 2017-03-01 02:00:00\n 2017-03-01 02:00:00 | 2017-03-01 03:00:00\n -- ... many more rows ...\n 2017-03-01 03:00:00 | 2017-03-01 04:00:00\n 2017-03-02 22:00:00 | 2017-03-02 23:00:00\n 2017-03-02 23:00:00 | 2017-03-03 00:00:00\n(48 rows)",
            "title": "Sample Uptime Data"
        },
        {
            "location": "/blog/2017/what-the-sql-lateral/#left-join",
            "text": "We use a left join to glue together overlapping time ranges between these two\ndata sets. We want all the data on the  LEFT  side in the  FROM  clause to return\nregardless of an uptime record existing within its time slice.  SELECT \n     *  FROM   ( \n     -- build virtual table of all hours between \n     -- a date range \n     SELECT \n       start_ts , \n       start_ts   +   interval   '1 hour'   AS   end_ts \n     FROM   generate_series ( \n            '2017-03-01' :: date , \n            '2017-03-03' :: timestamp   -   interval   '1 hour' , \n            interval   '1 hour' \n     )   AS   t ( start_ts )  )   AS   cal  LEFT   JOIN   ( \n     -- build virtual table of uptimes \n     SELECT   * \n     FROM   ( \n       VALUES \n       ( '2017-03-01 01:15:00-06' :: timestamp ,   '2017-03-01 02:15:00-06' :: timestamp ), \n       ( '2017-03-01 08:00:00-06' ,   '2017-03-01 20:00:00-06' ), \n       ( '2017-03-02 19:00:00-06' ,   null ) \n     )   AS   t ( start_ts ,   end_ts )  )   AS   uptime   ON   cal . end_ts   >   uptime . start_ts   AND   cal . start_ts   <=   coalesce ( uptime . end_ts ,   current_timestamp )   The result set shows we have some variety in our sample data. With 3 slices\nup time and 3 slices of downtime.        start_ts       |       end_ts        |      start_ts       |       end_ts\n---------------------+---------------------+---------------------+---------------------\n 2017-03-01 00:00:00 | 2017-03-01 01:00:00 |                     |\n 2017-03-01 01:00:00 | 2017-03-01 02:00:00 | 2017-03-01 01:15:00 | 2017-03-01 02:15:00\n 2017-03-01 02:00:00 | 2017-03-01 03:00:00 | 2017-03-01 01:15:00 | 2017-03-01 02:15:00\n 2017-03-01 03:00:00 | 2017-03-01 04:00:00 |                     |\n ...\n 2017-03-01 07:00:00 | 2017-03-01 08:00:00 |                     |\n 2017-03-01 08:00:00 | 2017-03-01 09:00:00 | 2017-03-01 08:00:00 | 2017-03-01 20:00:00\n ...\n 2017-03-01 20:00:00 | 2017-03-01 21:00:00 | 2017-03-01 08:00:00 | 2017-03-01 20:00:00\n 2017-03-01 21:00:00 | 2017-03-01 22:00:00 |                     |\n ...\n 2017-03-02 18:00:00 | 2017-03-02 19:00:00 |                     |\n 2017-03-02 19:00:00 | 2017-03-02 20:00:00 | 2017-03-02 19:00:00 |\n ...\n 2017-03-02 23:00:00 | 2017-03-03 00:00:00 | 2017-03-02 19:00:00 |\n(48 rows)  If we try without the  LEFT  clause, we'll only see 20 rows containing the up slices.",
            "title": "Left Join"
        },
        {
            "location": "/blog/2017/what-the-sql-lateral/#time-to-compute-some-timing",
            "text": "Let's add some times and sensible column names and replace the  *  SELECT \n     -- will use `first_ts` and `last_ts` to calculate uptime duration \n     CASE   WHEN   uptime . start_ts   IS   NOT   NULL   THEN \n         greatest ( uptime . start_ts ,   cal . start_ts ) \n     END                                                 AS   first_ts , \n     least ( cal . end_ts ,   uptime . end_ts )                    AS   last_ts , \n     date_trunc ( 'day' ,   cal . start_ts ):: date               AS   cal_date , \n     extract ( hour   from   cal . start_ts )                     AS   cal_hour , \n     extract ( epoch   from   age ( cal . end_ts ,   cal . start_ts ))   AS   cal_seconds  FROM   ( \n     -- build virtual table of all hours between \n     -- a date range \n     SELECT \n         start_ts , \n         start_ts   +   interval   '1 hour'   AS   end_ts \n         FROM   generate_series ( '2017-03-01' :: date , \n                              '2017-03-03' :: timestamp   -   interval   '1 hour' , \n                              interval   '1 hour' \n         )   AS   t ( start_ts ) \n     )   AS   cal  LEFT   JOIN   ( \n     -- build virtual table of uptimes \n     SELECT   * \n     FROM   ( \n         VALUES \n         ( '2017-03-01 01:15:00-06' :: timestamp ,   '2017-03-01 02:15:00-06' :: timestamp ), \n         ( '2017-03-01 08:00:00-06' ,   '2017-03-01 20:00:00-06' ), \n         ( '2017-03-02 19:00:00-06' ,   null ) \n     )   AS   t ( start_ts ,   end_ts )  )   AS   uptime   ON   cal . end_ts   >   uptime . start_ts   AND   cal . start_ts   <=   coalesce ( uptime . end_ts ,   current_timestamp )         first_ts       |       last_ts       |  cal_date  | cal_hour | cal_seconds\n---------------------+---------------------+------------+----------+-------------\n                     | 2017-03-01 01:00:00 | 2017-03-01 |        0 |        3600\n 2017-03-01 01:15:00 | 2017-03-01 02:00:00 | 2017-03-01 |        1 |        3600\n 2017-03-01 02:00:00 | 2017-03-01 02:15:00 | 2017-03-01 |        2 |        3600\n                     | 2017-03-01 04:00:00 | 2017-03-01 |        3 |        3600\n                     | 2017-03-01 05:00:00 | 2017-03-01 |        4 |        3600\n                     | 2017-03-01 06:00:00 | 2017-03-01 |        5 |        3600\n                     | 2017-03-01 07:00:00 | 2017-03-01 |        6 |        3600\n                     | 2017-03-01 08:00:00 | 2017-03-01 |        7 |        3600\n 2017-03-01 08:00:00 | 2017-03-01 09:00:00 | 2017-03-01 |        8 |        3600\n ...\n 2017-03-01 20:00:00 | 2017-03-01 20:00:00 | 2017-03-01 |       20 |        3600\n                     | 2017-03-01 22:00:00 | 2017-03-01 |       21 |        3600\n ... \n                     | 2017-03-02 19:00:00 | 2017-03-02 |       18 |        3600\n 2017-03-02 19:00:00 | 2017-03-02 20:00:00 | 2017-03-02 |       19 |        3600\n ...\n 2017-03-02 23:00:00 | 2017-03-03 00:00:00 | 2017-03-02 |       23 |        3600\n(48 rows)",
            "title": "Time to compute some timing"
        },
        {
            "location": "/blog/2017/what-the-sql-lateral/#subquery-subquery-whats-the-worry",
            "text": "SQL is all about nested subqueries. It's hard to escape without creating\nviews, but who has time to lookup that  syntax  and  get their  DBA's  permission to run the DDL?!?  Let's add some duration times to the result set. We'll use the traditional sub\nquery for it.  SELECT \n     -- calculate uptime seconds \n     coalesce ( \n       extract ( epoch   FROM   age ( last_ts ,   first_ts )), \n       0 \n     )   AS   up_seconds , \n     *  FROM   ( \n     SELECT \n         -- will use `first_ts` and `last_ts` to calculate uptime duration \n         CASE   WHEN   uptime . start_ts   IS   NOT   NULL   THEN \n             greatest ( uptime . start_ts ,   cal . start_ts ) \n         END                                                 AS   first_ts , \n         least ( cal . end_ts ,   uptime . end_ts )                    AS   last_ts , \n         date_trunc ( 'day' ,   cal . start_ts ):: date               AS   cal_date , \n         extract ( hour   from   cal . start_ts )                     AS   cal_hour , \n         extract ( epoch   from   age ( cal . end_ts ,   cal . start_ts ))   AS   cal_seconds \n     FROM   ( \n         -- build virtual table of all hours between \n         -- a date range \n         SELECT \n             start_ts , \n             start_ts   +   interval   '1 hour'   AS   end_ts \n             FROM   generate_series ( '2017-03-01' :: date , \n                                  '2017-03-03' :: timestamp   -   interval   '1 hour' , \n                                  interval   '1 hour' \n             )   AS   t ( start_ts ) \n     )   AS   cal \n     LEFT   JOIN   ( \n         -- build virtual table of uptimes \n         SELECT   * \n         FROM   ( \n             VALUES \n             ( '2017-03-01 01:15:00-06' :: timestamp ,   '2017-03-01 02:15:00-06' :: timestamp ), \n             ( '2017-03-01 08:00:00-06' ,   '2017-03-01 20:00:00-06' ), \n             ( '2017-03-02 19:00:00-06' ,   null ) \n         )   AS   t ( start_ts ,   end_ts ) \n     )   AS   uptime   ON   cal . end_ts   >   uptime . start_ts   AND   cal . start_ts   <=   coalesce ( uptime . end_ts ,   current_timestamp )  )   t1    up_seconds\n------------\n          0\n       2700\n        900\n          0\n          0\n...\n       3600\n(48 rows)  Without the subquery we'd be getting into even more nested function calls and\nwould have to double compute values or have no visibility in the intermediate\nsteps. We could have calculated  up_seconds  directly in the first query which\nintroduced  first_ts  and  last_ts . That would look like this:  SELECT \n     coalesce ( \n         extract ( epoch   FROM \n             age ( \n                 least ( cal . end_ts ,   uptime . end_ts ),  \n                 CASE   WHEN   uptime . start_ts   IS   NOT   NULL   THEN \n                   greatest ( uptime . start_ts ,   cal . start_ts ) \n                 END \n             ) \n         ), \n         0 \n     )   AS   up_seconds  FROM   --- ...   It's not for the weak stomach, but frankly speaking, neither is the subquery...",
            "title": "Subquery, Subquery, What's the Worry?"
        },
        {
            "location": "/blog/2017/what-the-sql-lateral/#enough-nesting-lateral-join-save-me",
            "text": "Lateral joins can give us the best of both worlds: reduced subquery nesting and\ntraceable computed values. We're going to move the initial computed values like first_ts  and  last_ts , move them to a virtual table then  JOIN LATERAL  so\nthey can get their own table alias. We'll do it again for  up_seconds  and use first_ts  and  last_ts  from its sibling table.  SELECT \n     t2 . up_seconds  FROM   ( \n     -- build virtual table of all hours between \n     -- a date range \n     SELECT \n         start_ts , \n         start_ts   +   interval   '1 hour'   AS   end_ts \n         FROM   generate_series ( '2017-03-01' :: date , \n                              '2017-03-03' :: timestamp   -   interval   '1 hour' , \n                              interval   '1 hour' \n         )   AS   t ( start_ts ) \n     )   AS   cal  LEFT   JOIN   ( \n     -- build virtual table of uptimes \n     SELECT   * \n     FROM   ( \n         VALUES \n         ( '2017-03-01 01:15:00-06' :: timestamp ,   '2017-03-01 02:15:00-06' :: timestamp ), \n         ( '2017-03-01 08:00:00-06' ,   '2017-03-01 20:00:00-06' ), \n         ( '2017-03-02 19:00:00-06' ,   null ) \n     )   AS   t ( start_ts ,   end_ts )  )   AS   uptime   ON   cal . end_ts   >   uptime . start_ts   AND   cal . start_ts   <=   coalesce ( uptime . end_ts ,   current_timestamp )  JOIN   LATERAL   ( \n   SELECT \n       -- will use `first_ts` and `last_ts` to calculate uptime duration \n     CASE   WHEN   uptime . start_ts   IS   NOT   NULL   THEN \n         greatest ( uptime . start_ts ,   cal . start_ts ) \n     END                                                 AS   first_ts , \n     least ( cal . end_ts ,   uptime . end_ts )                    AS   last_ts , \n     date_trunc ( 'day' ,   cal . start_ts ):: date               AS   cal_date , \n     extract ( hour   from   cal . start_ts )                     AS   cal_hour , \n     extract ( epoch   from   age ( cal . end_ts ,   cal . start_ts ))   AS   cal_seconds  )   t1   ON   true  JOIN   LATERAL   ( \n   -- calculate uptime seconds for the time slice \n   SELECT \n     coalesce ( \n         extract ( epoch   FROM   age ( last_ts ,   first_ts )), \n         0 \n     )   AS   up_seconds  )   t2   ON   true   This gives us the same results but without the deep nesting.   up_seconds\n------------\n          0\n       2700\n        900\n          0\n          0\n       3600\n...\n       3600\n(48 rows)  What's great about this strategy is we can quickly choose which columns to see\nas we build up the query.  SELECT \n   t2 . up_seconds \n   ...  -- or --  SELECT \n   t2 . * , \n   t1 . *   Let's build up the final calculation using the same strategy:  SELECT \n   t2 . * , \n   t3 . *  FROM   ...  JOIN   LATERAL   ( \n   -- calculate percentage between uptime seconds and available seconds \n   -- within the time slice \n   SELECT \n     up_seconds   /   cal_seconds   AS   up_pct  )   t3   ON   true    up_seconds | up_pct\n------------+--------\n          0 |      0\n       2700 |   0.75\n        900 |   0.25\n          0 |      0\n...\n       3600 |      1\n(48 rows)",
            "title": "Enough Nesting, LATERAL join save me!"
        },
        {
            "location": "/blog/2017/what-the-sql-lateral/#plot-the-hours",
            "text": "Now we have all the computed data we need. Let's plot it as a cross tab (but not\nactually use  crosstab )  We'll need to consolidate the long list of data by  cal_date  and pivot the cal_hour  as a column and  up_pct  as a value. In case of overlapping uptimes\nwe'll be pessimists and choose the lowest or  min  uptime percentage.  The final query looks like:  SELECT \n     cal_date , \n     max ( CASE   WHEN   cal_hour   =   0   THEN   up_pct    END )   AS   hour_0 , \n     max ( CASE   WHEN   cal_hour   =   1   THEN   up_pct    END )   AS   hour_1 , \n     max ( CASE   WHEN   cal_hour   =   2   THEN   up_pct    END )   AS   hour_2 , \n     max ( CASE   WHEN   cal_hour   =   3   THEN   up_pct    END )   AS   hour_3 , \n     max ( CASE   WHEN   cal_hour   =   4   THEN   up_pct    END )   AS   hour_4 , \n     max ( CASE   WHEN   cal_hour   =   5   THEN   up_pct    END )   AS   hour_5 , \n     max ( CASE   WHEN   cal_hour   =   6   THEN   up_pct    END )   AS   hour_6 , \n     max ( CASE   WHEN   cal_hour   =   7   THEN   up_pct    END )   AS   hour_7 , \n     max ( CASE   WHEN   cal_hour   =   8   THEN   up_pct    END )   AS   hour_8 , \n     max ( CASE   WHEN   cal_hour   =   9   THEN   up_pct    END )   AS   hour_9 , \n     max ( CASE   WHEN   cal_hour   =   10   THEN   up_pct   END )   AS   hour_10 , \n     max ( CASE   WHEN   cal_hour   =   11   THEN   up_pct   END )   AS   hour_11 , \n     max ( CASE   WHEN   cal_hour   =   12   THEN   up_pct   END )   AS   hour_12 , \n     max ( CASE   WHEN   cal_hour   =   13   THEN   up_pct   END )   AS   hour_13 , \n     max ( CASE   WHEN   cal_hour   =   14   THEN   up_pct   END )   AS   hour_14 , \n     max ( CASE   WHEN   cal_hour   =   15   THEN   up_pct   END )   AS   hour_15 , \n     max ( CASE   WHEN   cal_hour   =   16   THEN   up_pct   END )   AS   hour_16 , \n     max ( CASE   WHEN   cal_hour   =   17   THEN   up_pct   END )   AS   hour_17 , \n     max ( CASE   WHEN   cal_hour   =   18   THEN   up_pct   END )   AS   hour_18 , \n     max ( CASE   WHEN   cal_hour   =   19   THEN   up_pct   END )   AS   hour_19 , \n     max ( CASE   WHEN   cal_hour   =   20   THEN   up_pct   END )   AS   hour_20 , \n     max ( CASE   WHEN   cal_hour   =   21   THEN   up_pct   END )   AS   hour_21 , \n     max ( CASE   WHEN   cal_hour   =   22   THEN   up_pct   END )   AS   hour_22 , \n     max ( CASE   WHEN   cal_hour   =   23   THEN   up_pct   END )   AS   hour_23  FROM   ( \n     -- build virtual table of all hours between \n     -- a date range \n     SELECT \n         start_ts , \n         start_ts   +   interval   '1 hour'   AS   end_ts \n         FROM   generate_series ( '2017-03-01' :: date , \n                              '2017-03-03' :: timestamp   -   interval   '1 hour' , \n                              interval   '1 hour' \n         )   AS   t ( start_ts ) \n     )   AS   cal  LEFT   JOIN   ( \n     -- build virtual table of uptimes \n     SELECT   * \n     FROM   ( \n         VALUES \n         ( '2017-03-01 01:15:00-06' :: timestamp ,   '2017-03-01 02:15:00-06' :: timestamp ), \n         ( '2017-03-01 08:00:00-06' ,   '2017-03-01 20:00:00-06' ), \n         ( '2017-03-02 19:00:00-06' ,   null ) \n     )   AS   t ( start_ts ,   end_ts )  )   AS   uptime   ON   cal . end_ts   >   uptime . start_ts   AND   cal . start_ts   <=   coalesce ( uptime . end_ts ,   current_timestamp )  JOIN   LATERAL   ( \n   SELECT \n       -- will use `first_ts` and `last_ts` to calculate uptime duration \n     CASE   WHEN   uptime . start_ts   IS   NOT   NULL   THEN \n         greatest ( uptime . start_ts ,   cal . start_ts ) \n     END                                                 AS   first_ts , \n     least ( cal . end_ts ,   uptime . end_ts )                    AS   last_ts , \n     date_trunc ( 'day' ,   cal . start_ts ):: date               AS   cal_date , \n     extract ( hour   from   cal . start_ts )                     AS   cal_hour , \n     extract ( epoch   from   age ( cal . end_ts ,   cal . start_ts ))   AS   cal_seconds  )   t1   ON   true  JOIN   LATERAL   ( \n   SELECT \n     coalesce ( \n         extract ( epoch   FROM   age ( last_ts ,   first_ts )), \n         0 \n     )   AS   up_seconds  )   t2   ON   true  JOIN   LATERAL   ( \n   -- calculate percentage between uptime seconds and available seconds \n   -- within the time slice \n   SELECT \n   up_seconds   /   cal_seconds   AS   up_pct  )   t3   ON   true  GROUP   BY   cal_date     cal_date  | hour_0 | hour_1 | hour_2 | hour_3 | ... | hour_23\n------------+--------+--------+--------+--------+ ... +---------\n 2017-03-01 |      0 |   0.75 |   0.25 |      0 | ... |       0\n 2017-03-02 |      0 |      0 |      0 |      0 | ... |       1\n(2 rows)",
            "title": "Plot the Hours"
        },
        {
            "location": "/blog/2017/what-the-sql-lateral/#more-than-cte-and-cross-join",
            "text": "This example only scratches the surface of  LATERAL s super powers. On the\nsurface  LATERAL  can do things  CTE , cross join, and  WINDOW  can do.\nPostgreSQL describe  LATERAL  as:   Subqueries appearing in FROM can be preceded by the key word LATERAL.\nThis allows them to reference columns provided by preceding FROM items.\n(Without LATERAL, each subquery is evaluated independently and so cannot\ncross-reference any other FROM item.)   TL;DR -  LATERAL  allows subqueries to reference earlier tables.",
            "title": "More than CTE and Cross Join"
        },
        {
            "location": "/blog/2017/what-the-sql-lateral/#references",
            "text": "Postgres Lateral Joins",
            "title": "References"
        },
        {
            "location": "/blog/2017/what-the-sql-window/",
            "text": "What the SQL?!? WINDOW\n\u00b6\n\n\n\n\nToday's \"What the SQL?!?\" features the keyword \nWINDOW\n. This clause allows\nus to elegantly select results from the previous results from the previous results\nfrom the previous results...\n\n\n\n\n\nPlease note, our target database is PostgreSQL. These examples may work with\nother databases, but might need some massaging to get them to work properly.\nSearch online for the specific vendor's documentation if errors pop up.\nTry searching for \"WINDOW queries {{DB VENDOR NAME}}\". Not all database vendors\nsupport the keyword \nWINDOW\n.\n\n\nCreate Sample Data\n\u00b6\n\n\nDROP\n \nTABLE\n \nIF\n \nEXISTS\n \nsample_moves\n;\n\n\nCREATE\n \nTABLE\n \nsample_moves\n \nAS\n\n  \nSELECT\n\n    \ncolumn1\n::\nint\n     \nAS\n \nid\n,\n\n    \ncolumn2\n::\nvarchar\n \nAS\n \nname\n,\n\n    \ncolumn3\n::\nvarchar\n \nAS\n \naddress\n,\n\n    \ncolumn4\n::\ndate\n \nAS\n \nmoved_at\n\n  \nFROM\n \n(\n\n    \nVALUES\n\n      \n(\n1\n,\n \n'Alice'\n \n,\n \n'1 Main St'\n,\n \n'2017-01-01'\n),\n\n      \n(\n2\n,\n \n'Bob'\n   \n,\n \n'2 Main St'\n,\n \n'2017-02-01'\n),\n\n      \n(\n3\n,\n \n'Cat'\n   \n,\n \n'2 Main St'\n,\n \n'2017-03-01'\n),\n\n      \n(\n4\n,\n \n'Dan Sr'\n  \n,\n \n'3 Main St'\n,\n  \n'1970-04-01'\n),\n\n      \n(\n5\n,\n \n'Dan Jr'\n  \n,\n \n'3 Main St'\n,\n  \n'2001-04-01'\n),\n\n      \n(\n6\n,\n \n'Dan 3rd'\n \n,\n \n'3 Main St'\n,\n \n'2017-04-01'\n)\n\n  \n)\n \nas\n \nt\n\n\n;\n\n\n\nCREATE\n \nINDEX\n \nON\n \nsample_moves\n(\naddress\n);\n\n\n\nSELECT\n \n*\n \nFROM\n \nsample_moves\n;\n\n\n\n\n\nResults:\n\u00b6\n\n\n\n\n\n\n\n\nid\n\n\nname\n\n\naddress\n\n\nmoved_at\n\n\n\n\n\n\n\n\n\n\n1\n\n\nAlice\n\n\n1 Main St\n\n\n2017-01-01\n\n\n\n\n\n\n2\n\n\nBob\n\n\n2 Main St\n\n\n2017-02-01\n\n\n\n\n\n\n3\n\n\nCat\n\n\n2 Main St\n\n\n2017-03-01\n\n\n\n\n\n\n4\n\n\nDan Sr\n\n\n3 Main St\n\n\n1970-04-01\n\n\n\n\n\n\n5\n\n\nDan Jr\n\n\n3 Main St\n\n\n2001-04-01\n\n\n\n\n\n\n6\n\n\nDan 3\nrd\n\n\n3 Main St\n\n\n2017-04-01\n\n\n\n\n\n\n\n\nLife Without Windows\n\u00b6\n\n\nA quick poem...\n\n\n\n\nEyes big and wide,     \n\nnothing seen inside.   \n\nFeeling around         \n\nnothing abound.        \n\nThis things wet,       \n\ntoxic I bet.           \n\nClosing my eyes,       \n\nstill can't rest.      \n\nHaving a window,       \n\nwould be best.         \n\n\n\n\nHow many people live at each address?\n\u00b6\n\n\nUsing a standard \nGROUP BY\n with \nCOUNT\n we consolidate the records and count \nhow many rows belong to each address.\n\n\n\n\nTip\n: \nCOUNT(1)\n is more efficient than \nCOUNT(*)\n.\n\n\n\n\nSELECT\n\n  \naddress\n,\n\n  \nCOUNT\n(\n1\n)\n \ntotal\n\n\nFROM\n \nsample_moves\n\n\nGROUP\n \nBY\n \naddress\n\n\nORDER\n \nBY\n \naddress\n;\n\n\n\n\n\nResults:\n\u00b6\n\n\n\n\n\n\n\n\naddress\n\n\ntotal\n\n\n\n\n\n\n\n\n\n\n1 Main St\n\n\n1\n\n\n\n\n\n\n2 Main St\n\n\n2\n\n\n\n\n\n\n3 Main St\n\n\n3\n\n\n\n\n\n\n\n\nHow many people live with each person?\n\u00b6\n\n\nEnter subquery land. Life without windows is not exciting.\n\n\nSELECT\n\n  \n*\n,\n\n  \n(\n\n    \nSELECT\n\n      \n-- everyone at the address, minus the person\n\n      \nCOUNT\n(\n1\n)\n \n-\n \n1\n\n    \nFROM\n \nsample_moves\n \nt2\n\n    \nWHERE\n \nt2\n.\naddress\n \n=\n \nt1\n.\naddress\n\n  \n)\n \nAS\n \nothers\n\n\nFROM\n \nsample_moves\n \nt1\n;\n\n\n\n\n\nResults:\n\u00b6\n\n\n\n\n\n\n\n\nid\n\n\nname\n\n\naddress\n\n\nmoved_at\n\n\nothers\n\n\n\n\n\n\n\n\n\n\n1\n\n\nAlice\n\n\n1 Main St\n\n\n2017-01-01\n\n\n0\n\n\n\n\n\n\n2\n\n\nBob\n\n\n2 Main St\n\n\n2017-02-01\n\n\n1\n\n\n\n\n\n\n3\n\n\nCat\n\n\n2 Main St\n\n\n2017-03-01\n\n\n1\n\n\n\n\n\n\n4\n\n\nDan Sr\n\n\n3 Main St\n\n\n1970-04-01\n\n\n2\n\n\n\n\n\n\n5\n\n\nDan Jr\n\n\n3 Main St\n\n\n2001-04-01\n\n\n2\n\n\n\n\n\n\n6\n\n\nDan 3\nrd\n\n\n3 Main St\n\n\n2017-04-01\n\n\n2\n\n\n\n\n\n\n\n\nJOIN\n works, too\n\u00b6\n\n\nSELECT\n\n  \nt1\n.\n*\n,\n\n  \nt2\n.\nothers\n\n\nFROM\n \nsample_moves\n \nt1\n\n\nJOIN\n \n(\n\n  \nSELECT\n\n    \naddress\n,\n\n    \nCOUNT\n(\n1\n)\n \n-\n \n1\n \nas\n \nothers\n\n  \nFROM\n \nsample_moves\n\n  \nGROUP\n \nBY\n \naddress\n\n  \nORDER\n \nBY\n \naddress\n\n\n)\n \nt2\n \nUSING\n \n(\naddress\n);\n\n\n\n\n\nAnd so does \nJOIN LATERAL\n\u00b6\n\n\nSELECT\n\n  \nt1\n.\n*\n,\n\n  \nt2\n.\nothers\n\n\nFROM\n \nsample_moves\n \nt1\n\n\nJOIN\n \nLATERAL\n \n(\n\n  \nSELECT\n\n    \naddress\n,\n\n    \nCOUNT\n(\n1\n)\n \n-\n \n1\n \nas\n \nothers\n\n  \nFROM\n \nsample_moves\n \nsub\n\n  \nWHERE\n \nsub\n.\naddress\n \n=\n \nt1\n.\naddress\n\n  \nGROUP\n \nBY\n \naddress\n\n  \nORDER\n \nBY\n \naddress\n\n\n)\n \nt2\n \nON\n \ntrue\n;\n\n\n\n\n\nThat's nice, but who moved in first?\n\u00b6\n\n\nSELECT\n\n  \n*\n,\n\n  \n(\n\n    \nSELECT\n\n      \nCOUNT\n(\n1\n)\n \n-\n \n1\n\n    \nFROM\n \nsample_moves\n \nt2\n\n    \nWHERE\n \nt2\n.\naddress\n \n=\n \nt1\n.\naddress\n\n  \n)\n \nAS\n \nothers\n,\n\n  \n(\n\n    \nSELECT\n\n      \nname\n\n    \nFROM\n \nsample_moves\n \nt3\n\n    \nWHERE\n \nt3\n.\naddress\n \n=\n \nt1\n.\naddress\n\n    \nORDER\n \nBY\n \nmoved_at\n \nASC\n\n    \nLIMIT\n \n1\n\n  \n)\n \nAS\n \nfirst_person\n\n\nFROM\n \nsample_moves\n \nt1\n;\n\n\n\n\n\nWait I thought this was about windows?!?\n\u00b6\n\n\nThe keyword \nOVER\n is the gateway drug into \nWINDOW\n functions. Using \nOVER\n\nwith parenthesis is an inline window. The \nPARTITION BY\n keywords gives similar\nfunctionality to \nGROUP BY\n and \nJOIN ... USING\n all in one power packed\nstatement. It can never reduce the number of records in a result set which is\nthe same behavior expected of a correlated subquery.\n\n\nPARTITION BY\n is treated the same as the traditional \nGROUP BY\n. The \nORDER BY\n\nalso has the same behavior as its use in a standard query.\n\n\nSELECT\n\n  \n*\n,\n\n  \n(\ncount\n(\n1\n)\n \nOVER\n \n(\nPARTITION\n \nBY\n \naddress\n))\n \n-\n \n1\n                      \nAS\n \nothers\n,\n\n  \nfirst_value\n(\nname\n)\n \nOVER\n \n(\nPARTITION\n \nBY\n \naddress\n \nORDER\n \nBY\n \nmoved_at\n)\n \nAS\n \nfirst_moved\n\n\nFROM\n \nsample_moves\n;\n\n\n\n\n\nResults\n\u00b6\n\n\n\n\n\n\n\n\nid\n\n\nname\n\n\naddress\n\n\nmoved_at\n\n\nothers\n\n\nfirst_moved\n\n\n\n\n\n\n\n\n\n\n1\n\n\nAlice\n\n\n1 Main St\n\n\n2017-01-01\n\n\n0\n\n\nAlice\n\n\n\n\n\n\n2\n\n\nBob\n\n\n2 Main St\n\n\n2017-02-01\n\n\n1\n\n\nBob\n\n\n\n\n\n\n3\n\n\nCat\n\n\n2 Main St\n\n\n2017-03-01\n\n\n1\n\n\nBob\n\n\n\n\n\n\n4\n\n\nDan Sr\n\n\n3 Main St\n\n\n1970-04-01\n\n\n2\n\n\nDan Sr\n\n\n\n\n\n\n5\n\n\nDan Jr\n\n\n3 Main St\n\n\n2001-04-01\n\n\n2\n\n\nDan Sr\n\n\n\n\n\n\n6\n\n\nDan 3\nrd\n\n\n3 Main St\n\n\n2017-04-01\n\n\n2\n\n\nDan Sr\n\n\n\n\n\n\n\n\nA picture with arrows worth a thousand words:\n\n\n\n\nThat doesn't look very DRY. Finally, a \nWINDOW\n\u00b6\n\n\nThe \nWINDOW\n keyword allows us to alias the options of the \nOVER\n clause. Namely\nthe expression \n(...)\n between and including the parenthesis.\n\n\nIn the following example we add the use of \nRANGE\n to provide additional\ndirection to the windowing clause.\n\n\nSELECT\n\n  \n*\n,\n\n  \n(\ncount\n(\n1\n)\n \nOVER\n \nw\n)\n \n-\n \n1\n \nAS\n \nothers\n,\n\n  \nfirst_value\n(\nname\n)\n \nOVER\n \nw\n \nAS\n \nfirst_moved\n,\n\n  \nlast_value\n(\nname\n)\n  \nOVER\n \nw\n \nAS\n \nlast_moved\n\n\nFROM\n \nsample_moves\n\n\nWINDOW\n \nw\n \nAS\n \n(\n\n  \nPARTITION\n \nBY\n \naddress\n \nORDER\n \nBY\n \nmoved_at\n\n  \nRANGE\n \nBETWEEN\n \nUNBOUNDED\n \nPRECEDING\n \nAND\n \nUNBOUNDED\n \nFOLLOWING\n\n\n);\n\n\n\n\n\nResults\n\u00b6\n\n\n\n\n\n\n\n\nid\n\n\nname\n\n\naddress\n\n\nmoved_at\n\n\nothers\n\n\nfirst_moved\n\n\nlast_moved\n\n\n\n\n\n\n\n\n\n\n1\n\n\nAlice\n\n\n1 Main St\n\n\n2017-01-01\n\n\n0\n\n\nAlice\n\n\nAlice\n\n\n\n\n\n\n2\n\n\nBob\n\n\n2 Main St\n\n\n2017-02-01\n\n\n0\n\n\nBob\n\n\nBob\n\n\n\n\n\n\n3\n\n\nCat\n\n\n2 Main St\n\n\n2017-03-01\n\n\n1\n\n\nBob\n\n\nCat\n\n\n\n\n\n\n4\n\n\nDan Sr\n\n\n3 Main St\n\n\n1970-04-01\n\n\n0\n\n\nDan Sr\n\n\nDan Sr\n\n\n\n\n\n\n5\n\n\nDan Jr\n\n\n3 Main St\n\n\n2001-04-01\n\n\n1\n\n\nDan Sr\n\n\nDan Jr\n\n\n\n\n\n\n6\n\n\nDan 3\nrd\n\n\n3 Main St\n\n\n2017-04-01\n\n\n2\n\n\nDan Sr\n\n\nDan 3\nrd\n\n\n\n\n\n\n\n\n-- Previous and Next Record\n\n\nSELECT\n\n  \n*\n,\n\n  \n(\ncount\n(\n1\n)\n \nOVER\n \nw\n)\n \n-\n \n1\n \nAS\n \nothers\n,\n\n  \nfirst_value\n(\nname\n)\n \nOVER\n \nw\n \nAS\n \nfirst_moved\n,\n\n  \nlast_value\n(\nname\n)\n  \nOVER\n \nw\n \nAS\n \nlast_moved\n,\n\n  \nlag\n(\nid\n)\n \nOVER\n \n(\nORDER\n \nBY\n \nid\n)\n \nAS\n \nprev_id\n,\n\n  \nlead\n(\nid\n)\n \nOVER\n \n(\nORDER\n \nBY\n \nid\n)\n \nAS\n \nnext_id\n\n\nFROM\n \nsample_moves\n\n\nWINDOW\n \nw\n \nAS\n \n(\n\n  \nPARTITION\n \nBY\n \naddress\n \n  \nORDER\n \nBY\n \nmoved_at\n\n  \nRANGE\n \nBETWEEN\n \nUNBOUNDED\n \nPRECEDING\n \nAND\n \nUNBOUNDED\n \nFOLLOWING\n\n\n)\n\n\nORDER\n \nBY\n \naddress\n;\n\n\n\n\n\nResults\n\u00b6\n\n\n\n\n\n\n\n\nid\n\n\nname\n\n\naddress\n\n\nmoved_at\n\n\nothers\n\n\nfirst_moved\n\n\nlast_moved\n\n\nprev_id\n\n\nnext_id\n\n\n\n\n\n\n\n\n\n\n1\n\n\nAlice\n\n\n1 Main St\n\n\n2017-01-01\n\n\n0\n\n\nAlice\n\n\nAlice\n\n\n\n\n2\n\n\n\n\n\n\n2\n\n\nBob\n\n\n2 Main St\n\n\n2017-02-01\n\n\n1\n\n\nBob\n\n\nCat\n\n\n1\n\n\n3\n\n\n\n\n\n\n3\n\n\nCat\n\n\n2 Main St\n\n\n2017-03-01\n\n\n1\n\n\nBob\n\n\nCat\n\n\n2\n\n\n4\n\n\n\n\n\n\n4\n\n\nDan Sr\n\n\n3 Main St\n\n\n1970-04-01\n\n\n2\n\n\nDan Sr\n\n\nDan 3\nrd\n\n\n3\n\n\n5\n\n\n\n\n\n\n5\n\n\nDan Jr\n\n\n3 Main St\n\n\n2001-04-01\n\n\n2\n\n\nDan Sr\n\n\nDan 3\nrd\n\n\n4\n\n\n6\n\n\n\n\n\n\n6\n\n\nDan 3\nrd\n\n\n3 Main St\n\n\n2017-04-01\n\n\n2\n\n\nDan Sr\n\n\nDan 3\nrd\n\n\n5\n\n\n\n\n\n\n\n\n\n\nList Window Functions\n\u00b6\n\n\nHere is a list from \nPostgres docs\n\nof all the window functions. In addition to these, \nany regular aggregate function\n can be use within a window.\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrow_number()\n\n\nnumber of the current row within its partition, counting from 1\n\n\n\n\n\n\nrank()\n\n\nrank of the current row with gaps; same as\u00a0row_number\u00a0of its first peer\n\n\n\n\n\n\ndense_rank()\n\n\nrank of the current row without gaps; this function counts peer groups\n\n\n\n\n\n\npercent_rank()\n\n\nrelative rank of the current row: (rank\u00a0- 1) / (total rows - 1)\n\n\n\n\n\n\ncume_dist()\n\n\nrelative rank of the current row: (number of rows preceding or peer with current row) / (total rows)\n\n\n\n\n\n\nntile\n\n\ninteger ranging from 1 to the argument value, dividing the partition as equally as possible\n\n\n\n\n\n\nlag()\n\n\nreturns\u00a0value\u00a0evaluated at the row that is\u00a0offset\u00a0rows before the current row within the partition; if there is no such row, instead return\u00a0default\u00a0(which must be of the same type as\u00a0value). Both\u00a0offset\u00a0and\u00a0default\u00a0are evaluated with respect to the current row. If omitted,\u00a0offset\u00a0defaults to 1 and\u00a0default\u00a0to null\n\n\n\n\n\n\nlead()\n\n\nreturns\u00a0value\u00a0evaluated at the row that is\u00a0offset\u00a0rows after the current row within the partition; if there is no such row, instead return\u00a0default\u00a0(which must be of the same type as\u00a0value). Both\u00a0offset\u00a0and\u00a0default\u00a0are evaluated with respect to the current row. If omitted,\u00a0offset\u00a0defaults to 1 and\u00a0default\u00a0to null\n\n\n\n\n\n\nfirst_value()\n\n\nreturns\u00a0value\u00a0evaluated at the row that is the first row of the window frame\n\n\n\n\n\n\nlast_value()\n\n\nreturns\u00a0value\u00a0evaluated at the row that is the last row of the window frame\n\n\n\n\n\n\nnth_value()\n\n\nreturns\u00a0value\u00a0evaluated at the row that is the\u00a0nth\u00a0row of the window frame (counting from 1); null if no such row\n\n\n\n\n\n\n\n\nReferences\n\u00b6\n\n\n\n\nPostgres Window Tutorial: \nhttps://www.postgresql.org/docs/9.3/static/tutorial-window.html\n\n\nPostgres Window Functions: \nhttps://www.postgresql.org/docs/9.3/static/functions-window.html\n\n\nPostgres Window Syntax: \nhttps://www.postgresql.org/docs/9.3/static/sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS",
            "title": "What the SQL?!? WINDOW"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#what-the-sql-window",
            "text": "Today's \"What the SQL?!?\" features the keyword  WINDOW . This clause allows\nus to elegantly select results from the previous results from the previous results\nfrom the previous results...   Please note, our target database is PostgreSQL. These examples may work with\nother databases, but might need some massaging to get them to work properly.\nSearch online for the specific vendor's documentation if errors pop up.\nTry searching for \"WINDOW queries {{DB VENDOR NAME}}\". Not all database vendors\nsupport the keyword  WINDOW .",
            "title": "What the SQL?!? WINDOW"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#create-sample-data",
            "text": "DROP   TABLE   IF   EXISTS   sample_moves ;  CREATE   TABLE   sample_moves   AS \n   SELECT \n     column1 :: int       AS   id , \n     column2 :: varchar   AS   name , \n     column3 :: varchar   AS   address , \n     column4 :: date   AS   moved_at \n   FROM   ( \n     VALUES \n       ( 1 ,   'Alice'   ,   '1 Main St' ,   '2017-01-01' ), \n       ( 2 ,   'Bob'     ,   '2 Main St' ,   '2017-02-01' ), \n       ( 3 ,   'Cat'     ,   '2 Main St' ,   '2017-03-01' ), \n       ( 4 ,   'Dan Sr'    ,   '3 Main St' ,    '1970-04-01' ), \n       ( 5 ,   'Dan Jr'    ,   '3 Main St' ,    '2001-04-01' ), \n       ( 6 ,   'Dan 3rd'   ,   '3 Main St' ,   '2017-04-01' ) \n   )   as   t  ;  CREATE   INDEX   ON   sample_moves ( address );  SELECT   *   FROM   sample_moves ;",
            "title": "Create Sample Data"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#results",
            "text": "id  name  address  moved_at      1  Alice  1 Main St  2017-01-01    2  Bob  2 Main St  2017-02-01    3  Cat  2 Main St  2017-03-01    4  Dan Sr  3 Main St  1970-04-01    5  Dan Jr  3 Main St  2001-04-01    6  Dan 3 rd  3 Main St  2017-04-01",
            "title": "Results:"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#life-without-windows",
            "text": "A quick poem...   Eyes big and wide,      \nnothing seen inside.    \nFeeling around          \nnothing abound.         \nThis things wet,        \ntoxic I bet.            \nClosing my eyes,        \nstill can't rest.       \nHaving a window,        \nwould be best.",
            "title": "Life Without Windows"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#how-many-people-live-at-each-address",
            "text": "Using a standard  GROUP BY  with  COUNT  we consolidate the records and count \nhow many rows belong to each address.   Tip :  COUNT(1)  is more efficient than  COUNT(*) .   SELECT \n   address , \n   COUNT ( 1 )   total  FROM   sample_moves  GROUP   BY   address  ORDER   BY   address ;",
            "title": "How many people live at each address?"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#results_1",
            "text": "address  total      1 Main St  1    2 Main St  2    3 Main St  3",
            "title": "Results:"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#how-many-people-live-with-each-person",
            "text": "Enter subquery land. Life without windows is not exciting.  SELECT \n   * , \n   ( \n     SELECT \n       -- everyone at the address, minus the person \n       COUNT ( 1 )   -   1 \n     FROM   sample_moves   t2 \n     WHERE   t2 . address   =   t1 . address \n   )   AS   others  FROM   sample_moves   t1 ;",
            "title": "How many people live with each person?"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#results_2",
            "text": "id  name  address  moved_at  others      1  Alice  1 Main St  2017-01-01  0    2  Bob  2 Main St  2017-02-01  1    3  Cat  2 Main St  2017-03-01  1    4  Dan Sr  3 Main St  1970-04-01  2    5  Dan Jr  3 Main St  2001-04-01  2    6  Dan 3 rd  3 Main St  2017-04-01  2",
            "title": "Results:"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#join-works-too",
            "text": "SELECT \n   t1 . * , \n   t2 . others  FROM   sample_moves   t1  JOIN   ( \n   SELECT \n     address , \n     COUNT ( 1 )   -   1   as   others \n   FROM   sample_moves \n   GROUP   BY   address \n   ORDER   BY   address  )   t2   USING   ( address );",
            "title": "JOIN works, too"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#and-so-does-join-lateral",
            "text": "SELECT \n   t1 . * , \n   t2 . others  FROM   sample_moves   t1  JOIN   LATERAL   ( \n   SELECT \n     address , \n     COUNT ( 1 )   -   1   as   others \n   FROM   sample_moves   sub \n   WHERE   sub . address   =   t1 . address \n   GROUP   BY   address \n   ORDER   BY   address  )   t2   ON   true ;",
            "title": "And so does JOIN LATERAL"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#thats-nice-but-who-moved-in-first",
            "text": "SELECT \n   * , \n   ( \n     SELECT \n       COUNT ( 1 )   -   1 \n     FROM   sample_moves   t2 \n     WHERE   t2 . address   =   t1 . address \n   )   AS   others , \n   ( \n     SELECT \n       name \n     FROM   sample_moves   t3 \n     WHERE   t3 . address   =   t1 . address \n     ORDER   BY   moved_at   ASC \n     LIMIT   1 \n   )   AS   first_person  FROM   sample_moves   t1 ;",
            "title": "That's nice, but who moved in first?"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#wait-i-thought-this-was-about-windows",
            "text": "The keyword  OVER  is the gateway drug into  WINDOW  functions. Using  OVER \nwith parenthesis is an inline window. The  PARTITION BY  keywords gives similar\nfunctionality to  GROUP BY  and  JOIN ... USING  all in one power packed\nstatement. It can never reduce the number of records in a result set which is\nthe same behavior expected of a correlated subquery.  PARTITION BY  is treated the same as the traditional  GROUP BY . The  ORDER BY \nalso has the same behavior as its use in a standard query.  SELECT \n   * , \n   ( count ( 1 )   OVER   ( PARTITION   BY   address ))   -   1                        AS   others , \n   first_value ( name )   OVER   ( PARTITION   BY   address   ORDER   BY   moved_at )   AS   first_moved  FROM   sample_moves ;",
            "title": "Wait I thought this was about windows?!?"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#results_3",
            "text": "id  name  address  moved_at  others  first_moved      1  Alice  1 Main St  2017-01-01  0  Alice    2  Bob  2 Main St  2017-02-01  1  Bob    3  Cat  2 Main St  2017-03-01  1  Bob    4  Dan Sr  3 Main St  1970-04-01  2  Dan Sr    5  Dan Jr  3 Main St  2001-04-01  2  Dan Sr    6  Dan 3 rd  3 Main St  2017-04-01  2  Dan Sr     A picture with arrows worth a thousand words:",
            "title": "Results"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#that-doesnt-look-very-dry-finally-a-window",
            "text": "The  WINDOW  keyword allows us to alias the options of the  OVER  clause. Namely\nthe expression  (...)  between and including the parenthesis.  In the following example we add the use of  RANGE  to provide additional\ndirection to the windowing clause.  SELECT \n   * , \n   ( count ( 1 )   OVER   w )   -   1   AS   others , \n   first_value ( name )   OVER   w   AS   first_moved , \n   last_value ( name )    OVER   w   AS   last_moved  FROM   sample_moves  WINDOW   w   AS   ( \n   PARTITION   BY   address   ORDER   BY   moved_at \n   RANGE   BETWEEN   UNBOUNDED   PRECEDING   AND   UNBOUNDED   FOLLOWING  );",
            "title": "That doesn't look very DRY. Finally, a WINDOW"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#results_4",
            "text": "id  name  address  moved_at  others  first_moved  last_moved      1  Alice  1 Main St  2017-01-01  0  Alice  Alice    2  Bob  2 Main St  2017-02-01  0  Bob  Bob    3  Cat  2 Main St  2017-03-01  1  Bob  Cat    4  Dan Sr  3 Main St  1970-04-01  0  Dan Sr  Dan Sr    5  Dan Jr  3 Main St  2001-04-01  1  Dan Sr  Dan Jr    6  Dan 3 rd  3 Main St  2017-04-01  2  Dan Sr  Dan 3 rd     -- Previous and Next Record  SELECT \n   * , \n   ( count ( 1 )   OVER   w )   -   1   AS   others , \n   first_value ( name )   OVER   w   AS   first_moved , \n   last_value ( name )    OVER   w   AS   last_moved , \n   lag ( id )   OVER   ( ORDER   BY   id )   AS   prev_id , \n   lead ( id )   OVER   ( ORDER   BY   id )   AS   next_id  FROM   sample_moves  WINDOW   w   AS   ( \n   PARTITION   BY   address  \n   ORDER   BY   moved_at \n   RANGE   BETWEEN   UNBOUNDED   PRECEDING   AND   UNBOUNDED   FOLLOWING  )  ORDER   BY   address ;",
            "title": "Results"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#results_5",
            "text": "id  name  address  moved_at  others  first_moved  last_moved  prev_id  next_id      1  Alice  1 Main St  2017-01-01  0  Alice  Alice   2    2  Bob  2 Main St  2017-02-01  1  Bob  Cat  1  3    3  Cat  2 Main St  2017-03-01  1  Bob  Cat  2  4    4  Dan Sr  3 Main St  1970-04-01  2  Dan Sr  Dan 3 rd  3  5    5  Dan Jr  3 Main St  2001-04-01  2  Dan Sr  Dan 3 rd  4  6    6  Dan 3 rd  3 Main St  2017-04-01  2  Dan Sr  Dan 3 rd  5",
            "title": "Results"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#list-window-functions",
            "text": "Here is a list from  Postgres docs \nof all the window functions. In addition to these,  any regular aggregate function  can be use within a window.     Function  Description      row_number()  number of the current row within its partition, counting from 1    rank()  rank of the current row with gaps; same as\u00a0row_number\u00a0of its first peer    dense_rank()  rank of the current row without gaps; this function counts peer groups    percent_rank()  relative rank of the current row: (rank\u00a0- 1) / (total rows - 1)    cume_dist()  relative rank of the current row: (number of rows preceding or peer with current row) / (total rows)    ntile  integer ranging from 1 to the argument value, dividing the partition as equally as possible    lag()  returns\u00a0value\u00a0evaluated at the row that is\u00a0offset\u00a0rows before the current row within the partition; if there is no such row, instead return\u00a0default\u00a0(which must be of the same type as\u00a0value). Both\u00a0offset\u00a0and\u00a0default\u00a0are evaluated with respect to the current row. If omitted,\u00a0offset\u00a0defaults to 1 and\u00a0default\u00a0to null    lead()  returns\u00a0value\u00a0evaluated at the row that is\u00a0offset\u00a0rows after the current row within the partition; if there is no such row, instead return\u00a0default\u00a0(which must be of the same type as\u00a0value). Both\u00a0offset\u00a0and\u00a0default\u00a0are evaluated with respect to the current row. If omitted,\u00a0offset\u00a0defaults to 1 and\u00a0default\u00a0to null    first_value()  returns\u00a0value\u00a0evaluated at the row that is the first row of the window frame    last_value()  returns\u00a0value\u00a0evaluated at the row that is the last row of the window frame    nth_value()  returns\u00a0value\u00a0evaluated at the row that is the\u00a0nth\u00a0row of the window frame (counting from 1); null if no such row",
            "title": "List Window Functions"
        },
        {
            "location": "/blog/2017/what-the-sql-window/#references",
            "text": "Postgres Window Tutorial:  https://www.postgresql.org/docs/9.3/static/tutorial-window.html  Postgres Window Functions:  https://www.postgresql.org/docs/9.3/static/functions-window.html  Postgres Window Syntax:  https://www.postgresql.org/docs/9.3/static/sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS",
            "title": "References"
        },
        {
            "location": "/blog/2017/what-the-sql-recursive/",
            "text": "What the SQL?!? Recursive\n\u00b6\n\n\n\n\nToday's \"What the SQL?!?\" features the keyword \nRECURSIVE\n. This clause allows\nus to elegantly select results from the previous results from the previous results\nfrom the previous results...\n\n\n\n\n\nPlease note, our target database is PostgreSQL. These examples may work with\nother databases, but might need some massaging to get them to work properly.\nSearch online for the specific vendor's documentation if errors pop up.\nTry searching for \"RECURSIVE queries {{DB VENDOR NAME}}\". Not all database vendors\nsupport the keyword \nRECURSIVE\n.\n\n\nFibonacci Sequence\n\u00b6\n\n\nAccording to \nWikipedia\n:\n\n\n\n\nIn mathematics, the Fibonacci numbers are the numbers in the following integer\nsequence, called the Fibonacci sequence, and characterized by the fact that\nevery number after the first two is the sum of the two preceding ones:\n\n\n1, 1, 2, 3, 5, 8, 13, 21, 34, 55 ...\n\n\n\n\n\n\n\nSQL Solution\n\u00b6\n\n\nOur SQL solution will make use of the \nRECURSIVE\n \nCTE\n\nkeyword.\n\n\nWITH\n \nRECURSIVE\n \nt\n(\ni\n,\n \nfi\n,\n \nfib\n)\n \nAS\n \n(\n\n  \nSELECT\n\n    \n1\n,\n\n    \n0\n::\nNUMERIC\n,\n\n    \n1\n::\nNUMERIC\n\n  \nUNION\n \nALL\n\n  \nSELECT\n\n    \ni\n \n+\n \n1\n,\n\n    \nfib\n,\n\n    \nfi\n \n+\n \nfib\n\n  \nFROM\n \nt\n\n  \nWHERE\n \ni\n \n<\n \n10\n\n\n)\n\n\nSELECT\n\n  \ni\n,\n\n  \nfib\n\n\nFROM\n \nt\n\n\n\n\n\nThe Ins and Outs\n\u00b6\n\n\nHere's some inline colorful comments to explain the sections:\n\n\n\nMaybe arrows will help a little more with the flow of data:\n\n\n\nFibonacci Results\n\u00b6\n\n\nWhen you run the query, you'll get the following results:\n\n\n i  | fib\n----+-----\n  1 |   1\n  2 |   1\n  3 |   2\n  4 |   3\n  5 |   5\n  6 |   8\n  7 |  13\n  8 |  21\n  9 |  34\n 10 |  55\n\n(10 rows)\n\n\n\n\nIf you want to see the results for a high number, update \ni < 10\n to a higher\nvalue. If you go above \ni < 793\n, Postgres gives up and returns \nNan\n which means\n\nNot a number\n which means the computed value is larger than your computer can\nhandle and still treat like a number. Sorry, get a new computer or work with\nnumbers less than 166 digits long.\n\n\nA Real World Example with Hierarchical Data\n\u00b6\n\n\nFibonacci sequence is nice and all, but you have real data concerns. You're\nthinking, \"Show me the DATA!\". So here's the data...\n\n\n-- Build `sample_people` table\n\n\nCREATE\n \nTABLE\n \nsample_people\n \nAS\n\n  \nSELECT\n\n    \ncolumn1\n::\nint\n     \nAS\n \nid\n,\n\n    \ncolumn2\n::\nvarchar\n \nAS\n \nname\n,\n\n    \ncolumn3\n::\nint\n     \nAS\n \nparent_id\n\n  \nFROM\n \n(\n\n    \nVALUES\n\n      \n(\n0\n,\n \n'Root'\n \n,\n \nnull\n),\n\n      \n(\n1\n,\n \n'Alice'\n,\n \n0\n),\n\n      \n(\n2\n,\n \n'Bob'\n  \n,\n \n1\n),\n\n      \n(\n3\n,\n \n'Cat'\n  \n,\n \n1\n),\n\n      \n(\n4\n,\n \n'Dan'\n  \n,\n \n3\n),\n\n      \n(\n5\n,\n \n'Evan'\n \n,\n \n0\n),\n\n      \n(\n6\n,\n \n'Frank'\n,\n \n5\n)\n\n  \n)\n \nas\n \nt\n\n  \n;\n\n\n\nSELECT\n \n*\n \nFROM\n \nsample_people\n;\n\n\n--  id | name  | parent_id\n\n\n-- ----+-------+-----------\n\n\n--   0 | Root  |\n\n\n--   1 | Alice |         0\n\n\n--   2 | Bob   |         1\n\n\n--   3 | Cat   |         1\n\n\n--   4 | Dan   |         3\n\n\n--   5 | Evan  |         0\n\n\n--   6 | Frank |         5\n\n\n\n\n\nOur \nsample_people\n table represents a person by name and that person may have a\nparent. The parent of all the parents is \nRoot\n.\n\n\nAnd finally our recursive query to get a nice display of the hierarchy.\n\n\nWITH\n \nRECURSIVE\n \ntree\n \n-- `tree` is the table alias.\n\n                    \n-- It must be used as part of the `UNION` statement.\n\n  \nAS\n \n(\n\n  \n-- 1) Initialize table with all the top level rows.\n\n  \n--    Anything without a parent is a parent. Is that apparent?\n\n  \nSELECT\n\n    \n0\n \nAS\n \nlevel\n,\n        \n-- 2) Set the level to 0.\n\n    \nsample_people\n.\n*\n    \n-- 3) Return the initial row\n\n  \nFROM\n \nsample_people\n\n  \nWHERE\n \nparent_id\n \n=\n \n0\n  \n-- 4) Top level doesn't have a parent.\n\n  \nUNION\n \nALL\n\n  \n-- 5) Union all the parents with their children.\n\n  \nSELECT\n\n    \ntree\n.\nlevel\n \n+\n \n1\n,\n    \n-- 6) Increment the level every time we loop.\n\n    \nsample_people\n.\n*\n    \n-- 7) Return the current row - the child row. \n\n  \nFROM\n \ntree\n    \n-- 8) `tree` is populated with the previous results.\n\n               \n--    Every loop gets a new record from current result.\n\n  \nJOIN\n \nsample_people\n \nON\n \nsample_people\n.\nparent_id\n \n=\n \ntree\n.\nid\n\n\n)\n\n\nSELECT\n\n  \nrepeat\n(\n' '\n,\n \nlevel\n \n*\n \n4\n)\n \n||\n \nname\n \nAS\n \ndisplay\n\n\nFROM\n \ntree\n\n\nORDER\n \nBY\n \nlevel\n,\n \nname\n\n\n;\n\n\n\n--    display\n\n\n-- -------------\n\n\n--  Alice\n\n\n--  Evan\n\n\n--      Bob\n\n\n--      Cat\n\n\n--      Frank\n\n\n--          Dan\n\n\n-- (6 rows)\n\n\n\n\n\nBait and Switch\n\u00b6\n\n\nRECURSIVE\n is not actually recursive. It isn't a function calling itself.\nSorry, not sorry. It's much closer to a \nwhile\n loop. Here's what Postgres has to say about it:\n\n\n\n\nNote: Strictly speaking, this process is \niteration\n not recursion, but RECURSIVE\nis the terminology chosen by the SQL standards committee. [emphasis added]\n\n\n\n\nClosing\n\u00b6\n\n\nSo the next time you try to crawl a hierarchy of data, we hope \nRECURSIVE\n comes\nto mind. It's a great way to save round trips to the database and query what is\nneeded based on the data's structure. Think of all the nested subqueries we can\nsave together!\n\n\nReferences\n\u00b6\n\n\n\n\nPostgres WITH Queries: \nhttps://www.postgresql.org/docs/9.3/static/queries-with.html\n\n\nWikipedia Fibonacci number: \nhttps://en.wikipedia.org/wiki/Fibonacci_number",
            "title": "What the SQL?!? Recursive"
        },
        {
            "location": "/blog/2017/what-the-sql-recursive/#what-the-sql-recursive",
            "text": "Today's \"What the SQL?!?\" features the keyword  RECURSIVE . This clause allows\nus to elegantly select results from the previous results from the previous results\nfrom the previous results...   Please note, our target database is PostgreSQL. These examples may work with\nother databases, but might need some massaging to get them to work properly.\nSearch online for the specific vendor's documentation if errors pop up.\nTry searching for \"RECURSIVE queries {{DB VENDOR NAME}}\". Not all database vendors\nsupport the keyword  RECURSIVE .",
            "title": "What the SQL?!? Recursive"
        },
        {
            "location": "/blog/2017/what-the-sql-recursive/#fibonacci-sequence",
            "text": "According to  Wikipedia :   In mathematics, the Fibonacci numbers are the numbers in the following integer\nsequence, called the Fibonacci sequence, and characterized by the fact that\nevery number after the first two is the sum of the two preceding ones:  1, 1, 2, 3, 5, 8, 13, 21, 34, 55 ...",
            "title": "Fibonacci Sequence"
        },
        {
            "location": "/blog/2017/what-the-sql-recursive/#sql-solution",
            "text": "Our SQL solution will make use of the  RECURSIVE   CTE \nkeyword.  WITH   RECURSIVE   t ( i ,   fi ,   fib )   AS   ( \n   SELECT \n     1 , \n     0 :: NUMERIC , \n     1 :: NUMERIC \n   UNION   ALL \n   SELECT \n     i   +   1 , \n     fib , \n     fi   +   fib \n   FROM   t \n   WHERE   i   <   10  )  SELECT \n   i , \n   fib  FROM   t",
            "title": "SQL Solution"
        },
        {
            "location": "/blog/2017/what-the-sql-recursive/#the-ins-and-outs",
            "text": "Here's some inline colorful comments to explain the sections:  Maybe arrows will help a little more with the flow of data:",
            "title": "The Ins and Outs"
        },
        {
            "location": "/blog/2017/what-the-sql-recursive/#fibonacci-results",
            "text": "When you run the query, you'll get the following results:   i  | fib\n----+-----\n  1 |   1\n  2 |   1\n  3 |   2\n  4 |   3\n  5 |   5\n  6 |   8\n  7 |  13\n  8 |  21\n  9 |  34\n 10 |  55\n\n(10 rows)  If you want to see the results for a high number, update  i < 10  to a higher\nvalue. If you go above  i < 793 , Postgres gives up and returns  Nan  which means Not a number  which means the computed value is larger than your computer can\nhandle and still treat like a number. Sorry, get a new computer or work with\nnumbers less than 166 digits long.",
            "title": "Fibonacci Results"
        },
        {
            "location": "/blog/2017/what-the-sql-recursive/#a-real-world-example-with-hierarchical-data",
            "text": "Fibonacci sequence is nice and all, but you have real data concerns. You're\nthinking, \"Show me the DATA!\". So here's the data...  -- Build `sample_people` table  CREATE   TABLE   sample_people   AS \n   SELECT \n     column1 :: int       AS   id , \n     column2 :: varchar   AS   name , \n     column3 :: int       AS   parent_id \n   FROM   ( \n     VALUES \n       ( 0 ,   'Root'   ,   null ), \n       ( 1 ,   'Alice' ,   0 ), \n       ( 2 ,   'Bob'    ,   1 ), \n       ( 3 ,   'Cat'    ,   1 ), \n       ( 4 ,   'Dan'    ,   3 ), \n       ( 5 ,   'Evan'   ,   0 ), \n       ( 6 ,   'Frank' ,   5 ) \n   )   as   t \n   ;  SELECT   *   FROM   sample_people ;  --  id | name  | parent_id  -- ----+-------+-----------  --   0 | Root  |  --   1 | Alice |         0  --   2 | Bob   |         1  --   3 | Cat   |         1  --   4 | Dan   |         3  --   5 | Evan  |         0  --   6 | Frank |         5   Our  sample_people  table represents a person by name and that person may have a\nparent. The parent of all the parents is  Root .  And finally our recursive query to get a nice display of the hierarchy.  WITH   RECURSIVE   tree   -- `tree` is the table alias. \n                     -- It must be used as part of the `UNION` statement. \n   AS   ( \n   -- 1) Initialize table with all the top level rows. \n   --    Anything without a parent is a parent. Is that apparent? \n   SELECT \n     0   AS   level ,          -- 2) Set the level to 0. \n     sample_people . *      -- 3) Return the initial row \n   FROM   sample_people \n   WHERE   parent_id   =   0    -- 4) Top level doesn't have a parent. \n   UNION   ALL \n   -- 5) Union all the parents with their children. \n   SELECT \n     tree . level   +   1 ,      -- 6) Increment the level every time we loop. \n     sample_people . *      -- 7) Return the current row - the child row.  \n   FROM   tree      -- 8) `tree` is populated with the previous results. \n                --    Every loop gets a new record from current result. \n   JOIN   sample_people   ON   sample_people . parent_id   =   tree . id  )  SELECT \n   repeat ( ' ' ,   level   *   4 )   ||   name   AS   display  FROM   tree  ORDER   BY   level ,   name  ;  --    display  -- -------------  --  Alice  --  Evan  --      Bob  --      Cat  --      Frank  --          Dan  -- (6 rows)",
            "title": "A Real World Example with Hierarchical Data"
        },
        {
            "location": "/blog/2017/what-the-sql-recursive/#bait-and-switch",
            "text": "RECURSIVE  is not actually recursive. It isn't a function calling itself.\nSorry, not sorry. It's much closer to a  while  loop. Here's what Postgres has to say about it:   Note: Strictly speaking, this process is  iteration  not recursion, but RECURSIVE\nis the terminology chosen by the SQL standards committee. [emphasis added]",
            "title": "Bait and Switch"
        },
        {
            "location": "/blog/2017/what-the-sql-recursive/#closing",
            "text": "So the next time you try to crawl a hierarchy of data, we hope  RECURSIVE  comes\nto mind. It's a great way to save round trips to the database and query what is\nneeded based on the data's structure. Think of all the nested subqueries we can\nsave together!",
            "title": "Closing"
        },
        {
            "location": "/blog/2017/what-the-sql-recursive/#references",
            "text": "Postgres WITH Queries:  https://www.postgresql.org/docs/9.3/static/queries-with.html  Wikipedia Fibonacci number:  https://en.wikipedia.org/wiki/Fibonacci_number",
            "title": "References"
        },
        {
            "location": "/blog/2017/vim-send-text/",
            "text": "Vim Send Text\n\u00b6\n\n\n\n\nAfter pairing with some Sublime users, I noticed a neat feature. Or more\naccurately, they were rubbing it in my face that their cute editor was better\nthan mine. The feature was \nSendText\n. Well, I\ncouldn't let Sublime users have all the fun, and apparently neither could a few\nother people.\n\n\n\n\n\nHistory\n\u00b6\n\n\nThere have been a few other implementations at this feature. These\nimplementations sent the text to a screen or tmux split. Since I don't use\neither, I couldn't use them a la carte.\n\n\n\n\nhttps://github.com/vim-scripts/tslime.vim\n\n\nhttps://github.com/jpalardy/vim-slime\n\n\nhttps://github.com/ervandew/screen\n\n\n\n\nThis next implementation was good. It's only flaw, IMHO, was it's mappings and\nnaming. The naming \"ISlime2\" is impossible for me to type on the first try. The\nmappings overlapped my existing mappings.\n\nISlime2\n did all the hard work\nAppleScript work and provides the Vim function to pass into the AppleScript.\n\n\nEnter \nvim-sendtext\n.\n\nvim-sendtext\n is a fork of \nISlime2\n.\nMy fork removes all the mappings, exposes useful internal functions, and adds\nrecommended mappings to the README.md.\n\n\nRecommended Mappings\n\u00b6\n\n\n\" Send current line\n\n\nnnoremap\n \n<\nsilent\n>\n \n<\nLeader\n>\ni\n<\nCR\n>\n :SendTextCurrentLine\n<\nCR\n>\n\n\n\n\" Send in/around text object - operation pending\n\n\nnnoremap\n \n<\nsilent\n>\n \n<\nLeader\n>\ni\n :\nset\n \nopfunc\n=\nsendtext#iTermSendOperator\n<\nCR\n>\ng\n@\n\n\n\" Send visual selection\n\n\nvnoremap\n \n<\nsilent\n>\n \n<\nLeader\n>\ni\n :\n<\nC\n-\nu\n>\ncall\n sendtext#iTermSendOperator\n(\nvisualmode\n(),\n \n1\n)<\nCR\n>\n\n\n\n\" Move to next line then send it\n\n\nnnoremap\n \n<\nsilent\n>\n \n<\nLeader\n>\nij\n :SendTextNextLine\n<\nCR\n>\n\n\n\n\" Move to previous line then send it\n\n\nnnoremap\n \n<\nsilent\n>\n \n<\nLeader\n>\nik :SendTextPreviousLine\n<\nCR\n>\n\n\n\n\n\nVim Operator Pending\n\u00b6\n\n\nOne of the main reasons to use Vim is Operator pending.  It's at the heart of\n\nvip\n, \ndip\n, \nciw\n, etc.\n\nvim-sendtext\n provides an operator\npending function so we can logically do \n{SEND}ap\n, \n{SEND}ip\n, \n{SEND}if\n, etc.\nThe identical function works in visual mode to help build confidence in our text\nobject targets.\n\n\nTo read more about operator pending functions and how to create them try:\n\n:\nh\n map\n-\noperator\n\n\n\nConclusion\n\u00b6\n\n\nHope \nvim-sendtext\n can remove some\nfeature envy from Sublime. Happy console hacking!",
            "title": "Vim Send Text"
        },
        {
            "location": "/blog/2017/vim-send-text/#vim-send-text",
            "text": "After pairing with some Sublime users, I noticed a neat feature. Or more\naccurately, they were rubbing it in my face that their cute editor was better\nthan mine. The feature was  SendText . Well, I\ncouldn't let Sublime users have all the fun, and apparently neither could a few\nother people.",
            "title": "Vim Send Text"
        },
        {
            "location": "/blog/2017/vim-send-text/#history",
            "text": "There have been a few other implementations at this feature. These\nimplementations sent the text to a screen or tmux split. Since I don't use\neither, I couldn't use them a la carte.   https://github.com/vim-scripts/tslime.vim  https://github.com/jpalardy/vim-slime  https://github.com/ervandew/screen   This next implementation was good. It's only flaw, IMHO, was it's mappings and\nnaming. The naming \"ISlime2\" is impossible for me to type on the first try. The\nmappings overlapped my existing mappings. ISlime2  did all the hard work\nAppleScript work and provides the Vim function to pass into the AppleScript.  Enter  vim-sendtext . vim-sendtext  is a fork of  ISlime2 .\nMy fork removes all the mappings, exposes useful internal functions, and adds\nrecommended mappings to the README.md.",
            "title": "History"
        },
        {
            "location": "/blog/2017/vim-send-text/#recommended-mappings",
            "text": "\" Send current line  nnoremap   < silent >   < Leader > i < CR >  :SendTextCurrentLine < CR >  \" Send in/around text object - operation pending  nnoremap   < silent >   < Leader > i  : set   opfunc = sendtext#iTermSendOperator < CR > g @ \" Send visual selection  vnoremap   < silent >   < Leader > i  : < C - u > call  sendtext#iTermSendOperator ( visualmode (),   1 )< CR >  \" Move to next line then send it  nnoremap   < silent >   < Leader > ij  :SendTextNextLine < CR >  \" Move to previous line then send it  nnoremap   < silent >   < Leader > ik :SendTextPreviousLine < CR >",
            "title": "Recommended Mappings"
        },
        {
            "location": "/blog/2017/vim-send-text/#vim-operator-pending",
            "text": "One of the main reasons to use Vim is Operator pending.  It's at the heart of vip ,  dip ,  ciw , etc. vim-sendtext  provides an operator\npending function so we can logically do  {SEND}ap ,  {SEND}ip ,  {SEND}if , etc.\nThe identical function works in visual mode to help build confidence in our text\nobject targets.  To read more about operator pending functions and how to create them try: : h  map - operator",
            "title": "Vim Operator Pending"
        },
        {
            "location": "/blog/2017/vim-send-text/#conclusion",
            "text": "Hope  vim-sendtext  can remove some\nfeature envy from Sublime. Happy console hacking!",
            "title": "Conclusion"
        },
        {
            "location": "/blog/2016/negative-modulo/",
            "text": "PSA: Vim Modulo '%' Returns Negative Numbers!\n\u00b6\n\n\n\n\nSurprise! Vim has the same modulo bug as Javascript. Some say it's not a bug,\nbut if Ruby and Google Calculator is wrong, I don't want to be right.\n\n\n\n\n\n\n\nVim, \n:echo -10 % 3\n returns \n-1\n\n\nJavascript \n-10 % 3\n returns \n-1\n\n\nRuby/IRB, \n-10 % 3\n returns \n2\n \n-- my expectation is here\n\n\n\n\nSolution\n\u00b6\n\n\nAdd this function some where in your Vimscript and throw away \n%\n.\n\n\n\" ((n % m) + m) % m` or `((-10 % 3) + 3) % 3` returns `2`\n\n\nfunction\n!\n s:\nmod\n(\nn\n,\nm\n)\n\n  \nreturn\n \n((\na\n:\nn\n % \na\n:\nm\n)\n \n+\n \na\n:\nm\n)\n % \na\n:\nm\n\n\nendfunction\n\n\n\n\n\nI hope this saves someone some time somewhere out there. It's an hour I'll never\nget back, but happy to give back.\n\n\nReferences\n\n\n\n\nhttps://www.google.com/#q=-10+%25+3\n\n\nhttp://vimdoc.sourceforge.net/htmldoc/eval.html#expr6\n\n\nhttp://math.stackexchange.com/questions/519845/modulo-of-a-negative-number/519856\n\n\nhttps://en.wikipedia.org/wiki/Modulo_operation\n\n\nhttp://stackoverflow.com/questions/4467539/javascript-modulo-not-behaving",
            "title": "PSA: Vim Modulo '%' Returns Negative Numbers!"
        },
        {
            "location": "/blog/2016/negative-modulo/#psa-vim-modulo-returns-negative-numbers",
            "text": "Surprise! Vim has the same modulo bug as Javascript. Some say it's not a bug,\nbut if Ruby and Google Calculator is wrong, I don't want to be right.    Vim,  :echo -10 % 3  returns  -1  Javascript  -10 % 3  returns  -1  Ruby/IRB,  -10 % 3  returns  2   -- my expectation is here",
            "title": "PSA: Vim Modulo '%' Returns Negative Numbers!"
        },
        {
            "location": "/blog/2016/negative-modulo/#solution",
            "text": "Add this function some where in your Vimscript and throw away  % .  \" ((n % m) + m) % m` or `((-10 % 3) + 3) % 3` returns `2`  function !  s: mod ( n , m ) \n   return   (( a : n  %  a : m )   +   a : m )  %  a : m  endfunction   I hope this saves someone some time somewhere out there. It's an hour I'll never\nget back, but happy to give back.  References   https://www.google.com/#q=-10+%25+3  http://vimdoc.sourceforge.net/htmldoc/eval.html#expr6  http://math.stackexchange.com/questions/519845/modulo-of-a-negative-number/519856  https://en.wikipedia.org/wiki/Modulo_operation  http://stackoverflow.com/questions/4467539/javascript-modulo-not-behaving",
            "title": "Solution"
        },
        {
            "location": "/blog/2016/photography-lightening-talk/",
            "text": "Photography Refactored\n\u00b6\n\n\n\n\nSomeone convinced me to do a lightening talk about photography. Here's the slide deck.",
            "title": "Photography Refactored"
        },
        {
            "location": "/blog/2016/photography-lightening-talk/#photography-refactored",
            "text": "Someone convinced me to do a lightening talk about photography. Here's the slide deck.",
            "title": "Photography Refactored"
        },
        {
            "location": "/blog/2016/ruby-abuse/",
            "text": "Ruby Abuse: How Not to Write Ruby, But Still Have Fun\n\u00b6\n\n\n\n\nalias\n \n\u03bb\n \nlambda\n\n\n\nsadd\n    \n=\n \n\u03bb\n \n{\n|\nns\n,\n \na\n|\n   \n[*\nns\n,\n \na\n].\nsort\n                \n}\n\n\nhsort\n   \n=\n \n\u03bb\n \n{\n|\nh\n|\n       \nHash\n[\nh\n.\nsort\n]\n                 \n}\n\n\nhadd\n    \n=\n \n\u03bb\n \n{\n|\nh\n,\n \nn\n,\n \ng\n|\n \nh\n.\nmerge\n(\ng\n \n=>\n \nsadd\n.\n(\nh\n[\ng\n]\n,\n \nn\n))\n \n}\n\n\nschool\n  \n=\n \n\u03bb\n \n{\n|\ngs\n|\n      \nSchool\n.\nnew\n(\ngs\n)\n               \n}\n\n\n\nSchool\n \n=\n \nStruct\n.\nnew\n(\n:gs\n)\n \ndo\n\n  \ndefine_method\n \n:add\n,\n     \n\u03bb\n \n{\n|\nn\n,\n \ng\n|\n \n(\nschool\n \n.\n \n(\nhsort\n \n.\n \n(\nhadd\n \n.\n \n(\nto_hash\n,\n \nn\n,\n \ng\n))))\n \n}\n\n  \ndefine_method\n \n:to_hash\n,\n \n\u03bb\n \n{\n|\n \n|\n    \ngs\n \n||\n \n{}\n \n}\n\n  \ndefine_method\n \n:grade\n,\n   \n\u03bb\n \n{\n|\ng\n|\n    \nto_hash\n[\ng\n]\n \n||\n \n[]\n \n}\n\n\nend",
            "title": "Ruby Abuse: How Not to Write Ruby, But Still Have Fun"
        },
        {
            "location": "/blog/2016/ruby-abuse/#ruby-abuse-how-not-to-write-ruby-but-still-have-fun",
            "text": "alias   \u03bb   lambda  sadd      =   \u03bb   { | ns ,   a |     [* ns ,   a ]. sort                  }  hsort     =   \u03bb   { | h |         Hash [ h . sort ]                   }  hadd      =   \u03bb   { | h ,   n ,   g |   h . merge ( g   =>   sadd . ( h [ g ] ,   n ))   }  school    =   \u03bb   { | gs |        School . new ( gs )                 }  School   =   Struct . new ( :gs )   do \n   define_method   :add ,       \u03bb   { | n ,   g |   ( school   .   ( hsort   .   ( hadd   .   ( to_hash ,   n ,   g ))))   } \n   define_method   :to_hash ,   \u03bb   { |   |      gs   ||   {}   } \n   define_method   :grade ,     \u03bb   { | g |      to_hash [ g ]   ||   []   }  end",
            "title": "Ruby Abuse: How Not to Write Ruby, But Still Have Fun"
        },
        {
            "location": "/blog/2016/making-a-window-submode/",
            "text": "Making a Window Submode in Vim\n\u00b6\n\n\n\nI found a plugin that is changing my Vim-tire life! This\n\nplugin\n is so awesome it should be\nbuilt into default Vim. What does the \nplugin\n\ndo? It enables the creation of new submodes. Why would a person want \nmore\n modes?!?\nIsn't dealing with modes the main deterrent for new Vim users? Isn't Normal,\nInsert, Command-line, Visual, Select, and Operator-pending enough? (Did I miss one?)\nLet's try out a new submode and see what happens.\n\n\n\nProblem\n\u00b6\n\n\nWindow commands are prefixed with \n<C-w>\n. Want to create a horizontal split?\nTry \n<C-w>s\n, didn't mean to do that and want to do vertical split? \n<C-w>q<C-w>v\n.\nWant to resize the vertical split \n50<C-w>>\n? Too wide? Narrow it with \n5<C-w><\n.\nMove back to the other window? \n<C-w>p\n or \n<C-w>w\n.\n\n\nAre your fingers getting tired? After I get the windows just right using default\nmappings my fingers are crying for mercy.\n\n\nHere's a short list of common default window commands:\n\n\" Change window focus\n\n{\nn\n}\n<\nC\n-\nw\n>\nh\n   move cursor \nleft\n  {\nn\n} \nwindow\n\n{\nn\n}\n<\nC\n-\nw\n>\nl\n   move cursor \nright\n {\nn\n} \nwindow\n\n{\nn\n}\n<\nC\n-\nw\n>\nj\n   move cursor down  {\nn\n} \nwindow\n\n{\nn\n}\n<\nC\n-\nw\n>\nk\n   move cursor \nup\n    {\nn\n} \nwindow\n\n\n\n\" Move window\n\n\n<\nC\n-\nw\n>\nH   move \nwindow\n far \nleft\n\n\n<\nC\n-\nw\n>\nL   move \nwindow\n far \nright\n\n\n<\nC\n-\nw\n>\nJ   move \nwindow\n far bottom\n\n<\nC\n-\nw\n>\nK   move \nwindow\n far \ntop\n\n\n\n\" Change size\n\n{\nn\n}\n<\nC\n-\nw\n>+\n  increase height by {\nn\n} rows\n{\nn\n}\n<\nC\n-\nw\n>-\n  decrease height by {\nn\n} rows\n{\nn\n}\n<\nC\n-\nw\n><\n  decrease width by {\nn\n} \ncolumns\n\n{\nn\n}\n<\nC\n-\nw\n>>\n  increase width by {\nn\n} \ncolumns\n\n   \n<\nC\n-\nw\n>|\n  maximize width\n   \n<\nC\n-\nw\n>\n_  maximize height\n   \n<\nC\n-\nw\n>=\n  equalize sizes\n\n\n\nFor a comprehensive list of window commands try \n:help windows.txt\n.\n\n\nSolution A\n\u00b6\n\n\nThe most common solution to window-command-itis is to map other keys to these\ncommon actions so to include the \n<C-w>\n prefix.\n\n\nFrom \nspf13-vim\n:\n\nmap \n<\nC\n-\nJ\n>\n \n<\nC\n-\nW\n>\nj\n<\nC\n-\nW\n>\n_\nmap \n<\nC\n-\nK\n>\n \n<\nC\n-\nW\n>\nk\n<\nC\n-\nW\n>\n_\nmap \n<\nC\n-\nL\n>\n \n<\nC\n-\nW\n>\nl\n<\nC\n-\nW\n>\n_\nmap \n<\nC\n-\nH\n>\n \n<\nC\n-\nW\n>\nh\n<\nC\n-\nW\n>\n_\n\n\" Note: They go one extra by maximizing the height after entering the split.\n\n\n\n\nFrom \nThoughbot\n:\n\nnnoremap\n \n<\nC\n-\nJ\n>\n \n<\nC\n-\nW\n><\nC\n-\nJ\n>\n\n\nnnoremap\n \n<\nC\n-\nK\n>\n \n<\nC\n-\nW\n><\nC\n-\nK\n>\n\n\nnnoremap\n \n<\nC\n-\nL\n>\n \n<\nC\n-\nW\n><\nC\n-\nL\n>\n\n\nnnoremap\n \n<\nC\n-\nH\n>\n \n<\nC\n-\nW\n><\nC\n-\nH\n>\n\n\n\n\nThis has been the accepted solution for most, but it takes away so many\nconvenient keys. And in some cases, it even overrides default behaviour.\n\n<C-L>\n, I miss you. \nC-H\n, isn't that also \n<BS>\n? Guess I won't be using\nyou either.\n\n\nSolution B - Submode to the Rescue\n\u00b6\n\n\nThis entire solution depends on \nkana/vim-submode\n,\nI consider it one of Japan's national treasures along with ninjas and ramen.\nUnfortunately, Kana's example use of submodes is a little underwhelming:\nundo/redo using \ng-\n and \ng+\n. I agree with the author that using \ng-\n and\n\ng+\n is not convenient, and using \ng++++-++-+\n is easier, but the solution\nfor that was simply \nu\n and \n<C-R>\n. I feel a better application for a new\nsubmode is window management. Imagine if resizing a split was \n<C-w>++++++++\n\nor \n<C-w>------=->>>>>>>><>\n or changing cursor location was \n<C-w>hjlll\n\nor moving was \n<C-w>HjKLkjh\n. Imagine no more!\n\n\nFirst, install the plugin. If you're not sure how to install a plugin, try\n\njunegunn/vim-plug\n. Next, add the\nfollowing to your \n$MYVIMRC\n.\n\n\n\" A message will appear in the message line when you're in a submode\n\n\n\" and stay there until the mode has existed.\n\n\nlet\n \ng\n:submode_always_show_submode \n=\n \n1\n\n\n\n\" We're taking over the default <C-w> setting. Don't worry we'll do\n\n\n\" our best to put back the default functionality.\n\n\ncall\n submode#enter_with\n(\n'window'\n,\n \n'n'\n,\n \n''\n,\n \n'<C-w>'\n)\n\n\n\n\" Note: <C-c> will also get you out to the mode without this mapping.\n\n\n\" Note: <C-[> also behaves as <ESC>\n\n\ncall\n submode#leave_with\n(\n'window'\n,\n \n'n'\n,\n \n''\n,\n \n'<ESC>'\n)\n\n\n\n\" Go through every letter\n\n\nfor\n \nkey\n \nin\n [\n'a'\n,\n'b'\n,\n'c'\n,\n'd'\n,\n'e'\n,\n'f'\n,\n'g'\n,\n'h'\n,\n'i'\n,\n'j'\n,\n'k'\n,\n'l'\n,\n'm'\n,\n\n\\           \n'n'\n,\n'o'\n,\n'p'\n,\n'q'\n,\n'r'\n,\n's'\n,\n't'\n,\n'u'\n,\n'v'\n,\n'w'\n,\n'x'\n,\n'y'\n,\n'z'\n]\n\n  \" maps lowercase, uppercase and <C-key>\n\n  \ncall\n submode#map\n(\n'window'\n,\n \n'n'\n,\n \n''\n,\n \nkey\n,\n \n'<C-w>'\n . \nkey\n)\n\n  \ncall\n submode#map\n(\n'window'\n,\n \n'n'\n,\n \n''\n,\n toupper\n(\nkey\n),\n \n'<C-w>'\n . toupper\n(\nkey\n))\n\n  \ncall\n submode#map\n(\n'window'\n,\n \n'n'\n,\n \n''\n,\n \n'<C-'\n . \nkey\n . \n'>'\n,\n \n'<C-w>'\n . \n'<C-'\n.\nkey\n . \n'>'\n)\n\n\nendfor\n\n\n\" Go through symbols. Sadly, '|', not supported in submode plugin.\n\n\nfor\n \nkey\n \nin\n [\n'='\n,\n'_'\n,\n'+'\n,\n'-'\n,\n'<'\n,\n'>'\n]\n  \ncall\n submode#map\n(\n'window'\n,\n \n'n'\n,\n \n''\n,\n \nkey\n,\n \n'<C-w>'\n . \nkey\n)\n\n\nendfor\n\n\n\n\" Old way, just in case.\n\n\nnnoremap\n \n<\nLeader\n>\nw\n \n<\nC\n-\nw\n>\n\n\n\n\n\nAfter \n:source $MYVIMRC\n, you'll have a glorious new submode in Vim.\nYou can see I named it \nwindow\n mode. Can you guess how to get into \nwindow\n mode?\n\n<C-w>\n, the normal prefix used to do any \nwincmd\n. If this is too drastic, feel\nfree to change line #7 to something else. Just replace \n<C-w>\n with a different\nnormal mapping.\n\n\nLet's give it a test drive.\n\n\nI know you can't see what keys I'm pressing, but I guarantee I only pressed\n\n<C-w>\n once. I also didn't have to remember any new key bindings. The\nhesitation in the demo is the resistance to hitting \n<C-w>\n every time, which\nI'll get over soon enough.\n\n\nBonus Mappings\n\u00b6\n\n\nBut wait there's more! In case I haven't provided enough tips for one post,\nhere's the overrides I have in \n$MYVIMRC\n to make windowing even better.\n\n\n\" I don't like <C-w>q, <C-w>c won't exit Vim when it's the last window.\n\n\ncall\n submode#map\n(\n'window'\n,\n \n'n'\n,\n \n''\n,\n \n'q'\n,\n \n'<C-w>c'\n)\n\n\ncall\n submode#map\n(\n'window'\n,\n \n'n'\n,\n \n''\n,\n \n'<C-q>'\n,\n \n'<C-w>c'\n)\n\n\n\n\" <lowercase-pipe> sets the width to 80 columns, pipe (<S-\\>) by default\n\n\n\" maximizes the width.\n\n\ncall\n submode#map\n(\n'window'\n,\n \n'n'\n,\n \n''\n,\n \n'\\'\n,\n \n':vertical resize 80<CR>'\n)\n\n\n\n\" Resize faster\n\n\ncall\n submode#map\n(\n'window'\n,\n \n'n'\n,\n \n''\n,\n \n'+'\n,\n \n'3<C-w>+'\n)\n\n\ncall\n submode#map\n(\n'window'\n,\n \n'n'\n,\n \n''\n,\n \n'-'\n,\n \n'3<C-w>-'\n)\n\n\ncall\n submode#map\n(\n'window'\n,\n \n'n'\n,\n \n''\n,\n \n'<'\n,\n \n'10<C-w><'\n)\n\n\ncall\n submode#map\n(\n'window'\n,\n \n'n'\n,\n \n''\n,\n \n'>'\n,\n \n'10<C-w>>'\n)\n\n\n\n\n\nRainbows without Unicorns\n\u00b6\n\n\nWhile learning this new way of windowing, there have been a few negatives:\n\n\n\n\n\n\nI forget that I'm in window mode and get disoriented when I think I'm moving\n   the cursor within a buffer, but it jumps around to other splits.\n\n\n\n\n\n\nFor one off window commands, I have to hit an extra key to get out of window\n   mode or wait for the timeout.\n\n\n\n\n\n\nWhen I use some one else's computer, I'm useless.\n\n\n\n\n\n\nI think most of these annoyances will go away with time, and the benefits\novertime in keystroke savings are non-trivial. As for #3, regardless of submodes,\nthe brain freeze will never go away, because no one thinks as strangely as me,\nand that's a Good Thing\u2122.\n\n\nThanks\n\u00b6\n\n\nShout-out to Kana Natsuno, @kana1, \nhttp://whileimautomaton.net/\n, \nhttps://github.com/kana\n . None\nof this awesomeness would be possible without \nhttps://github.com/kana/vim-submode\n . She\nmakes some totally sweet plug-ins. Check out her stuff. You won't regret it!\n\n\nLet me know what you think. Am I crazy? What other things deserve a submode?\nHit me up in the comments below! Thanks for reading!",
            "title": "Making a Window Submode in Vim"
        },
        {
            "location": "/blog/2016/making-a-window-submode/#making-a-window-submode-in-vim",
            "text": "I found a plugin that is changing my Vim-tire life! This plugin  is so awesome it should be\nbuilt into default Vim. What does the  plugin \ndo? It enables the creation of new submodes. Why would a person want  more  modes?!?\nIsn't dealing with modes the main deterrent for new Vim users? Isn't Normal,\nInsert, Command-line, Visual, Select, and Operator-pending enough? (Did I miss one?)\nLet's try out a new submode and see what happens.",
            "title": "Making a Window Submode in Vim"
        },
        {
            "location": "/blog/2016/making-a-window-submode/#problem",
            "text": "Window commands are prefixed with  <C-w> . Want to create a horizontal split?\nTry  <C-w>s , didn't mean to do that and want to do vertical split?  <C-w>q<C-w>v .\nWant to resize the vertical split  50<C-w>> ? Too wide? Narrow it with  5<C-w>< .\nMove back to the other window?  <C-w>p  or  <C-w>w .  Are your fingers getting tired? After I get the windows just right using default\nmappings my fingers are crying for mercy.  Here's a short list of common default window commands: \" Change window focus \n{ n } < C - w > h    move cursor  left   { n }  window \n{ n } < C - w > l    move cursor  right  { n }  window \n{ n } < C - w > j    move cursor down  { n }  window \n{ n } < C - w > k    move cursor  up     { n }  window  \" Move window  < C - w > H   move  window  far  left  < C - w > L   move  window  far  right  < C - w > J   move  window  far bottom < C - w > K   move  window  far  top  \" Change size \n{ n } < C - w >+   increase height by { n } rows\n{ n } < C - w >-   decrease height by { n } rows\n{ n } < C - w ><   decrease width by { n }  columns \n{ n } < C - w >>   increase width by { n }  columns \n    < C - w >|   maximize width\n    < C - w > _  maximize height\n    < C - w >=   equalize sizes  For a comprehensive list of window commands try  :help windows.txt .",
            "title": "Problem"
        },
        {
            "location": "/blog/2016/making-a-window-submode/#solution-a",
            "text": "The most common solution to window-command-itis is to map other keys to these\ncommon actions so to include the  <C-w>  prefix.  From  spf13-vim : map  < C - J >   < C - W > j < C - W > _\nmap  < C - K >   < C - W > k < C - W > _\nmap  < C - L >   < C - W > l < C - W > _\nmap  < C - H >   < C - W > h < C - W > _ \" Note: They go one extra by maximizing the height after entering the split.   From  Thoughbot : nnoremap   < C - J >   < C - W >< C - J >  nnoremap   < C - K >   < C - W >< C - K >  nnoremap   < C - L >   < C - W >< C - L >  nnoremap   < C - H >   < C - W >< C - H >   This has been the accepted solution for most, but it takes away so many\nconvenient keys. And in some cases, it even overrides default behaviour. <C-L> , I miss you.  C-H , isn't that also  <BS> ? Guess I won't be using\nyou either.",
            "title": "Solution A"
        },
        {
            "location": "/blog/2016/making-a-window-submode/#solution-b-submode-to-the-rescue",
            "text": "This entire solution depends on  kana/vim-submode ,\nI consider it one of Japan's national treasures along with ninjas and ramen.\nUnfortunately, Kana's example use of submodes is a little underwhelming:\nundo/redo using  g-  and  g+ . I agree with the author that using  g-  and g+  is not convenient, and using  g++++-++-+  is easier, but the solution\nfor that was simply  u  and  <C-R> . I feel a better application for a new\nsubmode is window management. Imagine if resizing a split was  <C-w>++++++++ \nor  <C-w>------=->>>>>>>><>  or changing cursor location was  <C-w>hjlll \nor moving was  <C-w>HjKLkjh . Imagine no more!  First, install the plugin. If you're not sure how to install a plugin, try junegunn/vim-plug . Next, add the\nfollowing to your  $MYVIMRC .  \" A message will appear in the message line when you're in a submode  \" and stay there until the mode has existed.  let   g :submode_always_show_submode  =   1  \" We're taking over the default <C-w> setting. Don't worry we'll do  \" our best to put back the default functionality.  call  submode#enter_with ( 'window' ,   'n' ,   '' ,   '<C-w>' )  \" Note: <C-c> will also get you out to the mode without this mapping.  \" Note: <C-[> also behaves as <ESC>  call  submode#leave_with ( 'window' ,   'n' ,   '' ,   '<ESC>' )  \" Go through every letter  for   key   in  [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' , 'i' , 'j' , 'k' , 'l' , 'm' , \n\\            'n' , 'o' , 'p' , 'q' , 'r' , 's' , 't' , 'u' , 'v' , 'w' , 'x' , 'y' , 'z' ]   \" maps lowercase, uppercase and <C-key> \n   call  submode#map ( 'window' ,   'n' ,   '' ,   key ,   '<C-w>'  .  key ) \n   call  submode#map ( 'window' ,   'n' ,   '' ,  toupper ( key ),   '<C-w>'  . toupper ( key )) \n   call  submode#map ( 'window' ,   'n' ,   '' ,   '<C-'  .  key  .  '>' ,   '<C-w>'  .  '<C-' . key  .  '>' )  endfor  \" Go through symbols. Sadly, '|', not supported in submode plugin.  for   key   in  [ '=' , '_' , '+' , '-' , '<' , '>' ]\n   call  submode#map ( 'window' ,   'n' ,   '' ,   key ,   '<C-w>'  .  key )  endfor  \" Old way, just in case.  nnoremap   < Leader > w   < C - w >   After  :source $MYVIMRC , you'll have a glorious new submode in Vim.\nYou can see I named it  window  mode. Can you guess how to get into  window  mode? <C-w> , the normal prefix used to do any  wincmd . If this is too drastic, feel\nfree to change line #7 to something else. Just replace  <C-w>  with a different\nnormal mapping.  Let's give it a test drive. \nI know you can't see what keys I'm pressing, but I guarantee I only pressed <C-w>  once. I also didn't have to remember any new key bindings. The\nhesitation in the demo is the resistance to hitting  <C-w>  every time, which\nI'll get over soon enough.",
            "title": "Solution B - Submode to the Rescue"
        },
        {
            "location": "/blog/2016/making-a-window-submode/#bonus-mappings",
            "text": "But wait there's more! In case I haven't provided enough tips for one post,\nhere's the overrides I have in  $MYVIMRC  to make windowing even better.  \" I don't like <C-w>q, <C-w>c won't exit Vim when it's the last window.  call  submode#map ( 'window' ,   'n' ,   '' ,   'q' ,   '<C-w>c' )  call  submode#map ( 'window' ,   'n' ,   '' ,   '<C-q>' ,   '<C-w>c' )  \" <lowercase-pipe> sets the width to 80 columns, pipe (<S-\\>) by default  \" maximizes the width.  call  submode#map ( 'window' ,   'n' ,   '' ,   '\\' ,   ':vertical resize 80<CR>' )  \" Resize faster  call  submode#map ( 'window' ,   'n' ,   '' ,   '+' ,   '3<C-w>+' )  call  submode#map ( 'window' ,   'n' ,   '' ,   '-' ,   '3<C-w>-' )  call  submode#map ( 'window' ,   'n' ,   '' ,   '<' ,   '10<C-w><' )  call  submode#map ( 'window' ,   'n' ,   '' ,   '>' ,   '10<C-w>>' )",
            "title": "Bonus Mappings"
        },
        {
            "location": "/blog/2016/making-a-window-submode/#rainbows-without-unicorns",
            "text": "While learning this new way of windowing, there have been a few negatives:    I forget that I'm in window mode and get disoriented when I think I'm moving\n   the cursor within a buffer, but it jumps around to other splits.    For one off window commands, I have to hit an extra key to get out of window\n   mode or wait for the timeout.    When I use some one else's computer, I'm useless.    I think most of these annoyances will go away with time, and the benefits\novertime in keystroke savings are non-trivial. As for #3, regardless of submodes,\nthe brain freeze will never go away, because no one thinks as strangely as me,\nand that's a Good Thing\u2122.",
            "title": "Rainbows without Unicorns"
        },
        {
            "location": "/blog/2016/making-a-window-submode/#thanks",
            "text": "Shout-out to Kana Natsuno, @kana1,  http://whileimautomaton.net/ ,  https://github.com/kana  . None\nof this awesomeness would be possible without  https://github.com/kana/vim-submode  . She\nmakes some totally sweet plug-ins. Check out her stuff. You won't regret it!  Let me know what you think. Am I crazy? What other things deserve a submode?\nHit me up in the comments below! Thanks for reading!",
            "title": "Thanks"
        },
        {
            "location": "/blog/2016/ansi-codes-with-character/",
            "text": "ANSI Codes with Character\n\u00b6\n\n\nThis was a lightening talk given to the office about ANSI Escape Codes. Most of\nthe time, all 5 minutes of it, was spent explaining the code snippets.\n\n\n\n\n\nWiki about ANSI Codes\n\n\nWhat is an ANSI code?\n\u00b6\n\n\nANSI Escape Codes are a nearly universal means of embedding display options in\ncomputer terminals.\n\n\n\\e[\n is how to tell the terminal we're giving it a command instead just\noutputting text. \n\n\nWhat does that mean?!? Let the examples do the talking.\n\n\nColor Examples\n\u00b6\n\n\necho\n -e \n\"\\e[2J\\e[32m It's not easy being green \\e[0m\"\n\n\necho\n -e \n\"\\e[2J\\e[31m Apples are red  \\e[0m\"\n\n\n\n\n\n(\n30\n..\n37\n)\n.\neach\n{\n|\ni\n|\n \nputs\n \n\"i: \n\\e\n[\n#{\ni\n}\nm \n#{\ni\n}\n \n\\e\n[0m\"\n}\n\n\n\n\n\nPosition Examples\n\u00b6\n\n\nx\n=\n`tput cols`\n.\nto_i\n\n\ny\n=\n`tput lines`\n.\nto_i\n\n\nloop\n \ndo\n\n  \nprint\n \n\"\n\\e\n[s\"\n \n# Save current cursor position\n\n  \nprint\n \n\"\n\\e\n[\n#{\nrand\n(\ny\n)\n}\n;\n#{\nrand\n(\nx\n)\n}\nH\"\n  \n# move to row/column\n\n  \nprint\n \n\"\ud83d\udca9\"\n    \n# print POOP!\n\n  \nprint\n \n\"\n\\e\n[u\"\n \n# restore position\n\n  \nsleep\n(\nrand\n)\n\n\nend\n\n\n\n\n\n# Ruby oneliner troll\n\nruby -e \n'x=`tput cols`.to_i; y=`tput lines`.to_i; loop {print \"\\e[s\\e[#{rand(y)};#{rand(x)}H\ud83d\udca9\\e[u\"; sleep(rand)}'\n\n\n\n\n\nANSI-nine Examples\n\u00b6\n\n\n# Poop-field\n\ncurl -s https://raw.githubusercontent.com/ddrscott/ansinine/master/stars \n|\n ruby\n\n\n# Smoke\n\ncurl -s https://raw.githubusercontent.com/ddrscott/ansinine/master/fire.rb \n|\n ruby",
            "title": "ANSI Codes with Character"
        },
        {
            "location": "/blog/2016/ansi-codes-with-character/#ansi-codes-with-character",
            "text": "This was a lightening talk given to the office about ANSI Escape Codes. Most of\nthe time, all 5 minutes of it, was spent explaining the code snippets.   Wiki about ANSI Codes",
            "title": "ANSI Codes with Character"
        },
        {
            "location": "/blog/2016/ansi-codes-with-character/#what-is-an-ansi-code",
            "text": "ANSI Escape Codes are a nearly universal means of embedding display options in\ncomputer terminals.  \\e[  is how to tell the terminal we're giving it a command instead just\noutputting text.   What does that mean?!? Let the examples do the talking.",
            "title": "What is an ANSI code?"
        },
        {
            "location": "/blog/2016/ansi-codes-with-character/#color-examples",
            "text": "echo  -e  \"\\e[2J\\e[32m It's not easy being green \\e[0m\"  echo  -e  \"\\e[2J\\e[31m Apples are red  \\e[0m\"   ( 30 .. 37 ) . each { | i |   puts   \"i:  \\e [ #{ i } m  #{ i }   \\e [0m\" }",
            "title": "Color Examples"
        },
        {
            "location": "/blog/2016/ansi-codes-with-character/#position-examples",
            "text": "x = `tput cols` . to_i  y = `tput lines` . to_i  loop   do \n   print   \" \\e [s\"   # Save current cursor position \n   print   \" \\e [ #{ rand ( y ) } ; #{ rand ( x ) } H\"    # move to row/column \n   print   \"\ud83d\udca9\"      # print POOP! \n   print   \" \\e [u\"   # restore position \n   sleep ( rand )  end   # Ruby oneliner troll \nruby -e  'x=`tput cols`.to_i; y=`tput lines`.to_i; loop {print \"\\e[s\\e[#{rand(y)};#{rand(x)}H\ud83d\udca9\\e[u\"; sleep(rand)}'",
            "title": "Position Examples"
        },
        {
            "location": "/blog/2016/ansi-codes-with-character/#ansi-nine-examples",
            "text": "# Poop-field \ncurl -s https://raw.githubusercontent.com/ddrscott/ansinine/master/stars  |  ruby # Smoke \ncurl -s https://raw.githubusercontent.com/ddrscott/ansinine/master/fire.rb  |  ruby",
            "title": "ANSI-nine Examples"
        },
        {
            "location": "/blog/2016/vim-toggle-movement/",
            "text": "Vim Toggle Movement: I Just Want to Go Home\n\u00b6\n\n\n\n\nI have a problem with the \n^\n key. I need its functionality, but its proximity is\ntoo far for either of my stubby index fingers. No vimrc change can physically move it\ncloser to me, but I have found a way to move its funtionality to another a key.\nA key which already knows how to go home. An alternate home. A home where my\nheart isn't. Enough drama, what's the problem?!?\n\n\n\n\n\nThe Problem\n\u00b6\n\n\nIn my daily coding, I have a deep seeded need to go to the first non-blank\ncharacter of a line. The only key that Vim provides for that functionality is \n^\n,\nthe hardest key to reach from the home row. A much more comfortable key to reach\nis \n0\n, but that shoots us past the first non-blank character all the way to\nthe left edge of the window. \n<Home>\n is the ugly step child of either option\nsince it's even harder to reach and takes us to the first column, too.\n\n\nIn case you don't believe me. Here's what the Vim document says:\n\n\n  0         To the first character of the line.  |exclusive|\n        motion.\n\n                *<Home>* *<kHome>*\n  <Home>  To the first character of the line.  |exclusive|\n        motion.  When moving up or down next, stay in same\n        TEXT column (if possible).  Most other commands stay\n        in the same SCREEN column.  <Home> works like \"1|\",\n        which differs from \"0\" when the line starts with a\n        <Tab>.\n\n                *^*\n  ^         To the first non-blank character of the line. |exclusive| motion.\n\n\n\n\nWhy can't I have a key that is easy to reach and takes me to the first\nnon-blank?!?\n\n\n\n\nI could swap the functionality of \n0\n and \n^\n:\n\n\nnnoremap 0 ^\nnnoremap ^ 0\n\n\n\n\nThis still forces me to reach for \n^\n when I need to need to get to that left\nedge. There must be a better way!\n\n\nThe Solution\n\u00b6\n\n\nLet's give \n0\n some super toggling powers. When I hit it the first time, I want it be\nbe like \n^\n. If I hit it again, I want it to finish its travels and go to the\nfirst column.\n\n\nSolution A\n\u00b6\n\n\nfunction\n!\n ToggleHomeZero\n()\n\n  \nlet\n pos \n=\n getpos\n(\n'.'\n)\n\n  execute \n\"normal! ^\"\n\n  \nif\n pos \n==\n getpos\n(\n'.'\n)\n\n    execute \n\"normal! 0\"\n\n  \nendif\n\n\nendfunction\n\n\n\nnnoremap\n \n0\n :\ncall\n ToggleHome\n()<\nCR\n>\n\n\n\n\n\nThis gets us exactly to the center of Venn diagrams heart:\n\n\nEasy to reach + First non-blank character + First column = Rainbow Colored Unicorn!\n\n\nSolution B\n\u00b6\n\n\nAfter enjoying staring at the function for a while, I realized we could add\nsuper toggling powers to other movements. Lets extract the \nnormal\n commands\ninto arguments and share the love with other keys!\n\n\nfunction\n!\n ToggleMovement\n(\nfirstOp\n,\n thenOp\n)\n\n  \nlet\n pos \n=\n getpos\n(\n'.'\n)\n\n  execute \n\"normal! \"\n . \na\n:firstOp\n  \nif\n pos \n==\n getpos\n(\n'.'\n)\n\n    execute \n\"normal! \"\n . \na\n:thenOp\n  \nendif\n\n\nendfunction\n\n\n\n\" The original carat 0 swap\n\n\nnnoremap\n \n<\nsilent\n>\n \n0\n :\ncall\n ToggleMovement\n(\n'^'\n,\n \n'0'\n)<\nCR\n>\n\n\n\n\" How about ; and ,\n\n\nnnoremap\n \n<\nsilent\n>\n ; :\ncall\n ToggleMovement\n(\n';'\n,\n \n','\n)<\nCR\n>\n\n\nnnoremap\n \n<\nsilent\n>\n \n,\n :\ncall\n ToggleMovement\n(\n','\n,\n \n';'\n)<\nCR\n>\n\n\n\n\" How about H and L\n\n\nnnoremap\n \n<\nsilent\n>\n H :\ncall\n ToggleMovement\n(\n'H'\n,\n \n'L'\n)<\nCR\n>\n\n\nnnoremap\n \n<\nsilent\n>\n L :\ncall\n ToggleMovement\n(\n'L'\n,\n \n'H'\n)<\nCR\n>\n\n\n\n\" How about G and gg\n\n\nnnoremap\n \n<\nsilent\n>\n G :\ncall\n ToggleMovement\n(\n'G'\n,\n \n'gg'\n)<\nCR\n>\n\n\nnnoremap\n \n<\nsilent\n>\n gg :\ncall\n ToggleMovement\n(\n'gg'\n,\n \n'G'\n)<\nCR\n>\n\n\n\n\n\nConclusion\n\u00b6\n\n\nToggleMovement\n is the gift that keeps on giving!\n\n\nWhat other movement can we add to the list?\nLet me know in the comments below.",
            "title": "Vim Toggle Movement: I Just Want to Go Home"
        },
        {
            "location": "/blog/2016/vim-toggle-movement/#vim-toggle-movement-i-just-want-to-go-home",
            "text": "I have a problem with the  ^  key. I need its functionality, but its proximity is\ntoo far for either of my stubby index fingers. No vimrc change can physically move it\ncloser to me, but I have found a way to move its funtionality to another a key.\nA key which already knows how to go home. An alternate home. A home where my\nheart isn't. Enough drama, what's the problem?!?",
            "title": "Vim Toggle Movement: I Just Want to Go Home"
        },
        {
            "location": "/blog/2016/vim-toggle-movement/#the-problem",
            "text": "In my daily coding, I have a deep seeded need to go to the first non-blank\ncharacter of a line. The only key that Vim provides for that functionality is  ^ ,\nthe hardest key to reach from the home row. A much more comfortable key to reach\nis  0 , but that shoots us past the first non-blank character all the way to\nthe left edge of the window.  <Home>  is the ugly step child of either option\nsince it's even harder to reach and takes us to the first column, too.  In case you don't believe me. Here's what the Vim document says:    0         To the first character of the line.  |exclusive|\n        motion.\n\n                *<Home>* *<kHome>*\n  <Home>  To the first character of the line.  |exclusive|\n        motion.  When moving up or down next, stay in same\n        TEXT column (if possible).  Most other commands stay\n        in the same SCREEN column.  <Home> works like \"1|\",\n        which differs from \"0\" when the line starts with a\n        <Tab>.\n\n                *^*\n  ^         To the first non-blank character of the line. |exclusive| motion.  Why can't I have a key that is easy to reach and takes me to the first\nnon-blank?!?   I could swap the functionality of  0  and  ^ :  nnoremap 0 ^\nnnoremap ^ 0  This still forces me to reach for  ^  when I need to need to get to that left\nedge. There must be a better way!",
            "title": "The Problem"
        },
        {
            "location": "/blog/2016/vim-toggle-movement/#the-solution",
            "text": "Let's give  0  some super toggling powers. When I hit it the first time, I want it be\nbe like  ^ . If I hit it again, I want it to finish its travels and go to the\nfirst column.",
            "title": "The Solution"
        },
        {
            "location": "/blog/2016/vim-toggle-movement/#solution-a",
            "text": "function !  ToggleHomeZero () \n   let  pos  =  getpos ( '.' ) \n  execute  \"normal! ^\" \n   if  pos  ==  getpos ( '.' ) \n    execute  \"normal! 0\" \n   endif  endfunction  nnoremap   0  : call  ToggleHome ()< CR >   This gets us exactly to the center of Venn diagrams heart:  Easy to reach + First non-blank character + First column = Rainbow Colored Unicorn!",
            "title": "Solution A"
        },
        {
            "location": "/blog/2016/vim-toggle-movement/#solution-b",
            "text": "After enjoying staring at the function for a while, I realized we could add\nsuper toggling powers to other movements. Lets extract the  normal  commands\ninto arguments and share the love with other keys!  function !  ToggleMovement ( firstOp ,  thenOp ) \n   let  pos  =  getpos ( '.' ) \n  execute  \"normal! \"  .  a :firstOp\n   if  pos  ==  getpos ( '.' ) \n    execute  \"normal! \"  .  a :thenOp\n   endif  endfunction  \" The original carat 0 swap  nnoremap   < silent >   0  : call  ToggleMovement ( '^' ,   '0' )< CR >  \" How about ; and ,  nnoremap   < silent >  ; : call  ToggleMovement ( ';' ,   ',' )< CR >  nnoremap   < silent >   ,  : call  ToggleMovement ( ',' ,   ';' )< CR >  \" How about H and L  nnoremap   < silent >  H : call  ToggleMovement ( 'H' ,   'L' )< CR >  nnoremap   < silent >  L : call  ToggleMovement ( 'L' ,   'H' )< CR >  \" How about G and gg  nnoremap   < silent >  G : call  ToggleMovement ( 'G' ,   'gg' )< CR >  nnoremap   < silent >  gg : call  ToggleMovement ( 'gg' ,   'G' )< CR >",
            "title": "Solution B"
        },
        {
            "location": "/blog/2016/vim-toggle-movement/#conclusion",
            "text": "ToggleMovement  is the gift that keeps on giving!  What other movement can we add to the list?\nLet me know in the comments below.",
            "title": "Conclusion"
        },
        {
            "location": "/blog/2016/yank-without-jank/",
            "text": "Yank Without Jank\n\u00b6\n\n\n\n\nFor all the great things Vim has to offer, it still has some inconsistencies with\nbasic editors that I simply can't unlearn. One of these nasties is moving the cursor\nafter a visual yank. Go ahead, try it: \nvipy\n. Where's your cursor? Where did\nyou expect it to be located? When you're in a boring editor and do\n\nshift-down-down-down <Cmd-c>\n, where's your cursor?  Where did you expect it\nto be located? This janky behaviour always throws me off for a moment, then I\ncompose myself, do a \n<backtick><greaterthan>\n to jump to the end of my selection, and \np\n.\n\n\nThere must be a better way!\n\n\n\nSolution A\n\u00b6\n\n\nRebind \ny\n to do exactly what we did above:\n\n\nvnoremap\n \ny\n \ny\n`\n>\n\n\n\n\n\nThis work and I lived with it for a few minutes, but it still wasn't perfect. I\nnoticed when I do line select using capital \nV\n the cursor would still move. The\nvertical motion was perfect, but horizontal motion was still jarring.\n\n\n\n\nSolution B\n\u00b6\n\n\nLet's try using marks to keep things in place:\n\n\nvnoremap\n \ny\n myy`\ny\n\n\nvnoremap\n Y myY`\ny\n\n\n\n\n\nThe capital \nY\n mapping is just in case we want to do a line wise yank from a\ncharacter wise selection.\n\n\n\n\nLike a well trained dog, the cursor stays even though you yank it.\n\n\nBONUS\n This snippet also takes over the \ny\n marker, so you can manually\n\n<backtick>y\n at a later time to continue yanking where you left off. This is great when\nyou're moving a lot of stuff around and want pick up where you last were. You\ncan also change the mark to capitals in the binding so it spans buffers, too.\n\n\nClosing\n\u00b6\n\n\nI've been using this setting for a while and noticed my blood pressure is way\ndown. No more yank anxiety means I'm a step closer to editing utopia!\n\n\nLet me know how this goes for you in the comments below.\n\n\nUpdates from Comments\n\u00b6\n\n\nCommenter @Krzysztof noticed Solution B wasn't allowing the user to specify\nthe target register. He was awesome enough to update the solution. Here's his\nsolution:\n\n\nvnoremap\n \n<\nexpr\n>\ny\n \n\"my\\\"\"\n . \nv\n:\nregister\n . \n\"y`y\"\n\n\n\n\n\nI've updated \n$MYVIMRC\n and it works great.\nThanks @Krzysztof for being awesome!",
            "title": "Yank Without Jank"
        },
        {
            "location": "/blog/2016/yank-without-jank/#yank-without-jank",
            "text": "For all the great things Vim has to offer, it still has some inconsistencies with\nbasic editors that I simply can't unlearn. One of these nasties is moving the cursor\nafter a visual yank. Go ahead, try it:  vipy . Where's your cursor? Where did\nyou expect it to be located? When you're in a boring editor and do shift-down-down-down <Cmd-c> , where's your cursor?  Where did you expect it\nto be located? This janky behaviour always throws me off for a moment, then I\ncompose myself, do a  <backtick><greaterthan>  to jump to the end of my selection, and  p .  There must be a better way!",
            "title": "Yank Without Jank"
        },
        {
            "location": "/blog/2016/yank-without-jank/#solution-a",
            "text": "Rebind  y  to do exactly what we did above:  vnoremap   y   y ` >   This work and I lived with it for a few minutes, but it still wasn't perfect. I\nnoticed when I do line select using capital  V  the cursor would still move. The\nvertical motion was perfect, but horizontal motion was still jarring.",
            "title": "Solution A"
        },
        {
            "location": "/blog/2016/yank-without-jank/#solution-b",
            "text": "Let's try using marks to keep things in place:  vnoremap   y  myy` y  vnoremap  Y myY` y   \nThe capital  Y  mapping is just in case we want to do a line wise yank from a\ncharacter wise selection.   Like a well trained dog, the cursor stays even though you yank it.  BONUS  This snippet also takes over the  y  marker, so you can manually <backtick>y  at a later time to continue yanking where you left off. This is great when\nyou're moving a lot of stuff around and want pick up where you last were. You\ncan also change the mark to capitals in the binding so it spans buffers, too.",
            "title": "Solution B"
        },
        {
            "location": "/blog/2016/yank-without-jank/#closing",
            "text": "I've been using this setting for a while and noticed my blood pressure is way\ndown. No more yank anxiety means I'm a step closer to editing utopia!  Let me know how this goes for you in the comments below.",
            "title": "Closing"
        },
        {
            "location": "/blog/2016/yank-without-jank/#updates-from-comments",
            "text": "Commenter @Krzysztof noticed Solution B wasn't allowing the user to specify\nthe target register. He was awesome enough to update the solution. Here's his\nsolution:  vnoremap   < expr > y   \"my\\\"\"  .  v : register  .  \"y`y\"   I've updated  $MYVIMRC  and it works great.\nThanks @Krzysztof for being awesome!",
            "title": "Updates from Comments"
        },
        {
            "location": "/blog/2016/sidescroll/",
            "text": "Sensible Horizontal Scroll in Vim\n\u00b6\n\n\n\n\nSometimes it's the little things that make a big difference, and this is about\nas small as it can get. Occasionally, I hold down \nl\n, \nw\n, or \ne\n to view long\nlines which have disappeared off the window. It's a bad habit and the penalty\nalways ruins my concentration. But after I found this setting, I'm free\nto cursor around like an innocent child unaware of death.\n\n\n\n\n\nTL;DR\n -- \nset sidescroll=1\n\n\nProblem\n\u00b6\n\n\nWhen \nset wrap\n is off, otherwise known as \nset nowrap\n, and a line is longer\nthan the window can handle, you'll need to scroll to see more of the line.\n\n{x}zl\n and \n{x}zh\n will scroll the screen right and left respectively.\nThat's a lot to remember to see some more text. Which leads me to hold\ndown \nw\n or \ne\n to get it done followed by janky behavior when the\ncursor gets to the edge of the window. The default behavior of revealing more\ntext is \u00bd a window width at a time. This abrupt jump throws off my fragile\nconcentration.\n\n\n\n\nSolution A\n\u00b6\n\n\nTurn on word wrapping. \nset wrap\n. Boring, but effective. You might also want\nto make word wrapping look nicer. I do that with the following settings.\n\n\nset\n breakindent\n\nset\n breakindentopt\n=\nsbr\n\n\n\" I use a unicode curly array with a <backslash><space>\n\n\nset\n \nshowbreak\n=\n\u21aa\n>\n\\\n\n\n\n\nThis of course doesn't solve the problem if, in fact, we want wrapping off.\n\n\nSolution B\n\u00b6\n\n\nset\n \nsidescroll\n=\n1\n\n\n\n\n\nThis simple setting makes Vim behave like every other plain editor. It will\nincrementally scroll one character at a time to reveal more text as needed.\n\n\n\n\nHere's the help doc to clear things up:\n\n\n'sidescroll' 'ss'   number  (default 0)\n                  global\n        The minimal number of columns to scroll horizontally.  Used only when\n        the 'wrap' option is off and the cursor is moved off of the screen.\n        When it is zero the cursor will be put in the middle of the screen.\n        When using a slow terminal set it to a large number or 0.  When using\n        a fast terminal use a small number or 1.  Not used for \"zh\" and \"zl\"\n        commands.\n\n'sidescrolloff' 'siso'  number (default 0)\nglobal\n        The minimal number of screen columns to keep to the left and to the\n        right of the cursor if 'nowrap' is set.  Setting this option to a\n        value greater than 0 while having |'sidescroll'| also at a non-zero\n        value makes some context visible in the line you are scrolling in\n        horizontally (except at beginning of the line).  Setting this option\n        to a large value (like 999) has the effect of keeping the cursor\n        horizontally centered in the window, as long as one does not come too\n        close to the beginning of the line.\n\n        Example: Try this together with 'sidescroll' and 'listchars' as\n                 in the following example to never allow the cursor to move\n                 onto the \"extends\" character:\n\n                 :set nowrap sidescroll=1 listchars=extends:>,precedes:<\n                 :set sidescrolloff=1\n\n\n\n\nSeems like the default was intended for a \"slow terminal\". If you're using a\nslow terminal while editing a large amount of unwrapped text, I'd recommend\ngetting a computer from this millennia and enabling \nsidescroll\n.\nAlso note that a sensible example is shown in the \nsidescrolloff\n section.\n\n\nOff Topic...\n\u00b6\n\n\nIt's interesting to study all the decisions made due to slow terminals.\nTry \n:help slow-terminal\n for a quick look and try \n:helpgrep slow\n to see way\nmore mentions. Use \n:help helpgrep\n if you didn't know about \nhelpgrep\n :)\n\n\nClosing\n\u00b6\n\n\nI'm sure you're thinking why so many words were written for a single setting.\nSimilar to my previous post about \nYank without Jank\n,\nthese unexpected janky behaviors cause anxiety. Anxiety that usually can't be\nidentified or resolved in the heat of a coding session, but is there, wading in\nthe weeds, ready to pounce at your next stray keystroke. As a student of Vim, I\nwant identify and resolve these issues so I can get back to why I like Vim;\nusing the dot operator.",
            "title": "Sensible Horizontal Scroll in Vim"
        },
        {
            "location": "/blog/2016/sidescroll/#sensible-horizontal-scroll-in-vim",
            "text": "Sometimes it's the little things that make a big difference, and this is about\nas small as it can get. Occasionally, I hold down  l ,  w , or  e  to view long\nlines which have disappeared off the window. It's a bad habit and the penalty\nalways ruins my concentration. But after I found this setting, I'm free\nto cursor around like an innocent child unaware of death.   TL;DR  --  set sidescroll=1",
            "title": "Sensible Horizontal Scroll in Vim"
        },
        {
            "location": "/blog/2016/sidescroll/#problem",
            "text": "When  set wrap  is off, otherwise known as  set nowrap , and a line is longer\nthan the window can handle, you'll need to scroll to see more of the line. {x}zl  and  {x}zh  will scroll the screen right and left respectively.\nThat's a lot to remember to see some more text. Which leads me to hold\ndown  w  or  e  to get it done followed by janky behavior when the\ncursor gets to the edge of the window. The default behavior of revealing more\ntext is \u00bd a window width at a time. This abrupt jump throws off my fragile\nconcentration.",
            "title": "Problem"
        },
        {
            "location": "/blog/2016/sidescroll/#solution-a",
            "text": "Turn on word wrapping.  set wrap . Boring, but effective. You might also want\nto make word wrapping look nicer. I do that with the following settings.  set  breakindent set  breakindentopt = sbr  \" I use a unicode curly array with a <backslash><space>  set   showbreak = \u21aa > \\  This of course doesn't solve the problem if, in fact, we want wrapping off.",
            "title": "Solution A"
        },
        {
            "location": "/blog/2016/sidescroll/#solution-b",
            "text": "set   sidescroll = 1   This simple setting makes Vim behave like every other plain editor. It will\nincrementally scroll one character at a time to reveal more text as needed.   Here's the help doc to clear things up:  'sidescroll' 'ss'   number  (default 0)\n                  global\n        The minimal number of columns to scroll horizontally.  Used only when\n        the 'wrap' option is off and the cursor is moved off of the screen.\n        When it is zero the cursor will be put in the middle of the screen.\n        When using a slow terminal set it to a large number or 0.  When using\n        a fast terminal use a small number or 1.  Not used for \"zh\" and \"zl\"\n        commands.\n\n'sidescrolloff' 'siso'  number (default 0)\nglobal\n        The minimal number of screen columns to keep to the left and to the\n        right of the cursor if 'nowrap' is set.  Setting this option to a\n        value greater than 0 while having |'sidescroll'| also at a non-zero\n        value makes some context visible in the line you are scrolling in\n        horizontally (except at beginning of the line).  Setting this option\n        to a large value (like 999) has the effect of keeping the cursor\n        horizontally centered in the window, as long as one does not come too\n        close to the beginning of the line.\n\n        Example: Try this together with 'sidescroll' and 'listchars' as\n                 in the following example to never allow the cursor to move\n                 onto the \"extends\" character:\n\n                 :set nowrap sidescroll=1 listchars=extends:>,precedes:<\n                 :set sidescrolloff=1  Seems like the default was intended for a \"slow terminal\". If you're using a\nslow terminal while editing a large amount of unwrapped text, I'd recommend\ngetting a computer from this millennia and enabling  sidescroll .\nAlso note that a sensible example is shown in the  sidescrolloff  section.",
            "title": "Solution B"
        },
        {
            "location": "/blog/2016/sidescroll/#off-topic",
            "text": "It's interesting to study all the decisions made due to slow terminals.\nTry  :help slow-terminal  for a quick look and try  :helpgrep slow  to see way\nmore mentions. Use  :help helpgrep  if you didn't know about  helpgrep  :)",
            "title": "Off Topic..."
        },
        {
            "location": "/blog/2016/sidescroll/#closing",
            "text": "I'm sure you're thinking why so many words were written for a single setting.\nSimilar to my previous post about  Yank without Jank ,\nthese unexpected janky behaviors cause anxiety. Anxiety that usually can't be\nidentified or resolved in the heat of a coding session, but is there, wading in\nthe weeds, ready to pounce at your next stray keystroke. As a student of Vim, I\nwant identify and resolve these issues so I can get back to why I like Vim;\nusing the dot operator.",
            "title": "Closing"
        },
        {
            "location": "/blog/2016/side-search/",
            "text": "Vim Side Search: Making Search Fun Again\n\u00b6\n\n\n\n\nThe \nquickfix\n feature is nice, but it doesn't give enough context around the\nsearch term that leads to use \nag\n from terminal and switch back and forth\nbetween programs. I do this search dance every day and I've had it! There must\nbe better way!\n\n\n\n\n\nProblem\n\u00b6\n\n\n\nLook at the \nquickfix\n window above. It spends most of its space showing the file name\nof the hit, then the remainder is spent on text around it. In projects using \n\nRails Engines\n with deeply nested\ndirectory structures, this often leaves me with just a bunch of paths in the \nquickfix\n.\n\n\nSolution A - The Unix Way\n\u00b6\n\n\nSome may argue Vim isn't suppose to do search. Vim rightly delegates to the\n\nUnix philosophy\n by\nallowing an external program do its searching. Let's try that for this\nsolution using \ngrep\n, \nack\n, and \nag\n.\n\n\n\n\nWe've run the 3 separate programs (normally, I would only use \nag\n) then\nbrowse the results to see if there's an interesting file. At this point I start\nusing my handy-dandy mouse to scroll around, precisely highlight the path of\ninterest, copy, and type \nvim <Paste>\n. Intuitive? Yes. Fast? No!\n\n\nMaybe I should use \ntmux\n or \nscreen\n so I don't need to mouse around, but\ntrying to select a path is still pretty slow for me and requires more cognitive\nload than I have patience for. After all, I'm trying to concentrate on a\nrefactor or something, not how to open a bunch of files. Should I practice more?\nYes. Will I? No!\n\n\nWe're going to use \nag\n from now on, since it's faster than \nack\n, and has\nprettier output than \ngrep\n. I really really really tried to get \ngrep\n to\noutput for humans, but couldn't figure it out.\n\n\nSolution B - Vim without Quickfix\n\u00b6\n\n\nLet Vim do some work for us.\n\n\nvim `ag --ignore=\\*.{css,scss} -l help` +'/help'\n\n\n\n\nWhat's that?!? Open Vim passing the result of \nag\n command. \nag\n is run with\nsome file exclusions, \n-l\n only file names, and \nhelp\n is the search term.\n\n+'/help'\n tells Vim to immediately start searching for 'help'.\n\n\nAfter all that, Vim should have started with a bunch of buffers. View them with\n\n:ls\n. Take notice of the buffer numbers to see how many files were found. Use\n\nn\n and \nN\n to jump through search matches in the file. Use \n:bn\n to go to the\nnext buffer and start hitting \nn\n again to cycle through the changes. If the\nnumber of files is small enough, you may be able to use \n:ball\n to open every\nbuffer in its own window.\n\n\nThats a lot of work to jump through changes. Good thing the \nquickfix\n exists.\n\n\nSolution C - Quickfix\n\u00b6\n\n\nThis is here for posterity. \nquickfix\n DOES make cycling through changes easier\nthan Solution B, but as I stated in the intro, it doesn't give the context that\nwe want.\n\n\nThoughtbot has a pretty good article\n\nabout how to setup Vim to use \nag\n. Once you do that, you can \n:grep help\n to\nget the following output:\n\n\n\n\nUse \n:cnext\n, \n:cprev\n, \n:cfirst\n, \n:clast\n to go to next, previous, first, and\nlast \nquickfix\n result respectively. Map those to keys to make it easier to\nnavigate.\n\n\nnnoremap [q :cprev<CR>\nnnoremap ]q :cnext<CR>\nnnoremap [Q :cfirst<CR>\nnnoremap ]Q :clast<CR>\n\n\n\n\nGet more help about \nquickfix\n using \n:help quickfix\n. Cry after realizing\neven \n:help quickfix\n can't show more context. I'll be here when you're done.\n\n\nSolution D - Side Search Plugin\n\u00b6\n\n\nSo how do we get the best of both worlds? How do we enter the land of a thousand\nwives/husbands? How do we get \nag\n output and quick navigation? For me, it\nwas writing a plugin in. For you it's using it. \nhttps://github.com/ddrscott/vim-side-search\n\n\nAfter installing the plugin using your favorite package manager, you'll have\naccess to the following functionality:\n\n\n\n\nThings to notice:\n\n\n\n\nag\n output is in a buffer with additional syntax highlighting!\n\n\nn\n and \nN\n used to jump to matches. Regular Vim navigation works, too!\n\n\n<CR>\n and \n<C-w><CR>\n used to open change and jump to change!\n\n\nNumber of matches shown in the buffer name!\n\n\nI use too many exclamation points!!!\n\n\n\n\nThe plugin's \nREADME\n has more details.\n\n\nClosing\n\u00b6\n\n\nI've been using this plugin ever since its inception and don't know where I'd\nbe without it. It gets some inspiration from \nfugitive's\n\n\n:Gstatus\n mode/buffer, and I wish there were more plugins that added\nfunctionality from \nstdout\n instead of transforming it into a different format. Unix\ntools makers spend a lot of time thinking about the output. Let's use it to our\nadvantage.\n\n\nI've learn a lot creating this plugin and plan to write about it in a future post.\nDo you love it or hate it? Have more ideas for Side Search? Please let me know what you\nthink of it. Have more ideas or issues for Side Search? Hit me up on \nGithub\n.\n\n\nReferences\n\u00b6\n\n\n\n\nThe Silver Searcher\n by Geoff Greer\n\n\nman ag\n\n\nman grep\n\n\nman tmux\n\n\nman screen\n\n\n:help quickfix\n\n\nFaster Grepping in Vim\n by Thoughtbot\n\n\nThe number 12\n\n\n\n\nIn The News\n\u00b6\n\n\n\n\nHacker News\n\n\nReddit",
            "title": "Vim Side Search: Making Search Fun Again"
        },
        {
            "location": "/blog/2016/side-search/#vim-side-search-making-search-fun-again",
            "text": "The  quickfix  feature is nice, but it doesn't give enough context around the\nsearch term that leads to use  ag  from terminal and switch back and forth\nbetween programs. I do this search dance every day and I've had it! There must\nbe better way!",
            "title": "Vim Side Search: Making Search Fun Again"
        },
        {
            "location": "/blog/2016/side-search/#problem",
            "text": "Look at the  quickfix  window above. It spends most of its space showing the file name\nof the hit, then the remainder is spent on text around it. In projects using  Rails Engines  with deeply nested\ndirectory structures, this often leaves me with just a bunch of paths in the  quickfix .",
            "title": "Problem"
        },
        {
            "location": "/blog/2016/side-search/#solution-a-the-unix-way",
            "text": "Some may argue Vim isn't suppose to do search. Vim rightly delegates to the Unix philosophy  by\nallowing an external program do its searching. Let's try that for this\nsolution using  grep ,  ack , and  ag .   We've run the 3 separate programs (normally, I would only use  ag ) then\nbrowse the results to see if there's an interesting file. At this point I start\nusing my handy-dandy mouse to scroll around, precisely highlight the path of\ninterest, copy, and type  vim <Paste> . Intuitive? Yes. Fast? No!  Maybe I should use  tmux  or  screen  so I don't need to mouse around, but\ntrying to select a path is still pretty slow for me and requires more cognitive\nload than I have patience for. After all, I'm trying to concentrate on a\nrefactor or something, not how to open a bunch of files. Should I practice more?\nYes. Will I? No!  We're going to use  ag  from now on, since it's faster than  ack , and has\nprettier output than  grep . I really really really tried to get  grep  to\noutput for humans, but couldn't figure it out.",
            "title": "Solution A - The Unix Way"
        },
        {
            "location": "/blog/2016/side-search/#solution-b-vim-without-quickfix",
            "text": "Let Vim do some work for us.  vim `ag --ignore=\\*.{css,scss} -l help` +'/help'  What's that?!? Open Vim passing the result of  ag  command.  ag  is run with\nsome file exclusions,  -l  only file names, and  help  is the search term. +'/help'  tells Vim to immediately start searching for 'help'.  After all that, Vim should have started with a bunch of buffers. View them with :ls . Take notice of the buffer numbers to see how many files were found. Use n  and  N  to jump through search matches in the file. Use  :bn  to go to the\nnext buffer and start hitting  n  again to cycle through the changes. If the\nnumber of files is small enough, you may be able to use  :ball  to open every\nbuffer in its own window.  Thats a lot of work to jump through changes. Good thing the  quickfix  exists.",
            "title": "Solution B - Vim without Quickfix"
        },
        {
            "location": "/blog/2016/side-search/#solution-c-quickfix",
            "text": "This is here for posterity.  quickfix  DOES make cycling through changes easier\nthan Solution B, but as I stated in the intro, it doesn't give the context that\nwe want.  Thoughtbot has a pretty good article \nabout how to setup Vim to use  ag . Once you do that, you can  :grep help  to\nget the following output:   Use  :cnext ,  :cprev ,  :cfirst ,  :clast  to go to next, previous, first, and\nlast  quickfix  result respectively. Map those to keys to make it easier to\nnavigate.  nnoremap [q :cprev<CR>\nnnoremap ]q :cnext<CR>\nnnoremap [Q :cfirst<CR>\nnnoremap ]Q :clast<CR>  Get more help about  quickfix  using  :help quickfix . Cry after realizing\neven  :help quickfix  can't show more context. I'll be here when you're done.",
            "title": "Solution C - Quickfix"
        },
        {
            "location": "/blog/2016/side-search/#solution-d-side-search-plugin",
            "text": "So how do we get the best of both worlds? How do we enter the land of a thousand\nwives/husbands? How do we get  ag  output and quick navigation? For me, it\nwas writing a plugin in. For you it's using it.  https://github.com/ddrscott/vim-side-search  After installing the plugin using your favorite package manager, you'll have\naccess to the following functionality:   Things to notice:   ag  output is in a buffer with additional syntax highlighting!  n  and  N  used to jump to matches. Regular Vim navigation works, too!  <CR>  and  <C-w><CR>  used to open change and jump to change!  Number of matches shown in the buffer name!  I use too many exclamation points!!!   The plugin's  README  has more details.",
            "title": "Solution D - Side Search Plugin"
        },
        {
            "location": "/blog/2016/side-search/#closing",
            "text": "I've been using this plugin ever since its inception and don't know where I'd\nbe without it. It gets some inspiration from  fugitive's  :Gstatus  mode/buffer, and I wish there were more plugins that added\nfunctionality from  stdout  instead of transforming it into a different format. Unix\ntools makers spend a lot of time thinking about the output. Let's use it to our\nadvantage.  I've learn a lot creating this plugin and plan to write about it in a future post.\nDo you love it or hate it? Have more ideas for Side Search? Please let me know what you\nthink of it. Have more ideas or issues for Side Search? Hit me up on  Github .",
            "title": "Closing"
        },
        {
            "location": "/blog/2016/side-search/#references",
            "text": "The Silver Searcher  by Geoff Greer  man ag  man grep  man tmux  man screen  :help quickfix  Faster Grepping in Vim  by Thoughtbot  The number 12",
            "title": "References"
        },
        {
            "location": "/blog/2016/side-search/#in-the-news",
            "text": "Hacker News  Reddit",
            "title": "In The News"
        },
        {
            "location": "/blog/2016/bs-to-the-black-hole/",
            "text": "BS to the Black Hole\n\u00b6\n\n\n\n\nFirst post in 2 years. Sorry to keep you waiting.\n\n\nI've been playing with Vim again, more specifically NeoVim\n\nhttps://neovim.io/\n, and this time I think it's going to stick.\n\n\nThe Problem\n\u00b6\n\n\nSometimes, I want to delete text without worrying about blowing away the \nunnamed\n\nregister. This can be done by prefixing a normal or visual delete with \n\"_\n,\nbut that's an awkward dance for my pinky and ring finger. Go ahead, try it.\nYou'll feel like you're in junior high again.\n\n\n\n\n\nSolution #1\n\u00b6\n\n\nSetup a single key to do that \n\"_\n thing for me. So my naive approach was to add\nthe following:\n\n\nnnoremap\n \n<\nBS\n>\n \n\"_\n\n\nvnoremap\n \n<\nBS\n>\n \n\"_\n\n\n\n\n\nThis was fine for 32.1 seconds of usability testing. It did the job, but what\ncames after a \n\"_\n was usually a \ndw\n or \ndb\n operator. Ah oh, I said the \"o\"\nword. That means I have to make a \nopfunc\n. (Who makes these rules?!?)\n\n\nSolution #2\n\u00b6\n\n\nSo what is this operator going to let us do? How about \n<BS>iw\n or \n<BS>ap\n or\n\nv{motion around something you hate}<BS>\n? If any of those seem awesome, here's\nhow to get in on the hot action!\n\n\n\" Add to your .vimrc or init.vim or vim.after or :e $MYVIMRC\n\nfunc\n!\n BlackHoleDeleteOperator\n(\ntype\n)\n\n  \nif\n \na\n:type \n==\n# \n'char'\n\n    execute \n'normal! `[v`]\"_d'\n\n  \nelseif\n \na\n:type \n==\n# \n'line'\n\n    execute \n'normal! `[V`]\"_d'\n\n  \nelse\n\n    execute \n'normal! `<'\n . \na\n:type . \n'`>\"_d'\n\n  \nendif\n\n\nendf\n\n\n\n\" Map to <BS> because it's under worked in Vim.\n\n\nnnoremap\n \n<\nsilent\n>\n \n<\nBS\n>\n \n<\nEsc\n>\n:\nset\n \nopfunc\n=\nBlackHoleDeleteOperator\n<\nCR\n>\ng\n@\n\nvnoremap\n \n<\nsilent\n>\n \n<\nBS\n>\n :\n<\nC\n-\nu\n>\ncall\n BlackHoleDeleteOperator\n(\nvisualmode\n())<\nCR\n>\n\n\n\n\n\nHow Does it Work?\n\u00b6\n\n\n\n\n\n\nopfunc\n is best explained in Vim help. Use \n:help opfunc\n and follow the \n<C-]>\n\n   until clarity is achieved.\n\n\n\n\n\n\n:help normal\n - evaluates the following characters as if they were typed.\n\n\n\n\n\n\n:help marks\n - page down a bit to get the list of automatic marks based on\n   last positions of various changes, jumps, and actions.\n\n\n\n\n\n\nhttp://learnvimscriptthehardway.stevelosh.com/chapters/33.html\n - seriously,\n   this guy does a lot better explaining than me. Learn it the hard way, first,\n   ask questions later.\n\n\n\n\n\n\nClosing\n\u00b6\n\n\nThanks for getting this far. Do you have a better mapping for \n<BS>\n? Do you\nhave a more creative solution than typing \n\"_\n to access the black hole\nregister? Let me know by commenting or share this post to some one who does.",
            "title": "BS to the Black Hole"
        },
        {
            "location": "/blog/2016/bs-to-the-black-hole/#bs-to-the-black-hole",
            "text": "First post in 2 years. Sorry to keep you waiting.  I've been playing with Vim again, more specifically NeoVim https://neovim.io/ , and this time I think it's going to stick.",
            "title": "BS to the Black Hole"
        },
        {
            "location": "/blog/2016/bs-to-the-black-hole/#the-problem",
            "text": "Sometimes, I want to delete text without worrying about blowing away the  unnamed \nregister. This can be done by prefixing a normal or visual delete with  \"_ ,\nbut that's an awkward dance for my pinky and ring finger. Go ahead, try it.\nYou'll feel like you're in junior high again.",
            "title": "The Problem"
        },
        {
            "location": "/blog/2016/bs-to-the-black-hole/#solution-1",
            "text": "Setup a single key to do that  \"_  thing for me. So my naive approach was to add\nthe following:  nnoremap   < BS >   \"_  vnoremap   < BS >   \"_   This was fine for 32.1 seconds of usability testing. It did the job, but what\ncames after a  \"_  was usually a  dw  or  db  operator. Ah oh, I said the \"o\"\nword. That means I have to make a  opfunc . (Who makes these rules?!?)",
            "title": "Solution #1"
        },
        {
            "location": "/blog/2016/bs-to-the-black-hole/#solution-2",
            "text": "So what is this operator going to let us do? How about  <BS>iw  or  <BS>ap  or v{motion around something you hate}<BS> ? If any of those seem awesome, here's\nhow to get in on the hot action!  \" Add to your .vimrc or init.vim or vim.after or :e $MYVIMRC \nfunc !  BlackHoleDeleteOperator ( type ) \n   if   a :type  == #  'char' \n    execute  'normal! `[v`]\"_d' \n   elseif   a :type  == #  'line' \n    execute  'normal! `[V`]\"_d' \n   else \n    execute  'normal! `<'  .  a :type .  '`>\"_d' \n   endif  endf  \" Map to <BS> because it's under worked in Vim.  nnoremap   < silent >   < BS >   < Esc > : set   opfunc = BlackHoleDeleteOperator < CR > g @ vnoremap   < silent >   < BS >  : < C - u > call  BlackHoleDeleteOperator ( visualmode ())< CR >",
            "title": "Solution #2"
        },
        {
            "location": "/blog/2016/bs-to-the-black-hole/#how-does-it-work",
            "text": "opfunc  is best explained in Vim help. Use  :help opfunc  and follow the  <C-]> \n   until clarity is achieved.    :help normal  - evaluates the following characters as if they were typed.    :help marks  - page down a bit to get the list of automatic marks based on\n   last positions of various changes, jumps, and actions.    http://learnvimscriptthehardway.stevelosh.com/chapters/33.html  - seriously,\n   this guy does a lot better explaining than me. Learn it the hard way, first,\n   ask questions later.",
            "title": "How Does it Work?"
        },
        {
            "location": "/blog/2016/bs-to-the-black-hole/#closing",
            "text": "Thanks for getting this far. Do you have a better mapping for  <BS> ? Do you\nhave a more creative solution than typing  \"_  to access the black hole\nregister? Let me know by commenting or share this post to some one who does.",
            "title": "Closing"
        },
        {
            "location": "/blog/2014/tech-stack-2014-edition/",
            "text": "Tech Stack 2014 Edition\n\u00b6\n\n\nI've built a lot of things, but the most interesting thing is usually what I'm currently working on or have\nbuilt recently. With that in mind I thought I'd take a moment to reflect on the technology stack of my current\nproject.\n\n\n\n\n\nOverview\n\u00b6\n\n\nThe service provided is a mobile eBook store. End users can find, buy and read books in their browser and on mobile app\nplatforms like iOS and Android.\n\n\nFrameworks\n\u00b6\n\n\nThe framework selection was very organic and was not chosen all at once. I had extensive background in Rails so it made\nsense to start there and integrate into other systems via RubyGem plugins when vanilla Rails/Database didn't fit.\n\n\nRuby on Rails\n\u00b6\n\n\nI've been using this since version 1, and never looked back. Rails and the Ruby language \"get\" me. They\nthink the way I do \u2013 they complete me. Prior to Ruby I was using Java and writing wrappers that were very\nsimilar Ruby and ActiveRecord/Support so to find a language and framework that did all that and more was a\ndream come true.\n\n\nThe discovery was in 2005 which makes it 9 years old. That's like 50 tech years. That\nbeing said. I still have not found another language or framework that does things more\nintuitively that Ruby or Rails. Maybe I'm an old dog that can't learn new tricks. Maybe\nI'm stuck in my ways. Regardless, I still feel productive and I believe my human clients\nagree.\n\n\nSolr / Sunspot\n\u00b6\n\n\nWe started using SQL search and quickly ran into performance walls for the variety queries we needed to perform, so we\nneeded something else. Lucene is the industry standard in searching. Solr puts a wrapper around Lucene that allows for\ndynamic index fields additions and provides more search options. Sunspot integrates all that into ActiveRecord.\nIt took maybe 10 minutes for us to try out Sunspot in our current catalog modals and made the user search experience\nfaster.\n\n\nThe thing we miss by not having database queries is table joins. Joins are available in Solr, but have a similar\nperformance hit as DB. The workaround for joins was to have a wide data set.\n\n\nExample Sunspot Model Config\n\u00b6\n\n\nclass\n \nNode\n\n  \nbelongs_to\n \n:title\n\n\nend\n\n\n\nclass\n \nTitle\n\n  \nhas_many\n \n:nodes\n\n  \nhas_many\n \n:prices\n\n\n  \nsearchable\n \ndo\n\n    \ntext\n \n:name\n\n    \ntext\n \n:contributors\n\n    \ntext\n \n:snippet\n\n\n      \ninteger\n \n:nodes\n,\n \nmultiple\n:\n \ntrue\n \ndo\n \nsolr_nodes\n;\n \nend\n\n      \nstring\n \n:countries\n,\n \nmultiple\n:\n \ntrue\n \ndo\n \nsolr_countries\n;\n \nend\n\n      \nstring\n \n:currencies\n,\n \nmultiple\n:\n \ntrue\n \ndo\n \nsolr_currencies\n;\n \nend\n\n    \nPrice\n.\nselect\n(\n:country\n,\n \n:currency\n)\n.\nuniq\n.\neach\n \ndo\n \n|\nprice\n|\n\n        \ndouble\n \n\"\n#{\nprice\n.\ncountry\n}\n_\n#{\nprice\n.\ncurrency\n}\n\"\n \ndo\n \nsolr_country_currency\n(\nprice\n);\n \nend\n\n    \nend\n\n\n    \n# ... many other fields\n\n\n  \nend\n\n\n  \ndef\n \nsolr_countries\n\n    \nprices\n.\npluck\n(\n:country\n)\n\n  \nend\n\n\n  \ndef\n \nsolr_currencies\n\n    \nprices\n.\npluck\n(\n:currency\n)\n\n  \nend\n\n\n  \ndef\n \nsolr_country_currency\n(\nprice\n)\n\n    \nprices\n.\nwhere\n(\ncountry\n:\n \nprice\n.\ncountry\n,\n \ncurrency\n:\n \nprice\n.\ncurrency\n)\n.\nfirst\n.\ntry\n(\n:price\n)\n\n  \nend\n\n\nend\n\n\n\nclass\n \nPrice\n\n  \nbelongs_to\n \n:title\n\n\nend\n\n\n\n\n\nExample Sunspot Search\n\u00b6\n\n\nTitle\n.\nsearch\n \ndo\n\n    \nfull_text\n(\n'cats'\n)\n\n    \nwith\n(\n:US_USD\n)\n.\nless_than\n(\n1\n.\n0\n)\n\n\nend\n\n\n\n\n\nThe Sunspot site has many examples: \nhttp://sunspot.github.io/\n\n\nRedis\n\u00b6\n\n\nhttp://redis.io\n describes themselves as:\n\n\n\n\nRedis is an open source, BSD licensed, advanced key-value store.\nIt is often referred to as a data structure server since keys can contain\nstrings, hashes, lists, sets and sorted sets.\n\n\n\n\nTo me this is a remote shared hash, array, stack, and queue. All atomic all almost fast\nas locale memory structures. Here's how I'm using it:\n\n\n\n\nRails.cache for reponse caching\n\n\nResque queues to off load long jobs to a background process.\n\n\nSystem wide mutex via \nsetnx\n and \nhsetnx\n command\n\n\nAnything that would require a DB lock, I would prefer to let Redis handle the lock. This one concept has allowed my RDBMS to stay small and lean.\n\n\n...\n\n\n\n\nCheck out their documentation for more ideas. Every time I read through the docs I come\nup with 10 more things I could take off my RDBMS. If only I had could do it over again.\n\n\nCouch DB\n\u00b6\n\n\nCouch is our dump of raw contents. We only use 20% of Couch's features because the remaining map/reduce portions of the system took long for our data set. I'm sure there are better ways to use it, but in the end one the main features of how it indexes and aggregates data we can't use. Maybe in the future, but we've already moved on.\n\n\nThe feature we do use though is a version controlled document store. We take in various sources of data from an external source, convert it to JSON, add a few state tracking fields, and store it in Couch. Couch make the document retrieval fast and painless.\n\n\nApache/Passenger\n\u00b6\n\n\nI should be using Nginx, but haven't quite gotten around to figuring it out. Apache is fast enough for our needs right now. Passenger is the gold standard in managing multiple Ruby web processes. Nothing too exciting here. It just works.\n\n\nNode.js\n\u00b6\n\n\nhttp://nodejs.org/\n\nThis is where the system starts to Frankenstein. We use Node.js for Socket.io\n\n\nSocket.io\n\u00b6\n\n\nhttp://socket.io/\n\nMost of the cool factor of your system revolves around the use of Socket.io to bring realtime server push to all our front ends: Browser and Apps. When we have a flash sale or special offer web sockets delivers.",
            "title": "Tech Stack 2014 Edition"
        },
        {
            "location": "/blog/2014/tech-stack-2014-edition/#tech-stack-2014-edition",
            "text": "I've built a lot of things, but the most interesting thing is usually what I'm currently working on or have\nbuilt recently. With that in mind I thought I'd take a moment to reflect on the technology stack of my current\nproject.",
            "title": "Tech Stack 2014 Edition"
        },
        {
            "location": "/blog/2014/tech-stack-2014-edition/#overview",
            "text": "The service provided is a mobile eBook store. End users can find, buy and read books in their browser and on mobile app\nplatforms like iOS and Android.",
            "title": "Overview"
        },
        {
            "location": "/blog/2014/tech-stack-2014-edition/#frameworks",
            "text": "The framework selection was very organic and was not chosen all at once. I had extensive background in Rails so it made\nsense to start there and integrate into other systems via RubyGem plugins when vanilla Rails/Database didn't fit.",
            "title": "Frameworks"
        },
        {
            "location": "/blog/2014/tech-stack-2014-edition/#ruby-on-rails",
            "text": "I've been using this since version 1, and never looked back. Rails and the Ruby language \"get\" me. They\nthink the way I do \u2013 they complete me. Prior to Ruby I was using Java and writing wrappers that were very\nsimilar Ruby and ActiveRecord/Support so to find a language and framework that did all that and more was a\ndream come true.  The discovery was in 2005 which makes it 9 years old. That's like 50 tech years. That\nbeing said. I still have not found another language or framework that does things more\nintuitively that Ruby or Rails. Maybe I'm an old dog that can't learn new tricks. Maybe\nI'm stuck in my ways. Regardless, I still feel productive and I believe my human clients\nagree.",
            "title": "Ruby on Rails"
        },
        {
            "location": "/blog/2014/tech-stack-2014-edition/#solr-sunspot",
            "text": "We started using SQL search and quickly ran into performance walls for the variety queries we needed to perform, so we\nneeded something else. Lucene is the industry standard in searching. Solr puts a wrapper around Lucene that allows for\ndynamic index fields additions and provides more search options. Sunspot integrates all that into ActiveRecord.\nIt took maybe 10 minutes for us to try out Sunspot in our current catalog modals and made the user search experience\nfaster.  The thing we miss by not having database queries is table joins. Joins are available in Solr, but have a similar\nperformance hit as DB. The workaround for joins was to have a wide data set.",
            "title": "Solr / Sunspot"
        },
        {
            "location": "/blog/2014/tech-stack-2014-edition/#example-sunspot-model-config",
            "text": "class   Node \n   belongs_to   :title  end  class   Title \n   has_many   :nodes \n   has_many   :prices \n\n   searchable   do \n     text   :name \n     text   :contributors \n     text   :snippet \n\n       integer   :nodes ,   multiple :   true   do   solr_nodes ;   end \n       string   :countries ,   multiple :   true   do   solr_countries ;   end \n       string   :currencies ,   multiple :   true   do   solr_currencies ;   end \n     Price . select ( :country ,   :currency ) . uniq . each   do   | price | \n         double   \" #{ price . country } _ #{ price . currency } \"   do   solr_country_currency ( price );   end \n     end \n\n     # ... many other fields \n\n   end \n\n   def   solr_countries \n     prices . pluck ( :country ) \n   end \n\n   def   solr_currencies \n     prices . pluck ( :currency ) \n   end \n\n   def   solr_country_currency ( price ) \n     prices . where ( country :   price . country ,   currency :   price . currency ) . first . try ( :price ) \n   end  end  class   Price \n   belongs_to   :title  end",
            "title": "Example Sunspot Model Config"
        },
        {
            "location": "/blog/2014/tech-stack-2014-edition/#example-sunspot-search",
            "text": "Title . search   do \n     full_text ( 'cats' ) \n     with ( :US_USD ) . less_than ( 1 . 0 )  end   The Sunspot site has many examples:  http://sunspot.github.io/",
            "title": "Example Sunspot Search"
        },
        {
            "location": "/blog/2014/tech-stack-2014-edition/#redis",
            "text": "http://redis.io  describes themselves as:   Redis is an open source, BSD licensed, advanced key-value store.\nIt is often referred to as a data structure server since keys can contain\nstrings, hashes, lists, sets and sorted sets.   To me this is a remote shared hash, array, stack, and queue. All atomic all almost fast\nas locale memory structures. Here's how I'm using it:   Rails.cache for reponse caching  Resque queues to off load long jobs to a background process.  System wide mutex via  setnx  and  hsetnx  command  Anything that would require a DB lock, I would prefer to let Redis handle the lock. This one concept has allowed my RDBMS to stay small and lean.  ...   Check out their documentation for more ideas. Every time I read through the docs I come\nup with 10 more things I could take off my RDBMS. If only I had could do it over again.",
            "title": "Redis"
        },
        {
            "location": "/blog/2014/tech-stack-2014-edition/#couch-db",
            "text": "Couch is our dump of raw contents. We only use 20% of Couch's features because the remaining map/reduce portions of the system took long for our data set. I'm sure there are better ways to use it, but in the end one the main features of how it indexes and aggregates data we can't use. Maybe in the future, but we've already moved on.  The feature we do use though is a version controlled document store. We take in various sources of data from an external source, convert it to JSON, add a few state tracking fields, and store it in Couch. Couch make the document retrieval fast and painless.",
            "title": "Couch DB"
        },
        {
            "location": "/blog/2014/tech-stack-2014-edition/#apachepassenger",
            "text": "I should be using Nginx, but haven't quite gotten around to figuring it out. Apache is fast enough for our needs right now. Passenger is the gold standard in managing multiple Ruby web processes. Nothing too exciting here. It just works.",
            "title": "Apache/Passenger"
        },
        {
            "location": "/blog/2014/tech-stack-2014-edition/#nodejs",
            "text": "http://nodejs.org/ \nThis is where the system starts to Frankenstein. We use Node.js for Socket.io",
            "title": "Node.js"
        },
        {
            "location": "/blog/2014/tech-stack-2014-edition/#socketio",
            "text": "http://socket.io/ \nMost of the cool factor of your system revolves around the use of Socket.io to bring realtime server push to all our front ends: Browser and Apps. When we have a flash sale or special offer web sockets delivers.",
            "title": "Socket.io"
        },
        {
            "location": "/blog/2014/octopress-to-the-rescue/",
            "text": "Octopress to the Rescue\n\u00b6\n\n\n\n\nAfter nearly a year without Posterous, I've finally got around to migrating to another system.\nThis time around it's a static blog builder: \nhttp://octopress.org/\n\n\n\n\n\nOctopress is a wrapper around Jekyll which is a utility for creating a static blogging site. A blog that can be\nhosted on anything that can server files: Apache, AWS, Dropbox, etc...\n\n\nQ: Why not use WordPress, Tumbler, Blogger?!?\n\u00b6\n\n\nThose tailor to non-developers and their editors are not the ones I use everyday, my IDE. Octopress lets me\nwrite my articles the same way as I write code: plain text. It uses markdown or any other HTML generator I configure.\n\n\nStatic pages are easier for me to deploy when I have to switch hosting providers. Hopefully Github sticks around\nfor a while, but if they don't, I can rest assured I can have the article hosted some where else faster than DNS propagation.\n\n\nputs\n \n\"I can use code snippets\"\n\n\n# And they will be nicely formatted.\n\n\nmaybe_one_day\n \ndo\n\n  \nuse\n(\nCodePen\n)\n \nor\n \nuse\n(\njsFiddle\n)\n\n\nend\n\n\n\n\n\nThe initial theme I selected is \nhttps://github.com/sevenadrian/MediumFox\n. It's clean, simple and pretty much\nwhat I would have \ntried\n to make if I had time. They seemed to have omitted some features from the classic theme, but\nas with all Open Source projects it is easy to remedy.\n\n\nTime to post to do my first deploy... then convert all the Posterous archives.",
            "title": "Octopress to the Rescue"
        },
        {
            "location": "/blog/2014/octopress-to-the-rescue/#octopress-to-the-rescue",
            "text": "After nearly a year without Posterous, I've finally got around to migrating to another system.\nThis time around it's a static blog builder:  http://octopress.org/   Octopress is a wrapper around Jekyll which is a utility for creating a static blogging site. A blog that can be\nhosted on anything that can server files: Apache, AWS, Dropbox, etc...",
            "title": "Octopress to the Rescue"
        },
        {
            "location": "/blog/2014/octopress-to-the-rescue/#q-why-not-use-wordpress-tumbler-blogger",
            "text": "Those tailor to non-developers and their editors are not the ones I use everyday, my IDE. Octopress lets me\nwrite my articles the same way as I write code: plain text. It uses markdown or any other HTML generator I configure.  Static pages are easier for me to deploy when I have to switch hosting providers. Hopefully Github sticks around\nfor a while, but if they don't, I can rest assured I can have the article hosted some where else faster than DNS propagation.  puts   \"I can use code snippets\"  # And they will be nicely formatted.  maybe_one_day   do \n   use ( CodePen )   or   use ( jsFiddle )  end   The initial theme I selected is  https://github.com/sevenadrian/MediumFox . It's clean, simple and pretty much\nwhat I would have  tried  to make if I had time. They seemed to have omitted some features from the classic theme, but\nas with all Open Source projects it is easy to remedy.  Time to post to do my first deploy... then convert all the Posterous archives.",
            "title": "Q: Why not use WordPress, Tumbler, Blogger?!?"
        }
    ]
}